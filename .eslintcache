[{"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/App.tsx":"1","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/client.ts":"2","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/index.tsx":"3","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/middleware/logger.ts":"4","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/index.ts":"5","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/query/QueryAirtable.tsx":"6","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/query/queries.tsx":"7","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/API/graphqlAPI.ts":"8","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/modelUtils.tsx":"9","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Editor.tsx":"10","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Light.tsx":"11","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Box.tsx":"12","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms/MiddleLongBlock.tsx":"13","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/ClippingSlider/ClippingSlider.tsx":"14","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/index.ts":"15","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B3.tsx":"16","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A1.tsx":"17","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A4.tsx":"18","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A3.tsx":"19","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A5.tsx":"20","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B6.tsx":"21","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B4.tsx":"22","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B5.tsx":"23","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C2.tsx":"24","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C3.tsx":"25","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C5.tsx":"26","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C1.tsx":"27","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C4.tsx":"28","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D1.tsx":"29","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D2.tsx":"30","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D3.tsx":"31","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E1.tsx":"32","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E3.tsx":"33","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D4.tsx":"34","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E2.tsx":"35","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F1.tsx":"36","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F3.tsx":"37","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E4.tsx":"38","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F5.tsx":"39","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B7.tsx":"40","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G1.tsx":"41","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F4.tsx":"42","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G3.tsx":"43","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G4.tsx":"44","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G6.tsx":"45","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G5.tsx":"46","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G2.tsx":"47","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F2.tsx":"48","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H1.tsx":"49","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B2.tsx":"50","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G7.tsx":"51","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B1.tsx":"52","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A2.tsx":"53","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H5.tsx":"54","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H2.tsx":"55","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H3.tsx":"56","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H4.tsx":"57","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/index.ts":"58","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Graph.ts":"59","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Edge.ts":"60","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Vertex.ts":"61","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Container.ts":"62","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Component.ts":"63","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Bond.ts":"64","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Matrix4.ts":"65","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Container/Container.tsx":"66","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/reducers.ts":"67","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Dashboard/reducers.ts":"68","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Dashboard/types/model-state-action-types.ts":"69","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/types/model-state-action-types.ts":"70","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/actions.ts":"71","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/greeting-page/GreetingPage.tsx":"72","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/greeting-page/Scene.tsx":"73","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/greeting-page/Overlay.tsx":"74","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/BLK-A.tsx":"75"},{"size":542,"mtime":1611101780052,"results":"76","hashOfConfig":"77"},{"size":695,"mtime":1610390230521,"results":"78","hashOfConfig":"77"},{"size":622,"mtime":1610974223236,"results":"79","hashOfConfig":"77"},{"size":422,"mtime":1610476513671,"results":"80","hashOfConfig":"77"},{"size":836,"mtime":1611064229395,"results":"81","hashOfConfig":"77"},{"size":2067,"mtime":1610726231310,"results":"82","hashOfConfig":"83"},{"size":3078,"mtime":1610709553829,"results":"84","hashOfConfig":"83"},{"size":6106,"mtime":1610728341954,"results":"85","hashOfConfig":"83"},{"size":4281,"mtime":1610964973916,"results":"86","hashOfConfig":"77"},{"size":5432,"mtime":1611075496953,"results":"87","hashOfConfig":"77"},{"size":840,"mtime":1610964947647,"results":"88","hashOfConfig":"77"},{"size":1274,"mtime":1610964973809,"results":"89","hashOfConfig":"77"},{"size":1313,"mtime":1610964973814,"results":"90","hashOfConfig":"77"},{"size":1242,"mtime":1610986104256,"results":"91","hashOfConfig":"77"},{"size":2659,"mtime":1610964973915,"results":"92","hashOfConfig":"77"},{"size":1177,"mtime":1610964973878,"results":"93","hashOfConfig":"77"},{"size":1342,"mtime":1610964973871,"results":"94","hashOfConfig":"77"},{"size":1177,"mtime":1610964973874,"results":"95","hashOfConfig":"77"},{"size":1175,"mtime":1610964973873,"results":"96","hashOfConfig":"77"},{"size":1177,"mtime":1610964973875,"results":"97","hashOfConfig":"77"},{"size":1177,"mtime":1610964973881,"results":"98","hashOfConfig":"77"},{"size":1177,"mtime":1610964973879,"results":"99","hashOfConfig":"77"},{"size":1177,"mtime":1610964973880,"results":"100","hashOfConfig":"77"},{"size":1177,"mtime":1610964973884,"results":"101","hashOfConfig":"77"},{"size":1177,"mtime":1610964973885,"results":"102","hashOfConfig":"77"},{"size":1177,"mtime":1610964973887,"results":"103","hashOfConfig":"77"},{"size":1176,"mtime":1610964973883,"results":"104","hashOfConfig":"77"},{"size":1177,"mtime":1610964973886,"results":"105","hashOfConfig":"77"},{"size":1176,"mtime":1610964973888,"results":"106","hashOfConfig":"77"},{"size":1175,"mtime":1610964973889,"results":"107","hashOfConfig":"77"},{"size":1175,"mtime":1610964973891,"results":"108","hashOfConfig":"77"},{"size":1175,"mtime":1610964973893,"results":"109","hashOfConfig":"77"},{"size":1175,"mtime":1610964973895,"results":"110","hashOfConfig":"77"},{"size":1175,"mtime":1610964973892,"results":"111","hashOfConfig":"77"},{"size":1175,"mtime":1610964973894,"results":"112","hashOfConfig":"77"},{"size":1175,"mtime":1610964973898,"results":"113","hashOfConfig":"77"},{"size":1175,"mtime":1610964973900,"results":"114","hashOfConfig":"77"},{"size":1175,"mtime":1610964973896,"results":"115","hashOfConfig":"77"},{"size":1175,"mtime":1610964973902,"results":"116","hashOfConfig":"77"},{"size":1177,"mtime":1610964973882,"results":"117","hashOfConfig":"77"},{"size":1175,"mtime":1610964973903,"results":"118","hashOfConfig":"77"},{"size":1175,"mtime":1610964973901,"results":"119","hashOfConfig":"77"},{"size":1175,"mtime":1610964973905,"results":"120","hashOfConfig":"77"},{"size":1175,"mtime":1610964973906,"results":"121","hashOfConfig":"77"},{"size":1175,"mtime":1610964973908,"results":"122","hashOfConfig":"77"},{"size":1175,"mtime":1610964973907,"results":"123","hashOfConfig":"77"},{"size":1175,"mtime":1610964973904,"results":"124","hashOfConfig":"77"},{"size":1175,"mtime":1610964973899,"results":"125","hashOfConfig":"77"},{"size":1175,"mtime":1610964973910,"results":"126","hashOfConfig":"77"},{"size":1177,"mtime":1610964973877,"results":"127","hashOfConfig":"77"},{"size":1175,"mtime":1610964973909,"results":"128","hashOfConfig":"77"},{"size":1177,"mtime":1610964973876,"results":"129","hashOfConfig":"77"},{"size":1173,"mtime":1610964973872,"results":"130","hashOfConfig":"77"},{"size":1175,"mtime":1610964973914,"results":"131","hashOfConfig":"77"},{"size":1175,"mtime":1610964973911,"results":"132","hashOfConfig":"77"},{"size":1175,"mtime":1610964973912,"results":"133","hashOfConfig":"77"},{"size":1175,"mtime":1610964973913,"results":"134","hashOfConfig":"77"},{"size":1229,"mtime":1610990751246,"results":"135","hashOfConfig":"77"},{"size":7429,"mtime":1610990751243,"results":"136","hashOfConfig":"77"},{"size":2020,"mtime":1610990751242,"results":"137","hashOfConfig":"77"},{"size":2387,"mtime":1610990751245,"results":"138","hashOfConfig":"77"},{"size":10728,"mtime":1611008482428,"results":"139","hashOfConfig":"77"},{"size":2375,"mtime":1610990751241,"results":"140","hashOfConfig":"77"},{"size":4794,"mtime":1610990751239,"results":"141","hashOfConfig":"77"},{"size":598,"mtime":1610990751244,"results":"142","hashOfConfig":"77"},{"size":8960,"mtime":1611101824210,"results":"143","hashOfConfig":"77"},{"size":2289,"mtime":1611071221800,"results":"144","hashOfConfig":"77"},{"size":13819,"mtime":1611062607070,"results":"145","hashOfConfig":"77"},{"size":3747,"mtime":1611062615670,"results":"146","hashOfConfig":"77"},{"size":1489,"mtime":1611071221800,"results":"147","hashOfConfig":"77"},{"size":530,"mtime":1611071221800,"results":"148","hashOfConfig":"77"},{"size":952,"mtime":1611099481689,"results":"149","hashOfConfig":"77"},{"size":4165,"mtime":1611098719665,"results":"150","hashOfConfig":"77"},{"size":2790,"mtime":1611100919198,"results":"151","hashOfConfig":"77"},{"size":844961,"mtime":1610964973869,"results":"152","hashOfConfig":"77"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"7h7z42",{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11e8g4c",{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"158"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"158"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"158"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"175"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"158"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"158"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"158"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"158"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"158"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"302","messages":"303","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"158"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"158"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"158"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/App.tsx",["323","324","325","326"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/client.ts",["327"],"import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';\n// import { onError } from \"@apollo/client/link/error\";\n\n// Instantiate required constructor fields\nconst httpLink = createHttpLink({\n    uri: \"https://api.baseql.com/airtable/graphql/appgIAAYooKJM4hyP\"\n});\n\n// const errorLink = onError(({ graphQLErrors, networkError }) => {\n//     if (graphQLErrors)\n//       graphQLErrors.map(({ message, locations, path }) =>\n//         console.error(\n//           `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n//         )\n//       );\n//   });\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: httpLink,\n});\n\n\n\n",["328","329"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/index.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/middleware/logger.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/index.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/query/QueryAirtable.tsx",["330","331","332","333","334","335","336","337"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/query/queries.tsx",["338","339"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/API/graphqlAPI.ts",["340","341","342","343","344","345","346","347","348","349","350","351"],"// https://kimmosaaskilahti.fi/blog/2019-08-29-fp-ts/\n// https://dev.to/gnomff_65/fp-ts-sequencet-and-sweet-sweet-async-typed-fp-5aop\n// https://github.com/ksaaskil/fp-gitlab-example\n\n\nimport { ApolloError, ApolloQueryResult, ApolloClient, gql, DocumentNode, NormalizedCacheObject} from '@apollo/client'; \nimport { GET_PROJECT } from './query'; \n\n\nimport axios, { AxiosResponse } from 'axios'\nimport { flatten, map } from 'fp-ts/lib/Array'\nimport * as TE from 'fp-ts/lib/TaskEither'\nimport * as E from 'fp-ts/lib/Either'\nimport * as T from 'fp-ts/lib/Task'\nimport { sequenceT } from 'fp-ts/lib/Apply'\nimport { pipe } from 'fp-ts/lib/pipeable'\nimport { flow } from 'fp-ts/lib/function'\nimport { failure } from 'io-ts/lib/PathReporter'\nimport * as t from 'io-ts'\n\nimport { Users, Answer } from './types/static-types'; \nimport { users, answer } from './types/iots-types'; \n\nimport { Project } from '../store/model/types/static-types'; \nimport { Project as projectCodec } from '../store/model/types/composite-types'\nimport { client } from '../client';\n\nconst query = gql`query MyQuery {\n  projects(id: \"recDSfaVc2clkOcLR\") {\n    id\n    projectOwner {\n      id\n      ownerName\n      ownerTasteProfile {\n        desireColour\n        desireColourMeta\n        id\n      }\n    }\n    projectProperty {\n      id\n      propertyAddress\n      propertyBoundary\n      propertyBuilding1 {\n        buildingEnergyPerformance {\n          energyAirflowExchange\n          energyDoorUValue\n          energyFloorUValue\n          energyMeanTemperatureExternal\n          energyRoofUValue\n          energyRooflightUValue\n          energySpaceCoolingType\n          energyTariffElectricity\n          energySpaceHeatingType\n          energyTariffGas\n          energyTempInternalAdjusted\n          energyVentilationType\n          energyWallUValue\n          energyWaterHeatingType\n          id\n          energyWindowUValue\n        }\n        buildingFoundationType\n        buildingName\n        buildingNumberBathrooms\n        buildingPattern {\n          id\n          patternBarcode\n          patternRating\n          patternSubassembliesUsed {\n            id\n            subassemblyAssemblyTimeInDays\n            subassemblyBuildingSystem\n            subassemblyDesigner\n            subassemblyLocationClass\n            subassemblyName\n            subassemblyPitchedAngle1\n            subassemblyPitchedAngle2\n            subassemblyPrimaryMaterial\n            subassemblyRoofPitchType\n            subassemblySpansNStories\n            subassemblyThickness\n            subassemblyUnitCost\n            subassemblyXDimension\n            subassemblyYDimension\n            subassemblyZDimension\n          }\n        }\n        id\n      }\n      propertyBuilding2\n      propertyBuilding3\n      propertyDescription\n      propertyName\n      propertyNorthing\n      propertyType\n      propertyUprn\n    }\n  }\n}\n`\nconst query2 = gql`query MyQuery {\n  projects(id: \"recDSfaVc2clkOcLR\") {\n    id\n    projectOwner {\n      id\n      ownerName\n      ownerTasteProfile {\n        desireColour\n        desireColourMeta\n        id\n      }\n    }\n    projectProperty {\n      id\n      propertyAddress\n      propertyBoundary\n      propertyBuilding1 {\n        buildingEnergyPerformance {\n          energyAirflowExchange\n          energyDoorUValue\n          energyFloorUValue\n          energyMeanTemperatureExternal\n          energyRoofUValue\n          energyRooflightUValue\n          energySpaceCoolingType\n          energyTariffElectricity\n          energySpaceHeatingType\n          energyTariffGas\n          energyTempInternalAdjusted\n          energyVentilationType\n          energyWallUValue\n          energyWaterHeatingType\n          id\n          energyWindowUValue\n        }\n        buildingFoundationType\n        buildingName\n        buildingNumberBathrooms\n        buildingPattern {\n          id\n          patternBarcode\n          patternRating\n          patternSubassembliesUsed {\n            id\n            subassemblyAssemblyTimeInDays\n            subassemblyBuildingSystem\n            subassemblyDesigner\n            subassemblyLocationClass\n            subassemblyName\n            subassemblyPitchedAngle1\n            subassemblyPitchedAngle2\n            subassemblyPrimaryMaterial\n            subassemblyRoofPitchType\n            subassemblySpansNStories\n            subassemblyThickness\n            subassemblyUnitCost\n            subassemblyXDimension\n            subassemblyYDimension\n            subassemblyZDimension\n          }\n        }\n        id\n      }\n      propertyBuilding2\n      propertyBuilding3\n      propertyDescription\n      propertyName\n      propertyNorthing\n      propertyType\n      propertyUprn\n    }\n  }\n}\n`\n\n\n//Convert our api call to a TaskEither\nconst graphqlGet = (\n  client: ApolloClient<NormalizedCacheObject>, \n  query: DocumentNode\n) => TE.tryCatch<Error, ApolloQueryResult<any>>(\n  () => client.query({query: query }),\n  reason => new Error(String(reason))\n)\n\n//function to decode an unknown into an A\nconst decodeWith = <A>(decoder: t.Decoder<unknown, A>) =>\n  flow(\n    decoder.decode,\n    E.mapLeft(errors => new Error(failure(errors).join('\\n'))),\n    TE.fromEither\n  )\n\n//takes a graphql client, a query, and a decoder and gives you back an Either<Error, A>\nexport const graphqlGetEither = <A>(\n  client: ApolloClient<NormalizedCacheObject>, \n  query:DocumentNode, \n  codec:t.Decoder<unknown, A>\n) => pipe(\n  graphqlGet(client, query),\n  TE.map(x => x.data),\n  TE.chain(decodeWith(codec))\n);\n\n\n// const getAnswer = pipe(\n//   TE.right({ans: 42}),\n//   TE.chain(decodeWith(answer))\n// )\n\n\nexport const runProgram = pipe(\n  sequenceT(TE.taskEither)(\n    graphqlGetEither(client, query2, projectCodec)\n  ),\n  TE.fold(\n    (errors) => T.of(errors.message),\n    (project1) => T.of(`\\nThe answer was ${project1} for all of you`),\n  )\n)();\n\n// runProgram.then(console.log)\n\n\n/*\nexport const runProgram = pipe(\n  sequenceT(TE.taskEither)(\n    graphqlGetEither(client, query, projectCodec)\n  ),\n\n  TE.fold(\n    (errors) => T.of(errors.message),\n    ([project1]) => T.of(`\\nThe answer was ${project1} for all of you`),\n  )\n)();\n*/","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/modelUtils.tsx",["352","353","354","355","356","357","358","359","360"],"import React, { Fragment, useRef, useEffect, useState, useCallback, useContext, useMemo } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport * as THREE from 'three'\nimport { OrbitControls } from '@react-three/drei/OrbitControls'\nimport { useThree } from 'react-three-fiber'\n\n\n////////////////////\n//  Types\n///////////////////\n\n\nimport { MouseEvent, PointerEvent, WheelEvent } from 'react-three-fiber/canvas'\n\nexport type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]\nexport type Overwrite<T, O> = Omit<T, NonFunctionKeys<O>> & O\n/**\n * Allows using a TS v4 labeled tuple even with older typescript versions\n */\nexport type NamedArrayTuple<T extends (...args: any) => any> = Parameters<T>\n\n/**\n * If **T** contains a constructor, @see ConstructorParameters must be used, otherwise **T**.\n */\ntype Args<T> = T extends new (...args: any) => any ? ConstructorParameters<T> : T\n\nexport type Euler = THREE.Euler | Parameters<THREE.Euler['set']>\nexport type Matrix4 = THREE.Matrix4 | Parameters<THREE.Matrix4['set']>\nexport type Vector2 = THREE.Vector2 | Parameters<THREE.Vector2['set']>\nexport type Vector3 = THREE.Vector3 | Parameters<THREE.Vector3['set']>\nexport type Color = THREE.Color | number | string // Parameters<T> will not work here because of multiple function signatures in three.js types\nexport type Layers = THREE.Layers | Parameters<THREE.Layers['set']>\nexport type Quaternion = THREE.Quaternion | Parameters<THREE.Quaternion['set']>\n\nexport type EventHandlers = {\n  onClick?: (event: MouseEvent) => void\n  onContextMenu?: (event: MouseEvent) => void\n  onDoubleClick?: (event: MouseEvent) => void\n  onPointerUp?: (event: PointerEvent) => void\n  onPointerDown?: (event: PointerEvent) => void\n  onPointerOver?: (event: PointerEvent) => void\n  onPointerOut?: (event: PointerEvent) => void\n  onPointerMove?: (event: PointerEvent) => void\n  onPointerMissed?: (event: React.MouseEvent) => void\n  onWheel?: (event: WheelEvent) => void\n}\n\nexport interface NodeProps<T, P> {\n  /** Attaches this class onto the parent under the given name and nulls it on unmount */\n  attach?: string\n  /** Appends this class to an array on the parent under the given name and removes it on unmount */\n  attachArray?: string\n  /** Adds this class to an object on the parent under the given name and deletes it on unmount */\n  attachObject?: NamedArrayTuple<(target: string, name: string) => void>\n  /** Constructor arguments */\n  args?: Args<P>\n  children?: React.ReactNode\n  ref?: React.Ref<React.ReactNode>\n  key?: React.Key\n  onUpdate?: (self: T) => void\n}\n\nexport type Node<T, P> = Overwrite<Partial<T>, NodeProps<T, P>>\n\nexport type Object3DNode<T, P> = Overwrite<\n  Node<T, P>,\n  {\n    position?: Vector3\n    up?: Vector3\n    scale?: Vector3\n    rotation?: Euler\n    matrix?: Matrix4\n    quaternion?: Quaternion\n    layers?: Layers\n    dispose?: (() => void) | null\n  }\n> &\n  EventHandlers\n\n\nexport type MeshProps = Object3DNode<THREE.Mesh, typeof THREE.Mesh>\n\n\n\n\n\nexport const useHover = () => {\n    const [hovered, setHovered] = useState<boolean>(); \n    const [active, setActive] = useState<boolean>(); \n\n    useEffect(()=> void (document.body.style.cursor = hovered ? 'pointer' : 'auto'))\n\n    const hover = useCallback((e: PointerEvent) => (e.stopPropagation(), setHovered(true)), [])\n    const unhover = useCallback((e) => setHovered(false), [])\n\n    return [{\n        onClick: (e: MouseEvent) => {\n          e.stopPropagation(); \n          setActive(!active)\n        },\n        onPointerOver: (e: PointerEvent) => hover(e),\n        onPointerOut: (e: PointerEvent) => unhover(e),\n        'material-color': hovered ? 'pink' : 'gray',\n        'material-transparent': active ? 'false': 'true',\n        'material-opacity': active ? 0.1 : 1\n      }, hovered]\n  }\n  \n\n\n//   const camContext = React.createContext({})\n\n//   function Controls({ children }: {children: any}) {\n//   const { gl, camera } = useThree()\n//   const api = useState(true)\n//   return (\n//     <Fragment>\n//       <OrbitControls args={[camera, gl.domElement]} enableDamping enabled={api[0]} />\n//       <camContext.Provider value={api}>{children}</camContext.Provider>\n//     </Fragment>\n//   )\n// }",["361","362"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Editor.tsx",["363","364","365","366","367","368","369","370","371","372","373","374","375","376"],"\nimport React, { useRef, VFC, Suspense } from 'react';\nimport { useThree, extend, ReactThreeFiber, useFrame, Canvas } from 'react-three-fiber';\nimport {OrbitControls, Html, Loader, useContextBridge } from '@react-three/drei';\nimport { Light } from './Light'; \nimport { Perf } from 'r3f-perf';\nimport * as THREE from 'three'; \nimport ClippingSlider from './ClippingSlider/ClippingSlider'; \nimport { useSpring } from 'react-spring'; \n//Models\nimport { Container } from './Container/Container'\n\n// Icons\nimport Icon from '@material-ui/core/Icon';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport { Object3D, Vector3 } from 'three';\n\nimport { ReactReduxContext } from 'react-redux';\n\n\n{/* <Icon>\n  <FullscreenIcon/>\n</Icon> */}\n\n\n/////\n// Camera\n/////\n\nconst Dolly = (targetObject: THREE.Object3D): void => {\n  // This one makes the camera move in and out\n  useFrame(({ clock, camera }) => {\n    // Move camera to a point where you can more easily see the object under inspection\n    // camera.position.z = 50 + Math.sin(clock.getElapsedTime()) * 30\n    // Look at the object under isnpection\n    const {x,y,z} = targetObject.position; \n    camera.lookAt(new Vector3(x,y,z)) \n\n    // This process should be animated\n    // just use .lerp ( x : Float, y : Float, t : Float ) : Float ? \n\n    // camera.updateProjectionMatrix()\n\n  })\n}\n\n\n// // alternate \n// const Controls = (targetObject: Object3D) => {\n//   const { gl, camera } = useThree()\n  \n  \n\n//   const [props, set ] \n//   = useSpring<{\n//     from: {x: number, y: number, z: number};\n//     to: { x: number, y: number, z: number };\n//     onFrame: (...args: any) => void;\n//     reverse: boolean;\n//     onRest: (...args: any) => void;\n//   }>(\n//     () => (\n//       {\n//         from: {x: camera.position.x, y: camera.position.y, z: camera.position.z}, \n//         to: {x: targetObject.position.x, y: targetObject.position.y, z: targetObject.position.z},\n//         onFrame: ({to}: {to : {x: number, y: number, z: number}}) => { \n//           camera.position.x = to.x; \n//           camera.position.y = to.y; \n//           camera.position.z = to.z; \n//         },\n//         reverse: false,\n//         onRest: () => {}\n//       }\n//     )\n//   )\n\n\n//   useSpring<{\n//     from: unknown;\n//     z: unknown;\n//     onFrame: (...args:any) => void;\n//   }>({\n//     from: {\n//       z: 300\n//     },\n//     z: 2,\n//     onFrame: ({ z }) => {\n//       camera.position.z = z\n//     }\n//   })\n\n//   return <OrbitControls target={[0, 0, 0]} args={[camera, gl.domElement]} />\n// }\n\n\n\n\n//////////////////////////////////\n// Scene\n//////////////////////////////////\n\n\n\nconst EditorScene = () => {\n\n  const orbitControlsRef = useRef<OrbitControls>();\n  console.log(orbitControlsRef)\n\n  const {\n    camera,\n    gl: { domElement },\n    scene,            // Default scene\n    size,             // Bounds of the view (which stretches 100% and auto-adjusts)\n    viewport,         // Bounds of the viewport in 3d units + factor (size/viewport)\n    aspect,           // Aspect ratio (size.width / size.height)\n    invalidate,       // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    setDefaultCamera  // Sets the default camera\n  } = useThree()\n  \n\n  return (\n    <>\n    \n      <Light/>\n      <mesh name=\"ground\" rotation={[-Math.PI / 2, 0, 0]} receiveShadow>\n          <planeBufferGeometry attach=\"geometry\" args={[50, 50, 1, 1]} />\n          <shadowMaterial\n            attach=\"material\"\n            color={0}\n            opacity={0.9}\n            side={THREE.DoubleSide}\n          />\n          <meshBasicMaterial color=\"gray\" side={THREE.DoubleSide} attach=\"material\" />\n        </mesh>  \n          \n       \n       \n\n      <Suspense\n        fallback={\n          <Html center>\n            <Loader />\n          </Html>\n        }>\n          {/** PUT MODELS HERE  */}\n          <Container/>\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n          {/*******************/}\n      </Suspense>\n\n      <OrbitControls \n        //Get ref from the store?\n        ref={orbitControlsRef} \n        enablePan={true} \n        enableRotate={true} \n        zoomSpeed={0.5}\n        args={[camera, domElement]} \n        target={[0, 3, 0]}\n        // enableDamping\n        // dampingFactor={0.2}\n        rotateSpeed={0.7}\n        maxPolarAngle={1.49}\n        enabled\n        minDistance={5}\n        maxDistance={100}\n      />   \n      {/* <Controls/> */}\n      {/* <Dolly /> */}\n      <Perf />\n\n    </>\n  );\n};\n\n\n//////////////////////////////////\n// Editor\n//////////////////////////////////\n\n\nconst Editor: VFC = () => {\n\n \n  // contect bridge needed as workaround due to: https://github.com/pmndrs/react-three-fiber/issues/43\n  const ContextBridge = useContextBridge(ReactReduxContext)\n\n  \n  return (\n    <div id=\"three\">\n    <ClippingSlider />\n\n\n\n    <Canvas\n          colorManagement\n          shadowMap={{ enabled: true, type: THREE.PCFSoftShadowMap }}\n          camera={{ fov: 45, position: [8, 12, 14] }}\n          pixelRatio={window.devicePixelRatio}\n          gl={{ antialias: true }}\n\n    >\n      <ContextBridge>\n\n\n        <EditorScene />\n\n       \n      </ContextBridge>\n\n    </Canvas>\n\n\n    {/* <a href=\"https://www.opensystemslab.io/\" className=\"top-left\">\n      Open Systems Lab\n    </a>\n    <a href=\"https://www.notion.so/Housing-4-0-Energy-e83e0e7f455a4a419463619a29c4cf51\" className=\"bottom-right\">\n      More Information\n    </a> */}\n\n\n    </div>  \n  );\n};\n\nexport default Editor;\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Light.tsx",["377","378"],"import React, {useRef} from 'react';\nimport { Vector3 } from 'three'\nimport { useThree } from 'react-three-fiber'; \n\n\nexport const Light = () => {\n    return( \n    <>\n     <directionalLight \n          castShadow = {true}\n          position={new Vector3(0,200,0)} \n          intensity={0.1} \n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={500}\n          shadow-camera-left={-100}\n          shadow-camera-right={100}\n          shadow-camera-top={-100}\n          shadow-camera-bottom={100}\n        />\n        <spotLight position={[40, 40, 20]} penumbra={1} castShadow />\n        <ambientLight intensity = {0.1} />\n        <pointLight position={new Vector3(30,30,60)} intensity={0.2}/>\n        <pointLight position={new Vector3(-30,-30,60)} intensity={0.5}/>\n    </>\n      \n    )\n  }\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Box.tsx",["379","380"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\n\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport { useHover } from './modelUtils'; \nimport TransformControls from '../components/3d-editor/TransformControls'; \n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Box_1: THREE.Mesh\n    Box_2: THREE.Mesh\n  }\n  materials: {\n    FrontColor: THREE.MeshStandardMaterial\n    BackColor: THREE.MeshStandardMaterial\n  }\n}\n\ninterface ModelProps extends Partial<JSX.IntrinsicElements['mesh']>{\n  // useHover: typeof useHover\n}\n\n\nexport const Box = (props: ModelProps) => {\n  const meshRef = useRef<THREE.Mesh>()\n  let [bindHover, hovered] = useHover()\n\n  const { nodes, materials } = useGLTF('/Box.glb') as GLTFResult\n  return (\n        <React.Fragment>\n          <mesh ref = {meshRef} {...props} dispose={null} name={`${props.key}-1`} material={materials.FrontColor} geometry={nodes.Box_1.geometry} {...bindHover} />\n          <mesh ref = {meshRef} {...props} dispose={null} name={`${props.key}-2`} material={materials.BackColor} geometry={nodes.Box_2.geometry} {...bindHover}/>\n        </React.Fragment>\n  )\n}\n\nuseGLTF.preload('/Box.glb')\n\n\n",["381","382"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms/MiddleLongBlock.tsx",[],["383","384"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/ClippingSlider/ClippingSlider.tsx",["385","386"],"import Slider from \"@material-ui/core/Slider\";\nimport anime from \"animejs\";\nimport React, { useState } from \"react\";\nimport * as THREE from \"three\";\n\nconst DEFAULT = 8;\n\nconst marks = [\n  {\n    value: 8,\n    label: \"Roof\"\n  },\n  {\n    value: 4,\n    label: \"First Floor\"\n  },\n  {\n    value: 1,\n    label: \"Ground Floor\"\n  }\n];\n\nexport const clipPlanes = [\n  new THREE.Plane(new THREE.Vector3(0, -1, 0), DEFAULT)\n];\n\nconst ClippingSlider = () => {\n  const [val, setVal] = useState(DEFAULT);\n\n  return (\n    <div id=\"clipping-slider\">\n      <Slider\n        orientation=\"vertical\"\n        value={val}\n        aria-labelledby=\"vertical-slider\"\n        marks={marks}\n        max={8}\n        min={1}\n        step={1}\n        // onChange = {\n        //   (event: React.ChangeEvent<{}>, value: number) => {\n        //     if (value !== val) {\n        //       const duration = Math.abs(val - value) * 300;\n        //       anime({\n        //         duration,\n        //         constant: value,\n        //         targets: clipPlanes[0],\n        //         easing: \"easeOutElastic(1,0.9)\"\n        //       });\n  \n        //       setVal(value);\n        //     }\n        //   }\n        // }\n      />\n    </div>\n  );\n};\n\nexport default ClippingSlider;\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/index.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A1.tsx",["387"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\n\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { Vector3 } from 'three'\nimport { useHover } from '../modelUtils'; \n\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    ['A-1.001_1']: THREE.Mesh\n    ['A-1.001_2']: THREE.Mesh\n  }\n  materials: {\n    ['diffuse_0_0_0_255.001']: THREE.MeshStandardMaterial\n    ['Wood-3 Ver.001']: THREE.MeshStandardMaterial\n  }\n}\n\nexport default function Model(props: JSX.IntrinsicElements['group']) {\n  const group = useRef<THREE.Group>()\n  const { nodes, materials } = useGLTF('/Swift/A1.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group name=\"Scene\">\n        <group name=\"A-1001\" rotation={[Math.PI / 2, 0, 0]} > {/**We move the mesh in the z-axis by 1.2 in order to create a more easily referenced starting position */}\n          <mesh {...useHover()} name=\"A-1.001_1\" material={materials['diffuse_0_0_0_255.001']} geometry={nodes['A-1.001_1'].geometry} />\n          <mesh {...useHover()} name=\"A-1.001_2\" material={materials['Wood-3 Ver.001']} geometry={nodes['A-1.001_2'].geometry} />\n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/Swift/A1.glb')\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B6.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B7.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G6.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G7.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/index.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Graph.ts",["388","389","390","391","392","393","394","395","396","397","398","399","400","401"],"// import * as Re from 'fp-ts/Record'; \nimport * as S from 'fp-ts/Semigroup'; \nimport * as F from 'fp-ts/function'; \nimport * as A from 'fp-ts/Array'; \nimport * as O from 'fp-ts/Option'; \nimport * as _Map from 'fp-ts/Map'; \nimport * as _Set from 'fp-ts/Set'; \nimport { assoc, prop } from './utility'; \nimport * as L from 'monocle-ts'; \nimport { getLenses } from 'io-ts-types'; \nimport * as t from 'io-ts/Type'; \nimport { IBuildingComponent } from './Component'; \nimport { swiftComponentLibrary, swiftComponentRecord } from '../MetaData/swiftComponentData'; \nimport { IVertex, IVertexData, makeVertex} from './Vertex'\nimport { IEdge, IEdgeData, makeEdge } from './Edge'\n\n\n\n///////////////////////////////////////////////////////////\n/// Constants \n///////////////////////////////////////////////////////////\nexport const ROOT_NODE_KEY = \"_root\";\n\n\n///////////////////////////////////////////////////////////\n/// Types \n///////////////////////////////////////////////////////////\n\nexport interface IGraph<V, E> {\n    vertices: IVertex<V>[],\n    edges: IEdge<E>[],\n}\nexport type AdjacencyMap<A> = Map<A, Set<A>>;  // for us: A = IVertex<IVertexData>\n\n\n///////////////////////////////////////////////////////////\n/// Constructor\n///////////////////////////////////////////////////////////\n\n/**\n* () -> IGraph\n* \n* Generates new empty graph\n* @returns IGraph Graph\n*/\nexport const makeGraph = <V,E>(\n    vertices?: IVertex<V>[],\n    edges?: IEdge<E>[]\n): IGraph<V,E> => ({\n    vertices: vertices? vertices: new Array<IVertex<V>>(),\n    edges: edges? edges: new Array<IEdge<E>>()\n})\n\n\n///////////////////////////////////////////////////////////\n/// Methods \n///////////////////////////////////////////////////////////\n\n/**\n* getVertexHash :: IVertex -> String\n* \n* Hashing function for IVertex. Can be customized.\n* @param IVertex Vertex\n* @return String Vertex's hash\n*/\nexport const getVertexHash = <V>(vertex: IVertex<V>) => vertex.vertexID\n\n/**\n* getEdgeHash :: IEdge -> String\n* \n* Hashing function for IEdge. Can be customized.\n* @param IEdge Edge\n* @return String Edge's hash\n*/\nexport const getEdgeHash =  <E>(edge: IEdge<E>) => `${edge.link[0]} - ${edge.link[1]}`\n\n/**\n* edgeHash :: () -> Array<IVertex>\n* \n* Returns a list of all vertices in a graph\n* @params IGraph Graph\n* @return Array<IVertex> List of all Vertices\n*/\nexport const getVertices = L.Lens.fromProp<IGraph<IVertexData, IEdgeData>>()('vertices').get\n// or alteernatively: const getVertices = prop('vertices')\n\n/**\n* getEdges :: IGraph -> Array<IEdge>\n* \n* Returns a list of all edges in a graph\n* @params IGraph Graph\n* @return Array<IEdge> List of all Edges\n*/\nexport const getEdges = L.Lens.fromProp<IGraph<IVertexData, IEdgeData>>()('edges').get\n// or alternaitvely: const getEdges = prop('edges')\n\n\n /**\n* addVertex :: IVertex -> IGraph -> IGraph\n* \n* Adds Vertex to the graph\n* @param IVertex Vertex\n* @param IGraph Graph\n* @return IGraph Graph\n*/\n export const addVertex = (vertex: IVertex<IVertexData>, g: IGraph<IVertexData,IEdgeData>): IGraph<IVertexData,IEdgeData>  => {\n    // Below 3 lines is a more ramda-esque approach\n    //const vertices = getVertices(g); \n    // const verticesWithAdditionalVertex = A.snoc(vertices, vertex); \n    // return assoc('vertices', verticesWithAdditionalVertex, g);\n    const graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n        vertices: A.getMonoid<IVertex<IVertexData>>(), \n        edges: A.getMonoid<IEdge<IEdgeData>>()\n    }); \n    return graphSemiGroup.concat(\n        g, \n        makeGraph([vertex], new Array<IEdge<IEdgeData>>())\n    ) \n    /// ^ advantage of semigroup approach is that we can add conditions to semigroup, such that\n    // we don't have repeated node ids etc. \n}\n\n /**\n* getVertexByHash :: String -> IGraph -> IVertex\n* \n* Return Vertex by Hash\n* @param String Vertex's hash\n* @param IGraph Graph\n* @return IVertex Vertex if exists or undefined\n*/\n\nexport const getVertexByHash = (vertexHash: String, g: IGraph<IVertexData, IEdgeData>)\n:O.Option<IVertex<IVertexData>[]> => {\n    // type Predicate<A> = (a: A) => boolean\n    const predicate: F.Predicate<IVertex<IVertexData>> = (a) => a.vertexID === vertexHash\n    const filtered = A.filter(predicate)(getVertices(g))\n    return filtered[0] === undefined ? O.none : O.some(filtered)\n}\n\nexport const addEdge = (edge: IEdge<IEdgeData>, g: IGraph<IVertexData, IEdgeData>)\n: IGraph<IVertexData, IEdgeData> => {\n    const graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n        vertices: A.getMonoid<IVertex<IVertexData>>(), \n        edges: A.getMonoid<IEdge<IEdgeData>>()\n    }); \n    return graphSemiGroup.concat(\n        g, \n        makeGraph(new Array<IVertex<IVertexData>>(), [edge])\n    ) \n}\nexport const getEdgesByHash = (edgeHash: [string,string], g: IGraph<IVertexData, IEdgeData>)\n:O.Option<IEdge<IEdgeData>[]> => {\n     // type Predicate<A> = (a: A) => boolean\n     const predicate: F.Predicate<IEdge<IEdgeData>> = (a) => a.link === edgeHash; //note: this is only for direcred graphs...\n     const filtered = A.filter(predicate)(getEdges(g))\n     return filtered[0] === undefined ? O.none : O.some(filtered)\n\n}\n\n /**\n* getNeightborEdgesFromVertexHash :: String -> IGraph -> Array<IEdge>\n* \n* Get all neightboring Edges from Vertex by Vertex Hash\n* @param String Vertex's Hash\n* @param IGraph Graph\n* @result Array<IEdge> Matched Edges from the Vertex\n*/\nexport const getNeightborEdgesFromVertexHash = (\n    vertexHash: String, \n    g: IGraph<IVertexData, IEdgeData>\n): O.Option<IEdge<IEdgeData>[]> =>{\n    return F.pipe(\n    //Likely to be far more edges than vertices. Check for existence of vertex first\n    getVertexByHash(vertexHash, g),\n    O.fold(\n        () => {return O.none},\n        (r) => {\n            const predicate: F.Predicate<IEdge<IEdgeData>> = (a) => a.link[0] === vertexHash; //note: this is only for direcred graphs...\n            const filtered = A.filter(predicate)(getEdges(g))\n            return filtered[0] === undefined ? O.none : O.some(filtered)\n        }\n        )\n    )\n}\n\n\n\n// For each type of edge, we create an adjacency matrix\n// We need one ajacency map for each type of edge... 'childOf', 'parentOf', 'neighbourOf'\n// export const getAdjacencyMap = (g: IGraph<IVertexData, IEdgeData>) => {\n\n//     // Depending om the edge type, we return a different adjacency matrix: \n\n//     const vertices = getVertices(g); \n//     const edges = getEdges(g); \n   \n//     //const m = monoidSetMap(eqVertex).concat()\n//     const s = new Set<IVertex<IVertexData>>()\n//     for (const v of vertices){\n//         for (const e of edges){\n\n//         }\n//     }\n// }\n\n///////////////////////////////////////////////////////////\n/// Semigroups \n///////////////////////////////////////////////////////////\n\nconst vertexSemiGroup = S.getObjectSemigroup<IVertex<IVertexData>>(); \nconst edgeSemiGroup = S.getObjectSemigroup<IEdge<IEdgeData>>(); \n// see: https://dev.to/gcanti/getting-started-with-fp-ts-semigroup-2mf7\n// const getGraphSemiGroup = <V,E>() => {\n//     return S.getStructSemigroup({\n//     // accumulate things\n//     vertices: A.getMonoid<IVertex<V>>(), // <= getMonoid returns a Semigroup \n//     edges: A.getMonoid<IEdge<E>>()\n// })}; \nconst graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n    vertices: A.getMonoid<IVertex<IVertexData>>(), \n    edges: A.getMonoid<IEdge<IEdgeData>>()\n}); \n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Edge.ts",["402","403","404","405","406","407","408"],"\nimport * as F from 'fp-ts/function'; \nimport * as Eq from 'fp-ts/Eq'\nimport { SwiftModule } from '../MetaData/swiftComponentData'\nimport {componentBonds, tBondID, Bond, BondID } from './Bond'; \nimport { v4 as uuidv4 } from 'uuid';\nimport { IVertex } from './Vertex';\n\n//   receptor = binding => effector function\n// If a block is connected to another block, this must update the state of the original block? \n// lock & key ? receptor & antigen?  \n\n\n\n\nexport interface IEdge<E> {\n    link: [string,string],\n    data: E; \n}\n\nexport type EdgeLogic = \n| {_tag: 'childOf' }  \n| {_tag: 'parentOf' }\n| {_tag: 'neighbourOf', bond: Bond}\n// | {_tag: 'x', bond: Bond -> will relate how the two components are joined together. i.e the transformation}\n\nexport interface IEdgeData{\n    // All our edges will be directed to keep things simple. \n\n    // type Predicate<A> = (a: A) => boolean\n    // predicate is defined by truth tables, which are designer set. \n    edgeLogic: EdgeLogic\n\n}\n\n//Constructors:\n\nexport const makeEdge = <E, V>(\n    vertex1: IVertex<V>,\n    vertex2: IVertex<V>,\n    data: E\n): IEdge<E> => {\n    return {\n      link: [vertex1.vertexID, vertex2.vertexID], data: data\n    }\n}\n\n\nexport const matchEdge = <R1, R2, R3>(\n    onChildOf: () => R1,\n    onParentOf: () => R2,\n    onNeighbourOf: (bond: Bond) => R3\n) => (edgeLogic: EdgeLogic): any => {\n    switch (edgeLogic._tag) {\n      case 'childOf':\n        return onChildOf()\n      case 'parentOf':\n        return onParentOf()\n      case 'neighbourOf':\n        return onNeighbourOf(edgeLogic.bond)\n    }\n  }\n\n\n\n\n//Eq\nconst eqEdgeLogic: Eq.Eq<EdgeLogic> = Eq.fromEquals((x, y) => {\n    if (x._tag === 'childOf' && y._tag === 'childOf') return true\n    return false;\n  });\n\n\nconst eqEdge = Eq.getStructEq({\n    link: Eq.getTupleEq(Eq.eqString, Eq.eqString),\n    data: eqEdgeLogic\n})\n\n\n// Truth tables: which components can be joined to one another?\n\n// Can we use an analogy from lego, or protein-protein interaction? \n\n\n// type Predicate<A> = (a: A) => boolean\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Vertex.ts",["409","410","411"],"\nimport * as Eq from 'fp-ts/Eq'\nimport { IBuildingComponent, matchComponentState, ComponentState } from './Component'; \nimport { ContainerState} from './Container'; \nimport { v4 as uuidv4 } from 'uuid';\n\n\n\n\nexport interface IVertex<V> {\n    vertexID: string; \n    data: V\n}\n\nexport interface IVertexData {\n    container: ContainerState\n    component: ComponentState\n}\n\n\n//Constructors:\n\nexport const makeVertex = <V=IVertexData>(\n    data: V,\n    vertexID: string = uuidv4(), \n): IVertex<V> => {\n    return {vertexID, data}\n}\n\n\n\n//Eq\nconst eqContainerState: Eq.Eq<ContainerState> = Eq.fromEquals((x, y) => {\n    if (x._tag === 'Site' && y._tag === 'Site') return true\n    if (x._tag === 'Building' && y._tag === 'Building') return true\n    if (x._tag === 'EnvelopeSection' && y._tag === 'EnvelopeSection') return true\n    if (x._tag === 'Roof' && y._tag === 'Roof') return true\n    if (x._tag=== 'Balcony' && y._tag === 'Balcony') return true\n    if (x._tag === 'Floor' && y._tag === 'Floor') return true\n    if (x._tag === 'Room' && y._tag === 'Room') return true\n    if (x._tag === 'Wall' && y._tag === 'Wall') return true\n    if (x._tag === 'Ceiling' && y._tag === 'Ceiling') return true\n    if (x._tag === 'Window' && y._tag === 'Window') return true\n    if (x._tag === 'Doorway' && y._tag === 'Doorway') return true\n    if (x._tag === 'Void' && y._tag === 'Void') return true\n    return false;\n  });\n\nconst eqDimensions = Eq.getStructEq({\n    X: Eq.eqNumber,\n    Y: Eq.eqNumber,\n    Z: Eq.eqNumber,\n    unit: Eq.eqString //bit of a fudge\n  })\n\nconst eqBuldingComponent = Eq.getStructEq({\n    moduleName: Eq.eqString,\n    dimensions: eqDimensions, \n    buildingSystem: Eq.eqString,\n    locationClass: Eq.eqString,\n    // roofProperties?: IRoofProperties\n    cost: Eq.getStructEq({amount: Eq.eqNumber, currency: Eq.eqString}),\n    assemblyTime: Eq.getStructEq({time: Eq.eqNumber, units: Eq.eqString}), \n})\n\nconst eqComponentState: Eq.Eq<ComponentState> = Eq.fromEquals((x, y) => {\n    if (x._tag === 'unChosen' && y._tag === 'unChosen' ) return true; \n    if (x._tag === 'chosen' && y._tag === 'chosen') return eqBuldingComponent.equals(x.component, y.component);\n    return false;\n  });\n\nconst eqVertexData = Eq.getStructEq({\n    container: eqContainerState,\n    component: eqComponentState\n})\n\nconst eqVertex = Eq.getStructEq({\n    name: Eq.eqString,\n    data: eqVertexData\n})\n\n\n\n\n ","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Container.ts",["412","413","414","415"],"import { Matrix4, Vector3, Euler  } from 'three'\nimport { Matrix4Tuple, createMatrix4 } from './Matrix4'; \nimport { Vector3Tuple } from './Vector3'; \nimport { Bond } from './Bond'; \nimport * as F from 'fp-ts/function'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport interface IFace {\n    faceID: string; \n    connectionCapacityID: number;\n    connection: {_tag: 'unconnected'} | {_tag: 'connected', connectedTo: IFace, connectedBy: Bond} \n}\n\nexport const makeFace = (\n    faceID: string = uuidv4(),\n    connectionCapacityID: number = 1,\n    connection: \n    | {_tag: 'unconnected'} \n    | {_tag: 'connected', connectedTo: IFace, connectedBy: Bond}\n    = {_tag: 'unconnected'} \n): IFace => {return {faceID, connectionCapacityID, connection}}\n\n\nexport interface IFaces {\n    top: IFace, \n    bottom: IFace,\n    front: IFace,\n    left: IFace,\n    right: IFace,\n    back: IFace,\n}\n\nexport const makeFaces = (\n    top: IFace = makeFace(), \n    bottom: IFace = makeFace(),\n    front: IFace = makeFace(),\n    left: IFace = makeFace(),\n    right: IFace = makeFace(),\n    back: IFace = makeFace()\n): IFaces => { return {top, bottom, front, left, right, back}}\n\n\n\n\n/**\n *  Containers are essential frames of reference. We can define the components with a continer with the container's\n * reference frame\n * \n *                  |  <-- r1 -->   0   |       where r1 = [x1, y1, z1 ], a basis vector \n *          T   =   |  <-- r2 -->   0   |       etc. Collectively, {r1,r2,r3} form a basis for the reference frame\n *                  |  <-- r3 -->   0   |\n *                  |  <-- O  -->   1   |       where O is the position of the origin \n * \n * \n *         The world frame is generally defiend by: \n * \n *                  |   1   0   0   0   |\n *          Tw =    |   0   1   0   0   |\n *                  |   0   0   1   0   |\n *                  |   0   0   0   1   |\n */                 \n\n\n\n\nexport interface IContainer {\n    parentContainerID: string | null; \n    containerID: string; \n    faces: IFaces\n    worldTransform: Matrix4Tuple; \n    fromParentTransform: Matrix4Tuple; //This stores the local transform of the object. This is the object's transformation relative to its parent.\n    // scale: Vector3Tuple; \n\n}\n\nexport const makeContainer = (\n    parentContainerID: string | null,\n    worldTransform: Matrix4Tuple = [1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1],\n    // scale: Vector3Tuple = [1,1,1],\n    fromParentTransform: Matrix4Tuple = [1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1],\n    containerID: string = uuidv4(),\n    // rank: number, // we use a chess phrase: rank 0 is the root node. Every level deeper into tree +=1 rank. \n    faces: IFaces = makeFaces(),\n    /* \n    Suppose we have a reference frame, R=(𝑟1,𝑟2,𝑟3,𝑜)\n    where 𝑟1,𝑟2,𝑟3 are the normalized basis vectors and 𝑜 is the origin. \n    We assume that these are all given in Euclidean space, which we will call world space W\n\n     Suppose we are given a point in world space 𝑝^(W). To find 𝑝 with respect to your reference frame you take the vector from 𝑜 to 𝑝 and project it onto the basis vectors.\n    */\n    // position_wrt_W: Vector3,\n    // scale_wrt_W: Vector3,\n    // rotation_wrt_W: Euler\n): IContainer => { return { parentContainerID, containerID, faces, worldTransform, fromParentTransform, /*scale , localTransform, worldTransform, position_wrt_W, scale_wrt_W, rotation_wrt_W */}}\n\nexport const makeChildContainer = (\n    parentContainer: IContainer,\n    fromParentTransform: Matrix4,\n    scale: Vector3Tuple = [1,1,1],\n    containerID: string = uuidv4(),\n    faces: IFaces = makeFaces(),\n): IContainer => {\n    return { \n        parentContainerID: parentContainer.containerID, \n        worldTransform: (createMatrix4(parentContainer.worldTransform).clone().multiply(fromParentTransform)).elements as Matrix4Tuple, //\n        fromParentTransform: fromParentTransform.elements as Matrix4Tuple,\n        containerID: containerID,\n        faces: faces,\n        // scale: scale\n    }\n}\n\n// interface IPattern {\n//     patternid: string,\n// }\n\n// export const makePattern = (\n//     patternid: string\n// ): IPattern => { return { patternid }}\n\n\n\n// const isContainer = ContainerT.is({ location: \"Photographing corgis\" })\n// const maybeContainer = ContainerT.decode({ location: 10 })\n\n\n/////////\n// States\n/////////\n/// Create urls for state? Envelope.Room, Envelope.Room.Wall etc? \n\n// Site, Building, Floor, Room, Wall, Floor, Ceiling, Window, Doorway, void\nexport enum ContainerStateType {\n    Site = 'Site',\n    Building = 'Building',\n    Floor = 'Floor',\n    Room = 'Room',\n    Wall = 'Wall',\n    Ceiling = 'Ceiling',\n    Window = 'Window',\n    Doorway = 'Doorway',\n    Void = 'Void',\n    Roof = 'Roof',\n    EnvelopeSection = 'EnvelopeSection',\n    Balcony = 'Balcony'\n    //U-Shape, L-shape, etc. \n}\n\n// export type PatternedContainer = IPattern & IContainer\n\n// Ought to create brands/refinement types constraining the behaviours of the \nexport type Site = { _tag: ContainerStateType.Site, data: IContainer }\n// const SiteT = t.type({data: PatternedContainerT }, 'Site'); \n// type _Site = t.TypeOf<typeof SiteT>\nexport type Building = { _tag: ContainerStateType.Building, data: IContainer }\nexport type Floor = { _tag: ContainerStateType.Floor; data: IContainer }\nexport type Room = { _tag: ContainerStateType.Room, data: IContainer } // <- 4 walls and a void \nexport type Wall = { _tag: ContainerStateType.Wall; data: IContainer }\nexport type Ceiling = { _tag: ContainerStateType.Ceiling; data: IContainer }\nexport type Window = { _tag: ContainerStateType.Window; data: IContainer }\nexport type Doorway = { _tag: ContainerStateType.Doorway; data: IContainer }\nexport type Void = { _tag: ContainerStateType.Void; data: IContainer }\n\nexport type Roof = { _tag: ContainerStateType.Roof; data: IContainer }\nexport type EnvelopeSection = { _tag: ContainerStateType.EnvelopeSection; data: IContainer }\nexport type Balcony = { _tag: ContainerStateType.Balcony; data: IContainer }\n\n\nexport type ContainerState = \n| Site \n| Building \n| Floor \n| Room \n| Wall | Ceiling \n| Window | Doorway | Void \n| Roof | EnvelopeSection | Balcony\n\n\n\n// State constructors\nexport const makeSite = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Site,\n    data: data\n})\nexport const makeBuilding = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Building,\n    data: data\n})\nexport const makeRoom = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Room,\n    data: data\n})\nexport const makeFloor = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Floor,\n    data: data\n})\nexport const makeCeiling = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Ceiling,\n    data: data\n})\nexport const makeWall = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Wall,\n    data: data\n})\nexport const makeWindow = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Window,\n    data: data\n})\nexport const makeDoorway = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Doorway,\n    data: data\n})\nexport const makeVoid = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Void,\n    data: data\n})\nexport const makeRoof = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Roof,\n    data: data\n})\nexport const makeEnvelopeSection = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.EnvelopeSection,\n    data: data\n})\nexport const makeBalcony = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Balcony,\n    data: data\n})\n\nexport const containerConstructors: Record<ContainerStateType, (data: IContainer) => ContainerState> = {\n    [ContainerStateType.Site]: makeSite,\n    [ContainerStateType.Building]: makeBuilding,\n    [ContainerStateType.Room]: makeRoom,\n    [ContainerStateType.Floor]: makeFloor,\n    [ContainerStateType.Ceiling]: makeCeiling,\n    [ContainerStateType.Wall]: makeWall,\n    [ContainerStateType.Window]: makeWindow,\n    [ContainerStateType.Doorway]: makeDoorway,\n    [ContainerStateType.Void]: makeVoid,\n    [ContainerStateType.Roof]: makeRoof,\n    [ContainerStateType.EnvelopeSection]: makeEnvelopeSection,\n    [ContainerStateType.Balcony]: makeBalcony,\n\n}\n\n// export type ContainerState = Site | Building | Floor | Room | Wall | Ceiling | Window | Doorway | Void \n\n/// Generic pattern matching function\nexport const matchContainerState = <ReturnType extends any>(\n\n    a: (state: Site) => ReturnType,\n    b: (state: Building) => ReturnType,\n    c: (state: Floor) => ReturnType,\n    d: (state: Room) => ReturnType,\n    e: (state: Wall) => ReturnType,\n    f: (state: Ceiling) => ReturnType,\n    g: (state: Window) => ReturnType,\n    h: (state: Doorway) => ReturnType,\n    i: (state: Void) => ReturnType,\n    j: (state: Roof) => ReturnType,\n    k: (state: EnvelopeSection) => ReturnType,\n    l: (state: Balcony) => ReturnType\n\n) => (state: ContainerState): ReturnType => {\n    switch(state._tag) {\n      case ContainerStateType.Site:\n          return a(state);\n      case ContainerStateType.Building:\n          return b(state);\n      case ContainerStateType.Floor:\n          return c(state);\n      case ContainerStateType.Room:\n          return d(state);\n      case ContainerStateType.Wall:\n          return e(state); \n      case ContainerStateType.Ceiling:\n          return f(state); \n      case ContainerStateType.Window:\n          return g(state); \n      case ContainerStateType.Doorway:\n          return h(state); \n      case ContainerStateType.Void:\n          return i(state); \n      case ContainerStateType.Roof:\n          return j(state); \n      case ContainerStateType.EnvelopeSection:\n          return k(state); \n      case ContainerStateType.Balcony:\n          return l(state); \n      default:\n          return F.absurd(state);\n    }\n};\n// e.g:\nexport const logState: (state: ContainerState) => void \n= matchContainerState(\n    (state) => console.log(state._tag), //Site\n    (state) => console.log(state._tag), //Building\n    (state) => console.log(state._tag), //Floor\n    (state) => console.log(state._tag), //Room\n    (state) => console.log(state._tag), //Wall\n    (state) => console.log(state._tag), //Ceiling\n    (state) => console.log(state._tag), //Window\n    (state) => console.log(state._tag), //Doorway\n    (state) => console.log(state._tag), //Void\n    (state) => console.log(state._tag), //Roof\n    (state) => console.log(state._tag), //Envelope\n    (state) => console.log(state._tag), //Balcony\n);\n\n// Create forest fucnctions: make, unfold:\n\n\nenum PatternMode {\n    'A*' = 0,\n    'AB*A' = 1,\n    'AB(n)A' = 2,\n}\n\nenum Periodicity {\n    cylic = 0,\n    alternating = 1\n}\n\n\n\n\n\n\n\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Component.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Bond.ts",["416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431"],"\nimport * as E from 'fp-ts/Either'\nimport * as Eq from 'fp-ts/Eq'\nimport * as F from 'fp-ts/function'\nimport * as _Map from 'fp-ts/Map'\nimport * as O from 'fp-ts/Option'\nimport * as Ord from 'fp-ts/Ord'\nimport * as S from 'fp-ts/Semigroup'\nimport  * as Show from 'fp-ts/Show'\nimport * as C from 'io-ts/Codec'\nimport * as D from 'io-ts/Decoder'\nimport * as G from 'io-ts/Guard'\nimport * as M from 'fp-ts/Monoid'; \nimport * as R from 'fp-ts/Record'\nimport { Matrix4Tuple } from './Matrix4' \nimport { v4 as uuidv4 } from 'uuid';\n\n// MetaData\nimport { SwiftModule } from '../MetaData/swiftComponentData'\nimport { SkylarkModule } from '../MetaData/skylarkComponentData'\n\n\n///////////////\n// This is for situaitons where we want to click on a block, and add a block to it. Or if we drag and drop a block\n// onto another block. We check whether the bond is actually possible, and then (if so) we provide the transformation \n// operation to stick the added block on in the right place.\n// These sorts of operations are useful, too, when we are doing are pattern definitions\n\n\n//Bond + utilies \n\n// A face type has an id, which will be a prime number. A bond id is the multi0lication of the face ids that it is joining.\n// A face will also have a 'bondwithID', which is a multiplication of all the faceIDs that it can bind with. If it can bind with all,\n// we can set the bondwithID to 1, i.e. universal bonder. \n\n/*\nFace1 ID         2  |----------------------------------------->     .\nFace2 ID         2         3         5           7 ..\n\nBond ID          4          6       10           14       \n*/\n\n\n// bonds occur at the join between grid cells... \n\n\nexport interface Bond { readonly bondID: number, readonly transform: Matrix4Tuple }\n\nexport const makeBond = (bondID: number, transform: Matrix4Tuple): Bond => {\n  return {bondID: bondID, transform: transform}\n}\n\ntype BondKeyString = `${SwiftModule}->${SwiftModule}`\n\n\n// fp-ts utilities : Equals & Order \nconst ordBond = F.pipe( Ord.ordNumber, Ord.contramap((u: Bond) => u.bondID) )\nconst eqBond: Eq.Eq<Bond> = { equals: ordBond.equals }\nconst eqBondKeyString: Eq.Eq<BondKeyString> = Eq.fromEquals((x,y) => x === y); \nconst ordBondKeyString = Ord.fromCompare<BondKeyString>((x,y) => Ord.ordString.compare(x, y))\n\n\nexport const componentBonds: Map<BondKeyString, Bond> = new Map<BondKeyString, Bond>(); \n\n\n// Operations\nconst elemBond = _Map.elem(eqBond)\nconst keys = _Map.keys(ordBondKeyString)\nconst values = _Map.values(ordBond)\nconst toArray = _Map.toArray(ordBondKeyString)\nconst lookupWithKey = _Map.lookupWithKey(eqBondKeyString)\n\nexport const findBondValue = (bondString: BondKeyString): O.Option<[BondKeyString, Bond]> => {\n  return _Map.lookupWithKey(eqBondKeyString)(bondString)(componentBonds)\n}\n\n//refinement: \nconst isNumber = (u: string | number): u is number => typeof u === 'number'\n// const filter = (y:  Map<[SwiftModule,SwiftModule], Bond>) => F.pipe(y, _Map.filter(isNumber))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// connection ids \nexport const primes = [\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, \n  83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, \n  179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, \n  277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, \n  383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, \n  491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, \n  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, \n  733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, \n  857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, \n  983, 991, 997\n]\n\n\n\n// a bondID is simply the multiplication of primes.  => our ids are prime factorisation, with unique primes\nexport interface PrimesMultipliedBrand {\n  readonly PrimesMultiplied: unique symbol\n}\nexport type tBondID = number & PrimesMultipliedBrand\nexport const BondID: D.Decoder<unknown, tBondID> = F.pipe(\n  D.number,\n  D.refine((n): n is tBondID => {\n\n    const primeFactorization = (number: number, result?: any): any => {\n      var result = (result || []);\n      var root = Math.sqrt(number);\n      var x = 2;\n    \n      if (number % x) {\n        x = 3;\n    \n        while ((number % x) && ((x = (x + 2)) < root)) {}\n      }\n    \n      x = (x <= root) ? x : number;\n    \n      result.push(x);\n    \n      return (x === number) ? result : primeFactorization((number / x), result);\n    };\n\n    return (primeFactorization(n) as number[]).every(val => primes.includes(val));\n\n  }, 'BondID')\n)\n\n// export type BondID = D.TypeOf<typeof BondID>\n\n\n\n\n\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Matrix4.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Container/Container.tsx",["432","433","434","435","436","437","438","439","440","441","442","443","444"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/reducers.ts",["445","446","447","448","449","450","451","452","453","454","455","456"],"import * as A from \"fp-ts/Array\";\nimport * as O from \"fp-ts/Option\";\nimport * as R from \"fp-ts/Record\";\nimport { eqString } from \"fp-ts/lib/Eq\";\nimport { pipe } from \"fp-ts/pipeable\";\n\nimport { ModelStateActionTypes, ModelStateActions, EditorState } from './types/model-state-action-types'\nimport { Container } from './types/static-types'\n\n\nimport {\n  fromTraversable,\n  Getter,\n  Iso,\n  Lens,\n  Optional,\n  Prism,\n  Traversal,\n} from 'monocle-ts';\n\n\n\n\n////////////\n/**\n * Optics\n */\n\nconst containerInFocusLens = Lens.fromPath<EditorState>()([\"entities\", \"containers\", 'byId']);\nconst atContainerInFocus = (id: string) => Lens.fromProp<Record<string, Container>>()(id)\n\n\nconst isContainerWithIdFn: (s : string) => (a: Container) => Container =\n    s => (a: Container): Container => { return a.id == s ?  {id: a.id, visible: true } :  {id: a.id, visible: false } }\n    \nconst containerLens = Lens.fromPath<EditorState>()([\"entities\", \"containers\", \"byId\"]);\nconst recordTraversal = fromTraversable(R.record)<Container>();\nconst composedRecordTraversal = containerLens.composeTraversal(recordTraversal)\n\n\n export const INITIAL_STATE: EditorState = {\n  entities: {\n    containers: {byId: R.empty, allIds: []},\n   \n  }\n }\n\n\n const bringContainerIntoFocus = (containerInFocus: Container) => (state: EditorState): EditorState => {\n  // traverse the container records and change the visibility of all non chosen containers to invisible\n  const modificationPredicate = isContainerWithIdFn(containerInFocus.id)\n  return composedRecordTraversal.modify(modificationPredicate)(state)\n};\n\nconst bringAllContainersIntoFocus = () => (state: EditorState): EditorState => {\n  // traverse the container records and change the visibility of all non chosen containers to invisible\n  return composedRecordTraversal.modify( (a: Container) => {return {id: a.id, visible: true }} ) (state)\n};\n\n\n export const editorReducer = (\n   state = INITIAL_STATE,\n   action: ModelStateActionTypes\n ): EditorState => {\n  switch(action.type) {\n    case ModelStateActions.BRING_CONTAINER_INTO_FOCUS:\n      return bringContainerIntoFocus(action.payload.containerInFocus)(state)\n    case ModelStateActions.BRING_ALL_CONTAINERS_INTO_FOCUS:\n      return bringAllContainersIntoFocus()(state)\n    default:\n      return state\n  }  \n}","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Dashboard/reducers.ts",["457","458","459","460","461","462"],"import * as A from \"fp-ts/Array\";\nimport * as O from \"fp-ts/Option\";\nimport * as R from \"fp-ts/Record\";\nimport { eqString } from \"fp-ts/lib/Eq\";\nimport { pipe } from \"fp-ts/pipeable\";\nimport { Lens } from \"monocle-ts\";\n\nimport { ModelStateActionTypes, ModelStateActions, DashboardState } from './types/model-state-action-types'\nimport { Owner, Property, EnergyPerformance, TasteProfile, Designer, Project, Subassembly, Building, Pattern} from './types/static-types'\n\n// import { ModuleName } from \"../../types\";\n\n\n/**\n * CRUD functions \n * \naddOne: accepts a single entity, and adds it\naddMany: accepts an array of entities, and adds them\nsetAll: accepts an array of entities, and replaces the existing entity contents with the values in the array\nremoveOne: accepts a single entity ID value, and removes the entity with that ID if it exists\nremoveMany: accepts an array of entity ID values, and removes each entity with those IDs if they exist\nupdateOne: accepts an \"update object\" containing an entity ID and an object containing one or more new field values to update inside a changes field, and updates the corresponding entity\nupdateMany: accepts an array of update objects, and updates all corresponding entities\nupsertOne: accepts a single entity. If an entity with that ID exists, the fields in the update will be merged into the existing entity, with any matching fields overwriting the existing values. If the entity does not exist, it will be added.\nupsertMany: accepts an array of entities that will be upserted.\nmap: accepts a callback function that will be run against each existing entity, and may return a change description object. Afterwards, all changes will be merged into the corresponding existing entities.\n\nMany of these can be reproduced using the semigroup operations: \ngetJoinSemigroup - Get a semigroup where concat will return the maximum, based on the provided order.\ngetMeetSemigroup - Get a semigroup where concat will return the minimum, based on the provided order.\nsemigroupAll - boolean semigroup under conjunction.\nsemigroupAny - boolean semigroup under disjunction.\n */\n\n\n\n\n////////////\n/**\n * Optics\n */\n\nconst subassembliesLens = Lens.fromPath<DashboardState>()([\"entities\", \"subassemblies\", 'byId']);\nconst atSubassembly = (id: string) => Lens.fromProp<Record<string, Subassembly>>()(id)\n\nconst projectsLens = Lens.fromPath<DashboardState>()([\"entities\", \"projects\", 'byId']);\nconst atProjectLens = (id: string) => Lens.fromProp<Record<string,Project>>()(id)\n\nconst ownersLens = Lens.fromPath<DashboardState>()([\"entities\", \"owners\", 'byId']);\nconst atOwners = (id: string) => Lens.fromProp<Record<string, Owner>>()(id)\n\nconst propertiesLens = Lens.fromPath<DashboardState>()([\"entities\", \"properties\", 'byId']);\nconst atProperies = (id: string) => Lens.fromProp<Record<string,Property>>()(id)\n\nconst buildingsLens = Lens.fromPath<DashboardState>()([\"entities\", \"buildings\", 'byId']);\nconst atBuilding = (id: string) => Lens.fromProp<Record<string, Building>>()(id)\n\nconst energyPerformanceLens = Lens.fromPath<DashboardState>()([\"entities\", \"energyPerformances\", 'byId']);\nconst atEnergyPerformance = (id: string) => Lens.fromProp<Record<string, EnergyPerformance>>()(id)\n\nconst patternsLens = Lens.fromPath<DashboardState>()([\"entities\", \"patterns\", 'byId']);\nconst atPatterns = (id: string) => Lens.fromProp<Record<string, Pattern>>()(id)\n\n\nconst tasteProfileLens = Lens.fromPath<DashboardState>()([\"entities\", \"tasteProfiles\", 'byId']);\nconst atTasteProfile = (id: string) => Lens.fromProp<Record<string, TasteProfile>>()(id)\n\nconst designerLens = Lens.fromPath<DashboardState>()([\"entities\", \"designers\", 'byId']);\nconst atDesigner = (id: string) => Lens.fromProp<Record<string, Designer>>()(id)\n\n\n\n\n export const INITIAL_STATE: DashboardState = {\n  entities: {\n    projects: {byId: R.empty, allIds: []},\n    owners: {byId: R.empty, allIds: []},\n    properties: {byId: R.empty, allIds: []},\n    buildings: {byId: R.empty, allIds: []},\n    subassemblies: {byId: R.empty, allIds: []},\n    energyPerformances: {byId: R.empty, allIds: []},\n    patterns: {byId: R.empty, allIds: []},\n    tasteProfiles: {byId: R.empty, allIds: []},\n    designers: {byId: R.empty, allIds: []},\n  }\n }\n\n //  Upsert : An operation that inserts rows into a database table if they do not already exist, or updates them if they do.\n //   Each row in a database is associated with an id. In each of these upsert functions, we provide an entire row of data,\n //   including this unique id. If the unique id matches one of an already existing row, then we have to configure rules\n //   of how to update -> do we merge? or do we overwrite? \n\n \n\n /// We can make the upsert function generic and all, but probably best to individually write out the logic... \n interface Entity{\n   id: string;\n   [key: string]: any;\n }\n\ndeclare type Upsert = <E extends Entity, E1, E2, E3>(\n  entity: E, \n  lens: Lens<DashboardState, Record<string, E>>, \n  lensor: (id: string) => Lens<Record<string, E>, E>, \n  upsertExternal1: E1 extends E ? Upsert: undefined,\n  upsertExternal2: E2 extends E ? Upsert: undefined, \n  upsertExternal3: E3 extends E ? Upsert: undefined\n) => (state: DashboardState) => DashboardState\n\nconst upsert = <E extends Entity, E1, E2, E3>(\n  entity: E, \n  lens: Lens<DashboardState, Record<string, E>>, \n  lensor: (id: string) => Lens<Record<string, E>, E>, \n  // upsertExternal1: E1 extends E ? Upsert: undefined,\n  // upsertExternal2: E2 extends E ? Upsert: undefined, \n  // upsertExternal3: E3 extends E ? Upsert: undefined\n) => (state: DashboardState): DashboardState => {\n   return pipe(\n     state,\n     R.lookup(entity.id),\n     O.fold(\n       () => {\n         return pipe(\n           state,\n           lens.compose(lensor(entity.id)).set({...entity})\n         )\n        },\n        (_entity) => {\n          return pipe(\n            state,\n            lens.compose(lensor(entity.id)).modify(\n              (prevEntity): E => ({\n                ...entity\n              }),\n              ),\n            );\n          },\n        ),\n        // upsertExternal1(),\n        // upsertExternal2(),\n        // upsertExternal13()\n      )\n  };\n  \n     \n\nconst upsertSubassembly = (subassembly: Subassembly) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(subassembly.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          subassembliesLens.compose(atSubassembly(subassembly.id)).set({ ...subassembly })\n        );\n      },\n      (_subassembly) => {\n        return pipe(\n          state,\n          subassembliesLens.compose(atSubassembly(subassembly.id)).modify(\n            (prevSubassembly): Subassembly => ({\n              ...subassembly,\n              id: prevSubassembly.id //note: we can also do clever things here like use our semigroups to do more complex merging... \n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertDesigner = (designer: Designer) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(designer.id),\n    O.fold(\n      // if the designer IS NOT found in the record database:\n      () => {\n        return pipe(\n          state,\n          designerLens.compose(atDesigner(designer.id)).set({ \n            ...designer \n          })\n        );\n      },\n      // if the use IS found in the record database\n      (_designer) => {\n        return pipe(\n          state,\n          designerLens.compose(atDesigner(designer.id)).modify(\n            (prevDesigner): Designer => ({\n              ...designer,\n              //note: we can also do clever things here like use our semigroups to do more complex merging... \n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertTasteProfile = (tasteProfile: TasteProfile) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(tasteProfile.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          tasteProfileLens.compose(atTasteProfile(tasteProfile.id)).set({ ...tasteProfile })\n        );\n      },\n      (_tasteProfile) => {\n        return pipe(\n          state,\n          tasteProfileLens.compose(atTasteProfile(tasteProfile.id)).modify(\n            (prevTasteProfile): TasteProfile => ({\n              ...tasteProfile,\n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertEnergyPerformance = (energyPerformance: EnergyPerformance) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(energyPerformance.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          energyPerformanceLens.compose(atEnergyPerformance(energyPerformance.id)).set({ ...energyPerformance })\n        );\n      },\n      (_energyPerformance) => {\n        return pipe(\n          state,\n          energyPerformanceLens.compose(atEnergyPerformance(energyPerformance.id)).modify(\n            (prevEnergyPerformance): EnergyPerformance => ({\n              ...energyPerformance\n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\n\n\nconst upsertOwner = (owner: Owner) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(owner.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          ownersLens.compose(atOwners(owner.id)).set({\n            ...owner\n          })\n        )\n      },\n      (_owner) => {\n        return pipe(\n          state, \n          ownersLens.compose(atOwners(owner.id)).modify(\n            (prevOwner): Owner => ({\n              ...owner,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertTasteProfile(owner.ownerTasteProfile)\n  )\n}\n\nconst upsertPattern = (pattern: Pattern) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(pattern.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          patternsLens.compose(atPatterns(pattern.id)).set({\n            ...pattern\n          })\n        )\n      },\n      (_owner) => {\n        return pipe(\n          state, \n          patternsLens.compose(atPatterns(pattern.id)).modify(\n            (prevPattern): Pattern => ({\n              ...pattern,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n  )\n}\n\nconst upsertBuilding = (building: Building) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(building.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          buildingsLens.compose(atBuilding(building.id)).set({\n            ...building\n          })\n        )\n      },\n      (_building) => {\n        return pipe(\n          state, \n          buildingsLens.compose(atBuilding(building.id)).modify(\n            (prevBuilding): Building => ({\n              ...building,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertPattern(building.buildingPattern),\n    upsertEnergyPerformance(building.energyPerformance)\n  )\n}\n\n\nconst upsertProperty = (property: Property) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(property.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          propertiesLens.compose(atProperies(property.id)).set({\n            ...property\n          })\n        )\n      },\n      (_property) => {\n        return pipe(\n          state, \n          propertiesLens.compose(atProperies(property.id)).modify(\n            (prevProperty): Property => ({\n              ...property,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertBuilding(property.propertyBuilding1),\n    upsertBuilding(property.propertyBuilding2),\n    upsertBuilding(property.propertyBuilding3),\n\n  )\n}\n\nconst upsertProject = (project: Project) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(project.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          projectsLens.compose(atProjectLens(project.id)).set({\n            ...project\n          })\n        )\n      },\n      (_property) => {\n        return pipe(\n          state, \n          projectsLens.compose(atProjectLens(project.id)).modify(\n            (prevProject): Project => ({\n              ...project,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertOwner(project.projectOwner),\n    upsertProperty(project.projectPropety)\n  \n  )\n}\n\n\n export const dashboardReducer = (\n   state = INITIAL_STATE,\n   action: ModelStateActionTypes\n ): DashboardState => {\n  switch(action.type) {\n    case ModelStateActions.UPSERT_SUBASSEMBLIES:\n      return upsertSubassembly(action.payload.subassembly)(state)\n    case ModelStateActions.UPSERT_BUILDINGS:\n      return upsertBuilding(action.payload.buildings)(state);\n    case ModelStateActions.UPSERT_DESIGNER:\n      return upsertDesigner(action.payload.designers)(state);\n    case ModelStateActions.UPSERT_ENERGY_PERFORMANCE:\n      return upsertEnergyPerformance(action.payload.energyPerformances)(state);\n    case ModelStateActions.UPSERT_OWNERS:\n      return upsertOwner(action.payload.owners)(state);\n    case ModelStateActions.UPSERT_PATTERN:\n      return upsertPattern(action.payload.patterns)(state);\n    case ModelStateActions.UPSERT_PROJECTS:\n      return upsertProject(action.payload.projects)(state); \n    case ModelStateActions.UPSERT_PROPERTIES:\n      return upsertProperty(action.payload.properties)(state); \n    case ModelStateActions.UPSERT_TASTE_PROFILE:\n      return upsertTasteProfile(action.payload.tasteProfiles)(state); \n    default:\n      return state\n  }  \n }","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Dashboard/types/model-state-action-types.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/types/model-state-action-types.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/actions.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/greeting-page/GreetingPage.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/greeting-page/Scene.tsx",["463","464","465","466"],"import * as THREE from 'three'\nimport React, { Suspense, useEffect, useState, useRef } from 'react'\nimport { CanvasContext, useFrame } from 'react-three-fiber'\nimport { PerspectiveCamera, Environment, MeshDistortMaterial, ContactShadows } from '@react-three/drei'\nimport { useSpring, SpringStartFn, config } from '@react-spring/core'\nimport { a } from '@react-spring/three'\n\n// React-spring animates native elements, in this case <mesh/> etc,\n// but it can also handle 3rd–party objs, just wrap them in \"a\".\nconst AnimatedMaterial = a(MeshDistortMaterial)\n\nexport default function Scene({ setBg }: {\n    setBg: SpringStartFn<{ background: string; fill: string; }>\n}) {\n  const sphere = useRef<THREE.Object3D>()\n  const light = useRef<THREE.Object3D>()\n  const [mode, setMode] = useState(false)\n  const [down, setDown] = useState(false)\n  const [hovered, setHovered] = useState(false)\n\n  // Change cursor on hovered state\n  useEffect(() => {\n    document.body.style.cursor = hovered\n      ? 'none'\n      : `url('data:image/svg+xml;base64,${btoa(\n          '<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"16\" cy=\"16\" r=\"10\" fill=\"#E8B059\"/></svg>'\n        )}'), auto`\n  }, [hovered])\n\n  // Make the bubble float and follow the mouse\n  // This is frame-based animation, useFrame subscribes the component to the render-loop\n  useFrame((state: CanvasContext) => {\n    if (light.current && sphere.current){\n        light.current.position.x = state.mouse.x * 20\n        light.current.position.y = state.mouse.y * 20\n        sphere.current.position.x = THREE.MathUtils.lerp(sphere.current.position.x, hovered ? state.mouse.x / 2 : 0, 0.2)\n        sphere.current.position.y = THREE.MathUtils.lerp(\n          sphere.current.position.y,\n          Math.sin(state.clock.elapsedTime / 1.5) / 6 + (hovered ? state.mouse.y / 2 : 0),\n          0.2\n        )\n    }\n  })\n\n  // Springs for color and overall looks, this is state-driven animation\n  // React-spring is physics based and turns static props into animated values\ntype SpringProps = { \n    wobble: number;\n    coat: number;\n    ambient: number;\n    env: number;\n    color: string;\n    config: (n: string) => {\n        mass: number;\n        tension: number;\n        friction: number;\n    }\n}\n\n  const [{ wobble, coat, color, ambient, env }, set] = useSpring(\n    {\n      wobble: down \n        ? 1.2 \n        : hovered \n            ? 1.05 \n            : 1,\n      coat: mode && !hovered \n        ? 0.04 \n        : 1,\n      ambient: mode && !hovered \n        ? 1.5 \n        : 0.5,\n      env: mode && !hovered \n        ? 0.4 \n        : 1,\n      color: hovered\n        ? '#E8B059' \n        : mode \n            ? '#202020' \n            : 'white',\n    //   config: (n: string) => n === 'wobble' && hovered && { mass: 2, tension: 1000, friction: 10 }\n    },\n    [mode, hovered, down]\n  )\n\n  return (\n    <>\n      <PerspectiveCamera makeDefault position={[0, 0, 4]} fov={75}>\n        <a.ambientLight intensity={ambient} />\n        <a.pointLight ref={light} position-z={-15} intensity={env} color=\"#F8C069\" />\n      </PerspectiveCamera>\n      <Suspense fallback={null}>\n        <a.mesh\n          ref={sphere}\n        //   scale={wobble!.to((w) => [w, w, w])}\n          onPointerOver={() => setHovered(true)}\n          onPointerOut={() => setHovered(false)}\n          onPointerDown={() => setDown(true)}\n          onPointerUp={() => {\n            setDown(false)\n            // Toggle mode between dark and bright\n            setMode(!mode)\n            setBg({ background: !mode ? '#202020' : '#f0f0f0', fill: !mode ? '#f0f0f0' : '#202020' })\n          }}>\n          <sphereBufferGeometry args={[1, 64, 64]} />\n          <AnimatedMaterial color={color} envMapIntensity={env} clearcoat={coat} clearcoatRoughness={0} metalness={0.1} stencilMask ={1} />\n        </a.mesh>\n        <Environment preset=\"warehouse\" />\n        <ContactShadows\n          rotation={[Math.PI / 2, 0, 0]}\n          position={[0, -1.6, 0]}\n          opacity={mode ? 0.8 : 0.4}\n          width={15}\n          height={15}\n          blur={2.5}\n          far={1.6}\n        />\n      </Suspense>\n    </>\n  )\n}\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/greeting-page/Overlay.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/BLK-A.tsx",[],{"ruleId":"467","severity":1,"message":"468","line":3,"column":16,"nodeType":"469","messageId":"470","endLine":3,"endColumn":24},{"ruleId":"467","severity":1,"message":"471","line":4,"column":50,"nodeType":"469","messageId":"470","endLine":4,"endColumn":54},{"ruleId":"467","severity":1,"message":"472","line":15,"column":8,"nodeType":"469","messageId":"470","endLine":15,"endColumn":20},{"ruleId":"473","severity":1,"message":"474","line":23,"column":14,"nodeType":"475","messageId":"476","endLine":23,"endColumn":26},{"ruleId":"467","severity":1,"message":"477","line":1,"column":55,"nodeType":"469","messageId":"470","endLine":1,"endColumn":59},{"ruleId":"478","replacedBy":"479"},{"ruleId":"480","replacedBy":"481"},{"ruleId":"467","severity":1,"message":"482","line":2,"column":20,"nodeType":"469","messageId":"470","endLine":2,"endColumn":23},{"ruleId":"467","severity":1,"message":"483","line":5,"column":10,"nodeType":"469","messageId":"470","endLine":5,"endColumn":20},{"ruleId":"467","severity":1,"message":"484","line":6,"column":27,"nodeType":"469","messageId":"470","endLine":6,"endColumn":40},{"ruleId":"467","severity":1,"message":"485","line":8,"column":10,"nodeType":"469","messageId":"470","endLine":8,"endColumn":21},{"ruleId":"467","severity":1,"message":"486","line":10,"column":23,"nodeType":"469","messageId":"470","endLine":10,"endColumn":34},{"ruleId":"467","severity":1,"message":"487","line":51,"column":10,"nodeType":"469","messageId":"470","endLine":51,"endColumn":20},{"ruleId":"467","severity":1,"message":"488","line":51,"column":22,"nodeType":"469","messageId":"470","endLine":51,"endColumn":35},{"ruleId":"467","severity":1,"message":"489","line":58,"column":11,"nodeType":"469","messageId":"470","endLine":58,"endColumn":18},{"ruleId":"467","severity":1,"message":"490","line":3,"column":15,"nodeType":"469","messageId":"470","endLine":3,"endColumn":23},{"ruleId":"467","severity":1,"message":"491","line":4,"column":10,"nodeType":"469","messageId":"470","endLine":4,"endColumn":25},{"ruleId":"467","severity":1,"message":"492","line":6,"column":10,"nodeType":"469","messageId":"470","endLine":6,"endColumn":21},{"ruleId":"467","severity":1,"message":"485","line":7,"column":10,"nodeType":"469","messageId":"470","endLine":7,"endColumn":21},{"ruleId":"467","severity":1,"message":"493","line":10,"column":8,"nodeType":"469","messageId":"470","endLine":10,"endColumn":13},{"ruleId":"467","severity":1,"message":"494","line":10,"column":17,"nodeType":"469","messageId":"470","endLine":10,"endColumn":30},{"ruleId":"467","severity":1,"message":"495","line":11,"column":10,"nodeType":"469","messageId":"470","endLine":11,"endColumn":17},{"ruleId":"467","severity":1,"message":"496","line":11,"column":19,"nodeType":"469","messageId":"470","endLine":11,"endColumn":22},{"ruleId":"467","severity":1,"message":"497","line":21,"column":10,"nodeType":"469","messageId":"470","endLine":21,"endColumn":15},{"ruleId":"467","severity":1,"message":"498","line":21,"column":17,"nodeType":"469","messageId":"470","endLine":21,"endColumn":23},{"ruleId":"467","severity":1,"message":"499","line":22,"column":10,"nodeType":"469","messageId":"470","endLine":22,"endColumn":15},{"ruleId":"467","severity":1,"message":"500","line":22,"column":17,"nodeType":"469","messageId":"470","endLine":22,"endColumn":23},{"ruleId":"467","severity":1,"message":"501","line":24,"column":10,"nodeType":"469","messageId":"470","endLine":24,"endColumn":17},{"ruleId":"467","severity":1,"message":"502","line":28,"column":7,"nodeType":"469","messageId":"470","endLine":28,"endColumn":12},{"ruleId":"467","severity":1,"message":"503","line":1,"column":17,"nodeType":"469","messageId":"470","endLine":1,"endColumn":25},{"ruleId":"467","severity":1,"message":"504","line":1,"column":27,"nodeType":"469","messageId":"470","endLine":1,"endColumn":33},{"ruleId":"467","severity":1,"message":"505","line":1,"column":69,"nodeType":"469","messageId":"470","endLine":1,"endColumn":79},{"ruleId":"467","severity":1,"message":"506","line":1,"column":81,"nodeType":"469","messageId":"470","endLine":1,"endColumn":88},{"ruleId":"467","severity":1,"message":"507","line":2,"column":10,"nodeType":"469","messageId":"470","endLine":2,"endColumn":17},{"ruleId":"467","severity":1,"message":"508","line":3,"column":10,"nodeType":"469","messageId":"470","endLine":3,"endColumn":14},{"ruleId":"467","severity":1,"message":"509","line":5,"column":10,"nodeType":"469","messageId":"470","endLine":5,"endColumn":23},{"ruleId":"467","severity":1,"message":"510","line":6,"column":10,"nodeType":"469","messageId":"470","endLine":6,"endColumn":18},{"ruleId":"511","severity":1,"message":"512","line":94,"column":72,"nodeType":"513","messageId":"514","endLine":94,"endColumn":73},{"ruleId":"478","replacedBy":"515"},{"ruleId":"480","replacedBy":"516"},{"ruleId":"467","severity":1,"message":"517","line":3,"column":20,"nodeType":"469","messageId":"470","endLine":3,"endColumn":26},{"ruleId":"467","severity":1,"message":"518","line":3,"column":28,"nodeType":"469","messageId":"470","endLine":3,"endColumn":43},{"ruleId":"467","severity":1,"message":"519","line":9,"column":10,"nodeType":"469","messageId":"470","endLine":9,"endColumn":19},{"ruleId":"467","severity":1,"message":"520","line":14,"column":8,"nodeType":"469","messageId":"470","endLine":14,"endColumn":12},{"ruleId":"467","severity":1,"message":"521","line":15,"column":8,"nodeType":"469","messageId":"470","endLine":15,"endColumn":22},{"ruleId":"467","severity":1,"message":"522","line":16,"column":10,"nodeType":"469","messageId":"470","endLine":16,"endColumn":18},{"ruleId":"523","severity":1,"message":"524","line":21,"column":1,"nodeType":"525","messageId":"526","endLine":23,"endColumn":12},{"ruleId":"467","severity":1,"message":"527","line":30,"column":7,"nodeType":"469","messageId":"470","endLine":30,"endColumn":12},{"ruleId":"467","severity":1,"message":"528","line":112,"column":5,"nodeType":"469","messageId":"470","endLine":112,"endColumn":10},{"ruleId":"467","severity":1,"message":"529","line":113,"column":5,"nodeType":"469","messageId":"470","endLine":113,"endColumn":9},{"ruleId":"467","severity":1,"message":"530","line":114,"column":5,"nodeType":"469","messageId":"470","endLine":114,"endColumn":13},{"ruleId":"467","severity":1,"message":"531","line":115,"column":5,"nodeType":"469","messageId":"470","endLine":115,"endColumn":11},{"ruleId":"467","severity":1,"message":"532","line":116,"column":5,"nodeType":"469","messageId":"470","endLine":116,"endColumn":15},{"ruleId":"467","severity":1,"message":"533","line":117,"column":5,"nodeType":"469","messageId":"470","endLine":117,"endColumn":21},{"ruleId":"467","severity":1,"message":"504","line":1,"column":16,"nodeType":"469","messageId":"470","endLine":1,"endColumn":22},{"ruleId":"467","severity":1,"message":"510","line":3,"column":10,"nodeType":"469","messageId":"470","endLine":3,"endColumn":18},{"ruleId":"467","severity":1,"message":"534","line":12,"column":8,"nodeType":"469","messageId":"470","endLine":12,"endColumn":25},{"ruleId":"467","severity":1,"message":"535","line":32,"column":19,"nodeType":"469","messageId":"470","endLine":32,"endColumn":26},{"ruleId":"478","replacedBy":"536"},{"ruleId":"480","replacedBy":"537"},{"ruleId":"478","replacedBy":"538"},{"ruleId":"480","replacedBy":"539"},{"ruleId":"467","severity":1,"message":"540","line":2,"column":8,"nodeType":"469","messageId":"470","endLine":2,"endColumn":13},{"ruleId":"467","severity":1,"message":"541","line":28,"column":15,"nodeType":"469","messageId":"470","endLine":28,"endColumn":21},{"ruleId":"467","severity":1,"message":"542","line":10,"column":10,"nodeType":"469","messageId":"470","endLine":10,"endColumn":17},{"ruleId":"467","severity":1,"message":"543","line":6,"column":13,"nodeType":"469","messageId":"470","endLine":6,"endColumn":17},{"ruleId":"467","severity":1,"message":"544","line":7,"column":13,"nodeType":"469","messageId":"470","endLine":7,"endColumn":17},{"ruleId":"467","severity":1,"message":"545","line":8,"column":10,"nodeType":"469","messageId":"470","endLine":8,"endColumn":15},{"ruleId":"467","severity":1,"message":"546","line":8,"column":17,"nodeType":"469","messageId":"470","endLine":8,"endColumn":21},{"ruleId":"467","severity":1,"message":"547","line":10,"column":10,"nodeType":"469","messageId":"470","endLine":10,"endColumn":19},{"ruleId":"467","severity":1,"message":"548","line":11,"column":13,"nodeType":"469","messageId":"470","endLine":11,"endColumn":14},{"ruleId":"467","severity":1,"message":"549","line":12,"column":10,"nodeType":"469","messageId":"470","endLine":12,"endColumn":28},{"ruleId":"467","severity":1,"message":"550","line":13,"column":10,"nodeType":"469","messageId":"470","endLine":13,"endColumn":31},{"ruleId":"467","severity":1,"message":"551","line":13,"column":33,"nodeType":"469","messageId":"470","endLine":13,"endColumn":53},{"ruleId":"467","severity":1,"message":"552","line":14,"column":32,"nodeType":"469","messageId":"470","endLine":14,"endColumn":42},{"ruleId":"467","severity":1,"message":"553","line":15,"column":28,"nodeType":"469","messageId":"470","endLine":15,"endColumn":36},{"ruleId":"467","severity":1,"message":"554","line":210,"column":7,"nodeType":"469","messageId":"470","endLine":210,"endColumn":22},{"ruleId":"467","severity":1,"message":"555","line":211,"column":7,"nodeType":"469","messageId":"470","endLine":211,"endColumn":20},{"ruleId":"467","severity":1,"message":"556","line":219,"column":7,"nodeType":"469","messageId":"470","endLine":219,"endColumn":66},{"ruleId":"467","severity":1,"message":"557","line":2,"column":13,"nodeType":"469","messageId":"470","endLine":2,"endColumn":14},{"ruleId":"467","severity":1,"message":"558","line":4,"column":10,"nodeType":"469","messageId":"470","endLine":4,"endColumn":21},{"ruleId":"467","severity":1,"message":"559","line":5,"column":9,"nodeType":"469","messageId":"470","endLine":5,"endColumn":23},{"ruleId":"467","severity":1,"message":"560","line":5,"column":25,"nodeType":"469","messageId":"470","endLine":5,"endColumn":32},{"ruleId":"467","severity":1,"message":"561","line":5,"column":40,"nodeType":"469","messageId":"470","endLine":5,"endColumn":46},{"ruleId":"467","severity":1,"message":"562","line":6,"column":16,"nodeType":"469","messageId":"470","endLine":6,"endColumn":22},{"ruleId":"467","severity":1,"message":"563","line":74,"column":7,"nodeType":"469","messageId":"470","endLine":74,"endColumn":13},{"ruleId":"467","severity":1,"message":"549","line":3,"column":10,"nodeType":"469","messageId":"470","endLine":3,"endColumn":28},{"ruleId":"467","severity":1,"message":"564","line":3,"column":30,"nodeType":"469","messageId":"470","endLine":3,"endColumn":49},{"ruleId":"467","severity":1,"message":"565","line":77,"column":7,"nodeType":"469","messageId":"470","endLine":77,"endColumn":15},{"ruleId":"467","severity":1,"message":"542","line":1,"column":19,"nodeType":"469","messageId":"470","endLine":1,"endColumn":26},{"ruleId":"467","severity":1,"message":"566","line":1,"column":28,"nodeType":"469","messageId":"470","endLine":1,"endColumn":33},{"ruleId":"467","severity":1,"message":"567","line":315,"column":6,"nodeType":"469","messageId":"470","endLine":315,"endColumn":17},{"ruleId":"467","severity":1,"message":"568","line":321,"column":6,"nodeType":"469","messageId":"470","endLine":321,"endColumn":17},{"ruleId":"467","severity":1,"message":"569","line":2,"column":13,"nodeType":"469","messageId":"470","endLine":2,"endColumn":14},{"ruleId":"467","severity":1,"message":"570","line":8,"column":13,"nodeType":"469","messageId":"470","endLine":8,"endColumn":14},{"ruleId":"467","severity":1,"message":"571","line":9,"column":14,"nodeType":"469","messageId":"470","endLine":9,"endColumn":18},{"ruleId":"467","severity":1,"message":"572","line":10,"column":13,"nodeType":"469","messageId":"470","endLine":10,"endColumn":14},{"ruleId":"467","severity":1,"message":"573","line":12,"column":13,"nodeType":"469","messageId":"470","endLine":12,"endColumn":14},{"ruleId":"467","severity":1,"message":"574","line":13,"column":13,"nodeType":"469","messageId":"470","endLine":13,"endColumn":14},{"ruleId":"467","severity":1,"message":"575","line":14,"column":13,"nodeType":"469","messageId":"470","endLine":14,"endColumn":14},{"ruleId":"467","severity":1,"message":"562","line":16,"column":16,"nodeType":"469","messageId":"470","endLine":16,"endColumn":22},{"ruleId":"467","severity":1,"message":"576","line":20,"column":10,"nodeType":"469","messageId":"470","endLine":20,"endColumn":23},{"ruleId":"467","severity":1,"message":"577","line":67,"column":7,"nodeType":"469","messageId":"470","endLine":67,"endColumn":15},{"ruleId":"467","severity":1,"message":"578","line":68,"column":7,"nodeType":"469","messageId":"470","endLine":68,"endColumn":11},{"ruleId":"467","severity":1,"message":"579","line":69,"column":7,"nodeType":"469","messageId":"470","endLine":69,"endColumn":13},{"ruleId":"467","severity":1,"message":"580","line":70,"column":7,"nodeType":"469","messageId":"470","endLine":70,"endColumn":14},{"ruleId":"467","severity":1,"message":"581","line":71,"column":7,"nodeType":"469","messageId":"470","endLine":71,"endColumn":20},{"ruleId":"467","severity":1,"message":"582","line":78,"column":7,"nodeType":"469","messageId":"470","endLine":78,"endColumn":15},{"ruleId":"583","severity":1,"message":"584","line":120,"column":11,"nodeType":"469","messageId":"585","endLine":120,"endColumn":17},{"ruleId":"467","severity":1,"message":"504","line":1,"column":17,"nodeType":"469","messageId":"470","endLine":1,"endColumn":23},{"ruleId":"467","severity":1,"message":"468","line":1,"column":25,"nodeType":"469","messageId":"470","endLine":1,"endColumn":33},{"ruleId":"467","severity":1,"message":"586","line":1,"column":35,"nodeType":"469","messageId":"470","endLine":1,"endColumn":46},{"ruleId":"467","severity":1,"message":"587","line":1,"column":48,"nodeType":"469","messageId":"470","endLine":1,"endColumn":57},{"ruleId":"467","severity":1,"message":"588","line":2,"column":10,"nodeType":"469","messageId":"470","endLine":2,"endColumn":18},{"ruleId":"467","severity":1,"message":"589","line":2,"column":69,"nodeType":"469","messageId":"470","endLine":2,"endColumn":82},{"ruleId":"467","severity":1,"message":"590","line":7,"column":10,"nodeType":"469","messageId":"470","endLine":7,"endColumn":20},{"ruleId":"467","severity":1,"message":"591","line":8,"column":10,"nodeType":"469","messageId":"470","endLine":8,"endColumn":20},{"ruleId":"467","severity":1,"message":"519","line":10,"column":10,"nodeType":"469","messageId":"470","endLine":10,"endColumn":19},{"ruleId":"467","severity":1,"message":"486","line":18,"column":23,"nodeType":"469","messageId":"470","endLine":18,"endColumn":34},{"ruleId":"467","severity":1,"message":"592","line":19,"column":10,"nodeType":"469","messageId":"470","endLine":19,"endColumn":37},{"ruleId":"467","severity":1,"message":"593","line":31,"column":7,"nodeType":"469","messageId":"470","endLine":31,"endColumn":30},{"ruleId":"467","severity":1,"message":"594","line":200,"column":7,"nodeType":"469","messageId":"470","endLine":200,"endColumn":24},{"ruleId":"467","severity":1,"message":"595","line":1,"column":13,"nodeType":"469","messageId":"470","endLine":1,"endColumn":14},{"ruleId":"467","severity":1,"message":"596","line":2,"column":13,"nodeType":"469","messageId":"470","endLine":2,"endColumn":14},{"ruleId":"467","severity":1,"message":"597","line":4,"column":10,"nodeType":"469","messageId":"470","endLine":4,"endColumn":18},{"ruleId":"467","severity":1,"message":"598","line":5,"column":10,"nodeType":"469","messageId":"470","endLine":5,"endColumn":14},{"ruleId":"467","severity":1,"message":"599","line":13,"column":3,"nodeType":"469","messageId":"470","endLine":13,"endColumn":9},{"ruleId":"467","severity":1,"message":"600","line":14,"column":3,"nodeType":"469","messageId":"470","endLine":14,"endColumn":6},{"ruleId":"467","severity":1,"message":"601","line":16,"column":3,"nodeType":"469","messageId":"470","endLine":16,"endColumn":11},{"ruleId":"467","severity":1,"message":"602","line":17,"column":3,"nodeType":"469","messageId":"470","endLine":17,"endColumn":8},{"ruleId":"467","severity":1,"message":"603","line":18,"column":3,"nodeType":"469","messageId":"470","endLine":18,"endColumn":12},{"ruleId":"467","severity":1,"message":"604","line":29,"column":7,"nodeType":"469","messageId":"470","endLine":29,"endColumn":27},{"ruleId":"467","severity":1,"message":"605","line":30,"column":7,"nodeType":"469","messageId":"470","endLine":30,"endColumn":25},{"ruleId":"606","severity":1,"message":"607","line":34,"column":53,"nodeType":"608","messageId":"476","endLine":34,"endColumn":55},{"ruleId":"467","severity":1,"message":"595","line":1,"column":13,"nodeType":"469","messageId":"470","endLine":1,"endColumn":14},{"ruleId":"467","severity":1,"message":"597","line":4,"column":10,"nodeType":"469","messageId":"470","endLine":4,"endColumn":18},{"ruleId":"467","severity":1,"message":"609","line":110,"column":7,"nodeType":"469","messageId":"470","endLine":110,"endColumn":13},{"ruleId":"467","severity":1,"message":"610","line":110,"column":35,"nodeType":"469","messageId":"470","endLine":110,"endColumn":37},{"ruleId":"467","severity":1,"message":"611","line":110,"column":39,"nodeType":"469","messageId":"470","endLine":110,"endColumn":41},{"ruleId":"467","severity":1,"message":"612","line":110,"column":43,"nodeType":"469","messageId":"470","endLine":110,"endColumn":45},{"ruleId":"467","severity":1,"message":"613","line":5,"column":36,"nodeType":"469","messageId":"470","endLine":5,"endColumn":42},{"ruleId":"467","severity":1,"message":"614","line":47,"column":6,"nodeType":"469","messageId":"470","endLine":47,"endColumn":17},{"ruleId":"467","severity":1,"message":"615","line":60,"column":12,"nodeType":"469","messageId":"470","endLine":60,"endColumn":18},{"ruleId":"467","severity":1,"message":"616","line":60,"column":49,"nodeType":"469","messageId":"470","endLine":60,"endColumn":52},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'GreetingPage' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'from' is defined but never used.","no-native-reassign",["617"],"no-negated-in-lhs",["618"],"'gql' is defined but never used.","'decodeWith' is defined but never used.","'Subassemblies' is defined but never used.","'GET_PROJECT' is defined but never used.","'useSelector' is defined but never used.","'moduleName' is assigned a value but never used.","'setModuleName' is assigned a value but never used.","'loading' is assigned a value but never used.","'useQuery' is defined but never used.","'SubassemblyName' is defined but never used.","'ApolloError' is defined but never used.","'axios' is defined but never used.","'AxiosResponse' is defined but never used.","'flatten' is defined but never used.","'map' is defined but never used.","'Users' is defined but never used.","'Answer' is defined but never used.","'users' is defined but never used.","'answer' is defined but never used.","'Project' is defined but never used.","'query' is assigned a value but never used.","'Fragment' is defined but never used.","'useRef' is defined but never used.","'useContext' is defined but never used.","'useMemo' is defined but never used.","'useGLTF' is defined but never used.","'GLTF' is defined but never used.","'OrbitControls' is defined but never used.","'useThree' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["617"],["618"],"'extend' is defined but never used.","'ReactThreeFiber' is defined but never used.","'useSpring' is defined but never used.","'Icon' is defined but never used.","'FullscreenIcon' is defined but never used.","'Object3D' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Dolly' is assigned a value but never used.","'scene' is assigned a value but never used.","'size' is assigned a value but never used.","'viewport' is assigned a value but never used.","'aspect' is assigned a value but never used.","'invalidate' is assigned a value but never used.","'setDefaultCamera' is assigned a value but never used.","'TransformControls' is defined but never used.","'hovered' is assigned a value but never used.",["617"],["618"],["617"],["618"],"'anime' is defined but never used.","'setVal' is assigned a value but never used.","'Vector3' is defined but never used.","'_Map' is defined but never used.","'_Set' is defined but never used.","'assoc' is defined but never used.","'prop' is defined but never used.","'getLenses' is defined but never used.","'t' is defined but never used.","'IBuildingComponent' is defined but never used.","'swiftComponentLibrary' is defined but never used.","'swiftComponentRecord' is defined but never used.","'makeVertex' is defined but never used.","'makeEdge' is defined but never used.","'vertexSemiGroup' is assigned a value but never used.","'edgeSemiGroup' is assigned a value but never used.","'graphSemiGroup' is assigned a value but never used.","'F' is defined but never used.","'SwiftModule' is defined but never used.","'componentBonds' is defined but never used.","'tBondID' is defined but never used.","'BondID' is defined but never used.","'uuidv4' is defined but never used.","'eqEdge' is assigned a value but never used.","'matchComponentState' is defined but never used.","'eqVertex' is assigned a value but never used.","'Euler' is defined but never used.","'PatternMode' is defined but never used.","'Periodicity' is defined but never used.","'E' is defined but never used.","'S' is defined but never used.","'Show' is defined but never used.","'C' is defined but never used.","'G' is defined but never used.","'M' is defined but never used.","'R' is defined but never used.","'SkylarkModule' is defined but never used.","'elemBond' is assigned a value but never used.","'keys' is assigned a value but never used.","'values' is assigned a value but never used.","'toArray' is assigned a value but never used.","'lookupWithKey' is assigned a value but never used.","'isNumber' is assigned a value but never used.","@typescript-eslint/no-redeclare","'result' is already defined.","redeclared","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'useFrame' is defined but never used.","'EventHandlers' is defined but never used.","'IContainer' is defined but never used.","'meshBounds' is defined but never used.","'bringAllContainersIntoFocus' is defined but never used.","'toolTipProps' is assigned a value but never used.","'AnimatedContainer' is assigned a value but never used.","'A' is defined but never used.","'O' is defined but never used.","'eqString' is defined but never used.","'pipe' is defined but never used.","'Getter' is defined but never used.","'Iso' is defined but never used.","'Optional' is defined but never used.","'Prism' is defined but never used.","'Traversal' is defined but never used.","'containerInFocusLens' is assigned a value but never used.","'atContainerInFocus' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'upsert' is assigned a value but never used.","'E1' is defined but never used.","'E2' is defined but never used.","'E3' is defined but never used.","'config' is defined but never used.","'SpringProps' is defined but never used.","'wobble' is assigned a value but never used.","'set' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]