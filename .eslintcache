[{"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/App.tsx":"1","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/client.ts":"2","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/index.tsx":"3","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/middleware/logger.ts":"4","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/index.ts":"5","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/API/graphqlAPI.ts":"6","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/modelUtils.tsx":"7","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Editor.tsx":"8","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Light.tsx":"9","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Box.tsx":"10","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms/MiddleLongBlock.tsx":"11","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/ClippingSlider/ClippingSlider.tsx":"12","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/index.ts":"13","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B3.tsx":"14","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A1.tsx":"15","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A4.tsx":"16","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A3.tsx":"17","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A5.tsx":"18","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B6.tsx":"19","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B4.tsx":"20","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B5.tsx":"21","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C2.tsx":"22","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C3.tsx":"23","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C5.tsx":"24","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C1.tsx":"25","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C4.tsx":"26","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D1.tsx":"27","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D2.tsx":"28","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D3.tsx":"29","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E1.tsx":"30","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E3.tsx":"31","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D4.tsx":"32","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E2.tsx":"33","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F1.tsx":"34","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F3.tsx":"35","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E4.tsx":"36","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F5.tsx":"37","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B7.tsx":"38","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G1.tsx":"39","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F4.tsx":"40","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G3.tsx":"41","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G4.tsx":"42","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G6.tsx":"43","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G5.tsx":"44","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G2.tsx":"45","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F2.tsx":"46","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H1.tsx":"47","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B2.tsx":"48","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G7.tsx":"49","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B1.tsx":"50","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A2.tsx":"51","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H5.tsx":"52","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H2.tsx":"53","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H3.tsx":"54","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H4.tsx":"55","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/index.ts":"56","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Graph.ts":"57","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Edge.ts":"58","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Vertex.ts":"59","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Container.ts":"60","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Component.ts":"61","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Bond.ts":"62","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Matrix4.ts":"63","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/reducers.ts":"64","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/types/model-state-action-types.ts":"65","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/actions.ts":"66","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/BLK-A.tsx":"67","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms2/N/N_S-BLOCK.tsx":"68","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/component-in-focus-page/ComponentInFocus.tsx":"69","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/reducers.ts":"70","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/component-in-focus-page/Overlay.tsx":"71","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/component-in-focus-page/Scene.tsx":"72","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/model-state-action-types.ts":"73","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/SceneGraph.tsx":"74","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/composite-types.ts":"75","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/codecs.ts":"76","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/type-guards.ts":"77","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/API/types/t.ts":"78","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/generated/graphql.tsx":"79","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/analytics-page/AnalyticsPage.tsx":"80","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/DataTable/DataTable.tsx":"81","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/builder3D-page/Builder3DPage.tsx":"82","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Tree/index.tsx":"83","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Tree/TreeChart.tsx":"84","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Radar/index.tsx":"85","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Radar/RadarChart.tsx":"86","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/index.ts":"87","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Graph.ts":"88","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Edge.ts":"89","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Bond.ts":"90","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Vertex.ts":"91","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Component.ts":"92","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Container.ts":"93","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Matrix4.ts":"94","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/header/carbon-header/CarbonHeader.tsx":"95","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/header/material-header/MaterialHeader.tsx":"96","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/materials/cladding.ts":"97","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/materials/zincMaterial.ts":"98","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/materials/plywoodMaterial.ts":"99","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Container/GroupContainer.tsx":"100","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms2/N/N-ROOF-BLK.tsx":"101","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Container/MeshContainer.tsx":"102","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms/FloorLong.tsx":"103"},{"size":1088,"mtime":1611258087430,"results":"104","hashOfConfig":"105"},{"size":695,"mtime":1610390230521,"results":"106","hashOfConfig":"105"},{"size":622,"mtime":1610974223236,"results":"107","hashOfConfig":"105"},{"size":422,"mtime":1610476513671,"results":"108","hashOfConfig":"105"},{"size":833,"mtime":1611154228992,"results":"109","hashOfConfig":"105"},{"size":6356,"mtime":1611160164606,"results":"110","hashOfConfig":"105"},{"size":4281,"mtime":1610964973916,"results":"111","hashOfConfig":"105"},{"size":6343,"mtime":1611333685430,"results":"112","hashOfConfig":"105"},{"size":840,"mtime":1610964947647,"results":"113","hashOfConfig":"105"},{"size":1274,"mtime":1610964973809,"results":"114","hashOfConfig":"105"},{"size":1313,"mtime":1610964973814,"results":"115","hashOfConfig":"105"},{"size":1242,"mtime":1610986104256,"results":"116","hashOfConfig":"105"},{"size":2659,"mtime":1610964973915,"results":"117","hashOfConfig":"105"},{"size":1177,"mtime":1610964973878,"results":"118","hashOfConfig":"105"},{"size":1342,"mtime":1610964973871,"results":"119","hashOfConfig":"105"},{"size":1177,"mtime":1610964973874,"results":"120","hashOfConfig":"105"},{"size":1175,"mtime":1610964973873,"results":"121","hashOfConfig":"105"},{"size":1177,"mtime":1610964973875,"results":"122","hashOfConfig":"105"},{"size":1177,"mtime":1610964973881,"results":"123","hashOfConfig":"105"},{"size":1177,"mtime":1610964973879,"results":"124","hashOfConfig":"105"},{"size":1177,"mtime":1610964973880,"results":"125","hashOfConfig":"105"},{"size":1177,"mtime":1610964973884,"results":"126","hashOfConfig":"105"},{"size":1177,"mtime":1610964973885,"results":"127","hashOfConfig":"105"},{"size":1177,"mtime":1610964973887,"results":"128","hashOfConfig":"105"},{"size":1176,"mtime":1610964973883,"results":"129","hashOfConfig":"105"},{"size":1177,"mtime":1610964973886,"results":"130","hashOfConfig":"105"},{"size":1176,"mtime":1610964973888,"results":"131","hashOfConfig":"105"},{"size":1175,"mtime":1610964973889,"results":"132","hashOfConfig":"105"},{"size":1175,"mtime":1610964973891,"results":"133","hashOfConfig":"105"},{"size":1175,"mtime":1610964973893,"results":"134","hashOfConfig":"105"},{"size":1175,"mtime":1610964973895,"results":"135","hashOfConfig":"105"},{"size":1175,"mtime":1610964973892,"results":"136","hashOfConfig":"105"},{"size":1175,"mtime":1610964973894,"results":"137","hashOfConfig":"105"},{"size":1175,"mtime":1610964973898,"results":"138","hashOfConfig":"105"},{"size":1175,"mtime":1610964973900,"results":"139","hashOfConfig":"105"},{"size":1175,"mtime":1610964973896,"results":"140","hashOfConfig":"105"},{"size":1175,"mtime":1610964973902,"results":"141","hashOfConfig":"105"},{"size":1177,"mtime":1610964973882,"results":"142","hashOfConfig":"105"},{"size":1175,"mtime":1610964973903,"results":"143","hashOfConfig":"105"},{"size":1175,"mtime":1610964973901,"results":"144","hashOfConfig":"105"},{"size":1175,"mtime":1610964973905,"results":"145","hashOfConfig":"105"},{"size":1175,"mtime":1610964973906,"results":"146","hashOfConfig":"105"},{"size":1175,"mtime":1610964973908,"results":"147","hashOfConfig":"105"},{"size":1175,"mtime":1610964973907,"results":"148","hashOfConfig":"105"},{"size":1175,"mtime":1610964973904,"results":"149","hashOfConfig":"105"},{"size":1175,"mtime":1610964973899,"results":"150","hashOfConfig":"105"},{"size":1175,"mtime":1610964973910,"results":"151","hashOfConfig":"105"},{"size":1177,"mtime":1610964973877,"results":"152","hashOfConfig":"105"},{"size":1175,"mtime":1610964973909,"results":"153","hashOfConfig":"105"},{"size":1177,"mtime":1610964973876,"results":"154","hashOfConfig":"105"},{"size":1173,"mtime":1610964973872,"results":"155","hashOfConfig":"105"},{"size":1175,"mtime":1610964973914,"results":"156","hashOfConfig":"105"},{"size":1175,"mtime":1610964973911,"results":"157","hashOfConfig":"105"},{"size":1175,"mtime":1610964973912,"results":"158","hashOfConfig":"105"},{"size":1175,"mtime":1610964973913,"results":"159","hashOfConfig":"105"},{"size":1229,"mtime":1610990751246,"results":"160","hashOfConfig":"105"},{"size":7207,"mtime":1611246307736,"results":"161","hashOfConfig":"105"},{"size":2021,"mtime":1611246364964,"results":"162","hashOfConfig":"105"},{"size":2387,"mtime":1610990751245,"results":"163","hashOfConfig":"105"},{"size":10728,"mtime":1611008482428,"results":"164","hashOfConfig":"105"},{"size":2375,"mtime":1610990751241,"results":"165","hashOfConfig":"105"},{"size":4798,"mtime":1611246367530,"results":"166","hashOfConfig":"105"},{"size":598,"mtime":1610990751244,"results":"167","hashOfConfig":"105"},{"size":2289,"mtime":1611071221800,"results":"168","hashOfConfig":"105"},{"size":1489,"mtime":1611071221800,"results":"169","hashOfConfig":"105"},{"size":530,"mtime":1611071221800,"results":"170","hashOfConfig":"105"},{"size":844967,"mtime":1611332018536,"results":"171","hashOfConfig":"105"},{"size":1159,"mtime":1610964973837,"results":"172","hashOfConfig":"105"},{"size":1620,"mtime":1611246367532,"results":"173","hashOfConfig":"105"},{"size":13819,"mtime":1611062607070,"results":"174","hashOfConfig":"105"},{"size":2790,"mtime":1611100919198,"results":"175","hashOfConfig":"105"},{"size":5324,"mtime":1611319180912,"results":"176","hashOfConfig":"105"},{"size":3747,"mtime":1611062615670,"results":"177","hashOfConfig":"105"},{"size":1745,"mtime":1611185743296,"results":"178","hashOfConfig":"105"},{"size":5047,"mtime":1611159022018,"results":"179","hashOfConfig":"105"},{"size":1369,"mtime":1610715444721,"results":"180","hashOfConfig":"105"},{"size":591,"mtime":1610715904657,"results":"181","hashOfConfig":"105"},{"size":5299,"mtime":1611161346402,"results":"182","hashOfConfig":"105"},{"size":18418,"mtime":1611184124216,"results":"183","hashOfConfig":"105"},{"size":13661,"mtime":1611312492583,"results":"184","hashOfConfig":"105"},{"size":4619,"mtime":1611193857277,"results":"185","hashOfConfig":"105"},{"size":966,"mtime":1611310676263,"results":"186","hashOfConfig":"105"},{"size":175,"mtime":1611228282848,"results":"187","hashOfConfig":"105"},{"size":5142,"mtime":1611231004906,"results":"188","hashOfConfig":"105"},{"size":185,"mtime":1611228282846,"results":"189","hashOfConfig":"105"},{"size":2143,"mtime":1611230918437,"results":"190","hashOfConfig":"105"},{"size":1229,"mtime":1610990751246,"results":"191","hashOfConfig":"105"},{"size":7207,"mtime":1611246307736,"results":"192","hashOfConfig":"105"},{"size":2021,"mtime":1611246364964,"results":"193","hashOfConfig":"105"},{"size":4798,"mtime":1611246367530,"results":"194","hashOfConfig":"105"},{"size":2387,"mtime":1610990751245,"results":"195","hashOfConfig":"105"},{"size":2375,"mtime":1610990751241,"results":"196","hashOfConfig":"105"},{"size":10728,"mtime":1611008482428,"results":"197","hashOfConfig":"105"},{"size":598,"mtime":1610990751244,"results":"198","hashOfConfig":"105"},{"size":1182,"mtime":1611247881478,"results":"199","hashOfConfig":"105"},{"size":2311,"mtime":1611255313320,"results":"200","hashOfConfig":"105"},{"size":2239,"mtime":1611325450792,"results":"201","hashOfConfig":"105"},{"size":1716,"mtime":1611324734758,"results":"202","hashOfConfig":"105"},{"size":1805,"mtime":1611332452800,"results":"203","hashOfConfig":"105"},{"size":7108,"mtime":1611332902161,"results":"204","hashOfConfig":"105"},{"size":1181,"mtime":1610964973834,"results":"205","hashOfConfig":"105"},{"size":7821,"mtime":1611333657725,"results":"206","hashOfConfig":"105"},{"size":1161,"mtime":1610964973813,"results":"207","hashOfConfig":"105"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"211"},"7h7z42",{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"211"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"211"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"211"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"241"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"245"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"228"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"335"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"335"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"335"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"335"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"335"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"211"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"365"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"211"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"211"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"211"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"384"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"224"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"224"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"397"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"211"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"211"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"211"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"211"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"211"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"211"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"211"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"211"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"211"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"211"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"365"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"438","messages":"439","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"441"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"211"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/App.tsx",["457","458","459","460","461"],"\nimport './app.scss';\nimport React, {useState} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Header\nimport CarbonHeader from './components/header/carbon-header/CarbonHeader'; \nimport MaterialHeader from './components/header/material-header/MaterialHeader';  \n// Pages\nimport Builder3DPage from './page/builder3D-page/Builder3DPage'; \nimport ComponentInFocusPage from './page/component-in-focus-page/ComponentInFocus'; \nimport AnalyticsPage from './page/analytics-page/AnalyticsPage'; \n\n\n//Global state: setup scene graph -> \n\n\n\ninterface AppProps {\n}\n\n\nconst App = ({}: AppProps) => {\n\n\n\n  \n\n return (\n\n<Router>\n\n  {/* <MaterialHeader/> */}\n\n\n  <Switch>\n     {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            \n      <Route path=\"/infocus\" component={ComponentInFocusPage} /> \n\n      <Route path='/analytics' component={AnalyticsPage} />\n\n      <Route path=\"/\" component={Builder3DPage} /> \n\n  </Switch>        \n  \n\n</Router>\n\n )\n}\nexport default App;",["462","463"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/client.ts",["464"],"import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';\n// import { onError } from \"@apollo/client/link/error\";\n\n// Instantiate required constructor fields\nconst httpLink = createHttpLink({\n    uri: \"https://api.baseql.com/airtable/graphql/appgIAAYooKJM4hyP\"\n});\n\n// const errorLink = onError(({ graphQLErrors, networkError }) => {\n//     if (graphQLErrors)\n//       graphQLErrors.map(({ message, locations, path }) =>\n//         console.error(\n//           `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n//         )\n//       );\n//   });\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: httpLink,\n});\n\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/index.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/middleware/logger.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/index.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/API/graphqlAPI.ts",["465","466","467","468","469","470","471","472","473","474"],"// https://kimmosaaskilahti.fi/blog/2019-08-29-fp-ts/\n// https://dev.to/gnomff_65/fp-ts-sequencet-and-sweet-sweet-async-typed-fp-5aop\n// https://github.com/ksaaskil/fp-gitlab-example\n\n\nimport { ApolloError, ApolloQueryResult, ApolloClient, gql, DocumentNode, NormalizedCacheObject} from '@apollo/client'; \nimport { GET_PROJECT } from './query'; \n\n\nimport { flatten, map } from 'fp-ts/lib/Array'\nimport * as TE from 'fp-ts/lib/TaskEither'\nimport * as E from 'fp-ts/lib/Either'\nimport * as T from 'fp-ts/lib/Task'\nimport { sequenceT } from 'fp-ts/lib/Apply'\nimport { pipe } from 'fp-ts/lib/pipeable'\nimport { flow } from 'fp-ts/lib/function'\nimport { failure } from 'io-ts/lib/PathReporter'\nimport * as t from 'io-ts'\n\nimport { Users, Answer } from './types/static-types'; \nimport { users, answer } from './types/iots-types'; \n\nimport { ProjectArray as projectArrayCodec } from './types/t'; \nimport { client } from '../client';\n\nconst query = gql`query MyQuery {\n  projects(id: \"recDSfaVc2clkOcLR\") {\n    id\n    projectOwner {\n      id\n      ownerName\n      ownerTasteProfile {\n        desireColour\n        desireColourMeta\n        id\n      }\n    }\n    projectProperty {\n      id\n      propertyAddress\n      propertyBoundary\n      propertyBuilding1 {\n        buildingEnergyPerformance {\n          energyAirflowExchange\n          energyDoorUValue\n          energyFloorUValue\n          energyMeanTemperatureExternal\n          energyRoofUValue\n          energyRooflightUValue\n          energySpaceCoolingType\n          energyTariffElectricity\n          energySpaceHeatingType\n          energyTariffGas\n          energyTempInternalAdjusted\n          energyVentilationType\n          energyWallUValue\n          energyWaterHeatingType\n          id\n          energyWindowUValue\n        }\n        buildingFoundationType\n        buildingName\n        buildingNumberBathrooms\n        buildingPattern {\n          id\n          patternBarcode\n          patternRating\n          patternSubassembliesUsed {\n            id\n            subassemblyAssemblyTimeInDays\n            subassemblyBuildingSystem\n            subassemblyDesigner\n            subassemblyLocationClass\n            subassemblyName\n            subassemblyPitchedAngle1\n            subassemblyPitchedAngle2\n            subassemblyPrimaryMaterial\n            subassemblyRoofPitchType\n            subassemblySpansNStories\n            subassemblyThickness\n            subassemblyUnitCost\n            subassemblyXDimension\n            subassemblyYDimension\n            subassemblyZDimension\n          }\n        }\n        id\n      }\n      propertyBuilding2\n      propertyBuilding3\n      propertyDescription\n      propertyName\n      propertyNorthing\n      propertyType\n      propertyUprn\n    }\n  }\n}\n`\nconst query2 = gql`query MyQuery {\n  projects(id: \"recDSfaVc2clkOcLR\") {\n    id\n    projectOwner {\n      id\n      ownerName\n      ownerTasteProfile {\n        desireColour\n        desireColourMeta\n        id\n      }\n    }\n    projectProperty {\n      id\n      propertyAddress\n      propertyBoundary\n      propertyBuilding1 {\n        buildingEnergyPerformance {\n          energyAirflowExchange\n          energyDoorUValue\n          energyFloorUValue\n          energyMeanTemperatureExternal\n          energyRoofUValue\n          energyRooflightUValue\n          energySpaceCoolingType\n          energyTariffElectricity\n          energySpaceHeatingType\n          energyTariffGas\n          energyTempInternalAdjusted\n          energyVentilationType\n          energyWallUValue\n          energyWaterHeatingType\n          id\n          energyWindowUValue\n        }\n        buildingFoundationType\n        buildingName\n        buildingNumberBathrooms\n        buildingPattern {\n          id\n          patternBarcode\n          patternRating\n          patternSubassembliesUsed {\n            id\n            subassemblyAssemblyTimeInDays\n            subassemblyBuildingSystem\n            subassemblyDesigner\n            subassemblyLocationClass\n            subassemblyName\n            subassemblyPitchedAngle1\n            subassemblyPitchedAngle2\n            subassemblyPrimaryMaterial\n            subassemblyRoofPitchType\n            subassemblySpansNStories\n            subassemblyThickness\n            subassemblyUnitCost\n            subassemblyXDimension\n            subassemblyYDimension\n            subassemblyZDimension\n          }\n        }\n        id\n      }\n      propertyBuilding2\n      propertyBuilding3\n      propertyDescription\n      propertyName\n      propertyNorthing\n      propertyType\n      propertyUprn\n    }\n  }\n}\n`\n\n\n\n//Convert our api call to a TaskEither\nconst graphqlGet = (\n  client: ApolloClient<NormalizedCacheObject>, \n  query: DocumentNode\n) => TE.tryCatch<Error, ApolloQueryResult<any>>(\n  () => client.query({query: query }),\n  reason => new Error(String(reason))\n)\n\n//function to decode an unknown into an A\nconst decodeWith = <A>(decoder: t.Decoder<unknown, A>) =>\n  flow(\n    decoder.decode,\n    E.mapLeft(errors => new Error(failure(errors).join('\\n'))),\n    TE.fromEither\n  )\n\n//takes a graphql client, a query, and a decoder and gives you back an Either<Error, A>\nexport const graphqlGetEither = <A>(\n  client: ApolloClient<NormalizedCacheObject>, \n  query:DocumentNode, \n  codec:t.Decoder<unknown, A>\n) => pipe(\n  graphqlGet(client, query),\n  TE.map(x => x.data),\n  // TE.chain(decodeWith(codec))\n);\n\n\n// const getAnswer = pipe(\n//   TE.right({ans: 42}),\n//   TE.chain(decodeWith(answer))\n// )\nexport const exampleQuery = graphqlGetEither(client, query2, projectArrayCodec)\n\n\nconst onRunQueryLeft = (e: Error): T.Task<unknown> => {\n  return T.of(e.message)\n}\nconst onRunQueryRight = (a: [any]): T.Task<unknown> => {\n  return T.of(a)\n}\nexport const runQuery = pipe(\n  sequenceT(TE.taskEither)(\n    graphqlGetEither(client, query2, projectArrayCodec)\n  ),\n  TE.fold(\n    onRunQueryLeft,\n    onRunQueryRight,\n  ),\n)();\n\n\n\n\n\n\n\n// runProgram.then(console.log)\n\n\n/*\nexport const runProgram = pipe(\n  sequenceT(TE.taskEither)(\n    graphqlGetEither(client, query, projectCodec)\n  ),\n\n  TE.fold(\n    (errors) => T.of(errors.message),\n    ([project1]) => T.of(`\\nThe answer was ${project1} for all of you`),\n  )\n)();\n*/\n\n\n\n// const tryCatch = <L, R>(f: () => Promise<R>): Observable<Either<L, R>> =>\n//   defer(f).pipe(\n//     map((r) => right<L, R>(r)),\n//     catchError((l) => of(left<L, R>(l)))\n//   );",["475","476"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/modelUtils.tsx",["477","478","479","480","481","482","483","484","485"],"import React, { Fragment, useRef, useEffect, useState, useCallback, useContext, useMemo } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport * as THREE from 'three'\nimport { OrbitControls } from '@react-three/drei/OrbitControls'\nimport { useThree } from 'react-three-fiber'\n\n\n////////////////////\n//  Types\n///////////////////\n\n\nimport { MouseEvent, PointerEvent, WheelEvent } from 'react-three-fiber/canvas'\n\nexport type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]\nexport type Overwrite<T, O> = Omit<T, NonFunctionKeys<O>> & O\n/**\n * Allows using a TS v4 labeled tuple even with older typescript versions\n */\nexport type NamedArrayTuple<T extends (...args: any) => any> = Parameters<T>\n\n/**\n * If **T** contains a constructor, @see ConstructorParameters must be used, otherwise **T**.\n */\ntype Args<T> = T extends new (...args: any) => any ? ConstructorParameters<T> : T\n\nexport type Euler = THREE.Euler | Parameters<THREE.Euler['set']>\nexport type Matrix4 = THREE.Matrix4 | Parameters<THREE.Matrix4['set']>\nexport type Vector2 = THREE.Vector2 | Parameters<THREE.Vector2['set']>\nexport type Vector3 = THREE.Vector3 | Parameters<THREE.Vector3['set']>\nexport type Color = THREE.Color | number | string // Parameters<T> will not work here because of multiple function signatures in three.js types\nexport type Layers = THREE.Layers | Parameters<THREE.Layers['set']>\nexport type Quaternion = THREE.Quaternion | Parameters<THREE.Quaternion['set']>\n\nexport type EventHandlers = {\n  onClick?: (event: MouseEvent) => void\n  onContextMenu?: (event: MouseEvent) => void\n  onDoubleClick?: (event: MouseEvent) => void\n  onPointerUp?: (event: PointerEvent) => void\n  onPointerDown?: (event: PointerEvent) => void\n  onPointerOver?: (event: PointerEvent) => void\n  onPointerOut?: (event: PointerEvent) => void\n  onPointerMove?: (event: PointerEvent) => void\n  onPointerMissed?: (event: React.MouseEvent) => void\n  onWheel?: (event: WheelEvent) => void\n}\n\nexport interface NodeProps<T, P> {\n  /** Attaches this class onto the parent under the given name and nulls it on unmount */\n  attach?: string\n  /** Appends this class to an array on the parent under the given name and removes it on unmount */\n  attachArray?: string\n  /** Adds this class to an object on the parent under the given name and deletes it on unmount */\n  attachObject?: NamedArrayTuple<(target: string, name: string) => void>\n  /** Constructor arguments */\n  args?: Args<P>\n  children?: React.ReactNode\n  ref?: React.Ref<React.ReactNode>\n  key?: React.Key\n  onUpdate?: (self: T) => void\n}\n\nexport type Node<T, P> = Overwrite<Partial<T>, NodeProps<T, P>>\n\nexport type Object3DNode<T, P> = Overwrite<\n  Node<T, P>,\n  {\n    position?: Vector3\n    up?: Vector3\n    scale?: Vector3\n    rotation?: Euler\n    matrix?: Matrix4\n    quaternion?: Quaternion\n    layers?: Layers\n    dispose?: (() => void) | null\n  }\n> &\n  EventHandlers\n\n\nexport type MeshProps = Object3DNode<THREE.Mesh, typeof THREE.Mesh>\n\n\n\n\n\nexport const useHover = () => {\n    const [hovered, setHovered] = useState<boolean>(); \n    const [active, setActive] = useState<boolean>(); \n\n    useEffect(()=> void (document.body.style.cursor = hovered ? 'pointer' : 'auto'))\n\n    const hover = useCallback((e: PointerEvent) => (e.stopPropagation(), setHovered(true)), [])\n    const unhover = useCallback((e) => setHovered(false), [])\n\n    return [{\n        onClick: (e: MouseEvent) => {\n          e.stopPropagation(); \n          setActive(!active)\n        },\n        onPointerOver: (e: PointerEvent) => hover(e),\n        onPointerOut: (e: PointerEvent) => unhover(e),\n        'material-color': hovered ? 'pink' : 'gray',\n        'material-transparent': active ? 'false': 'true',\n        'material-opacity': active ? 0.1 : 1\n      }, hovered]\n  }\n  \n\n\n//   const camContext = React.createContext({})\n\n//   function Controls({ children }: {children: any}) {\n//   const { gl, camera } = useThree()\n//   const api = useState(true)\n//   return (\n//     <Fragment>\n//       <OrbitControls args={[camera, gl.domElement]} enableDamping enabled={api[0]} />\n//       <camContext.Provider value={api}>{children}</camContext.Provider>\n//     </Fragment>\n//   )\n// }",["486","487"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Editor.tsx",["488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507"],"\nimport React, { useRef, VFC, Suspense } from 'react';\nimport { useThree, extend, ReactThreeFiber, useFrame, Canvas } from 'react-three-fiber';\nimport {OrbitControls, Html, Loader, useContextBridge, Environment, ContactShadows } from '@react-three/drei';\nimport { Light } from './Light'; \nimport { Perf } from 'r3f-perf';\nimport * as THREE from 'three'; \nimport ClippingSlider from './ClippingSlider/ClippingSlider'; \nimport { useSpring } from 'react-spring'; \n//Models\nimport { ContainerMesh } from './Container/MeshContainer'\n\n// Icons\nimport Icon from '@material-ui/core/Icon';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport { Object3D, Vector3 } from 'three';\n\n// Redux Context\nimport { ReactReduxContext } from 'react-redux';\n\n// SceneGraph Object\nimport { SceneGraph } from './SceneGraph'\nimport { truncateSync } from 'fs';\n\nimport { ContainerGroupMesh } from './Container/GroupContainer'; \n\n{/* <Icon>\n  <FullscreenIcon/>\n</Icon> */}\n\n\n/////\n// Camera\n/////\n\nconst Dolly = (targetObject: THREE.Object3D): void => {\n  // This one makes the camera move in and out\n  useFrame(({ clock, camera }) => {\n    // Move camera to a point where you can more easily see the object under inspection\n    // camera.position.z = 50 + Math.sin(clock.getElapsedTime()) * 30\n    // Look at the object under isnpection\n    const {x,y,z} = targetObject.position; \n    camera.lookAt(new Vector3(x,y,z)) \n\n    // This process should be animated\n    // just use .lerp ( x : Float, y : Float, t : Float ) : Float ? \n\n    // camera.updateProjectionMatrix()\n\n  })\n}\n\n\n// // alternate \n// const Controls = (targetObject: Object3D) => {\n//   const { gl, camera } = useThree()\n  \n  \n\n//   const [props, set ] \n//   = useSpring<{\n//     from: {x: number, y: number, z: number};\n//     to: { x: number, y: number, z: number };\n//     onFrame: (...args: any) => void;\n//     reverse: boolean;\n//     onRest: (...args: any) => void;\n//   }>(\n//     () => (\n//       {\n//         from: {x: camera.position.x, y: camera.position.y, z: camera.position.z}, \n//         to: {x: targetObject.position.x, y: targetObject.position.y, z: targetObject.position.z},\n//         onFrame: ({to}: {to : {x: number, y: number, z: number}}) => { \n//           camera.position.x = to.x; \n//           camera.position.y = to.y; \n//           camera.position.z = to.z; \n//         },\n//         reverse: false,\n//         onRest: () => {}\n//       }\n//     )\n//   )\n\n\n//   useSpring<{\n//     from: unknown;\n//     z: unknown;\n//     onFrame: (...args:any) => void;\n//   }>({\n//     from: {\n//       z: 300\n//     },\n//     z: 2,\n//     onFrame: ({ z }) => {\n//       camera.position.z = z\n//     }\n//   })\n\n//   return <OrbitControls target={[0, 0, 0]} args={[camera, gl.domElement]} />\n// }\n\n\n\n\n//////////////////////////////////\n// Scene\n//////////////////////////////////\n\n\n\nconst EditorScene = () => {\n\n  const orbitControlsRef = useRef<OrbitControls>();\n  console.log(orbitControlsRef)\n\n  const {\n    camera,\n    gl: { domElement },\n    scene,            // Default scene\n    size,             // Bounds of the view (which stretches 100% and auto-adjusts)\n    viewport,         // Bounds of the viewport in 3d units + factor (size/viewport)\n    aspect,           // Aspect ratio (size.width / size.height)\n    invalidate,       // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    setDefaultCamera  // Sets the default camera\n  } = useThree()\n  \n\n  return (\n    <>\n    {/**Sets up a global cubemap, which affects scene.environment, and optionally scene.background. A selection of presets from \n     * HDRI Haven are available for convenience. */}\n     {/* <Environment preset=\"warehouse\" /> */}\n      \n      {/* <ContactShadows\n          rotation={[Math.PI / 2, 0, 0]}\n          position={[0, -1.6, 0]}\n          width={15}\n          height={15}\n          blur={2.5}\n          far={1.6}\n        /> */}\n\n        \n    \n      <Light/>\n      {/* <mesh \n        name=\"ground\" \n        rotation={[-Math.PI / 2, 0, 0]} \n        receiveShadow={true}\n      >\n          <planeBufferGeometry attach=\"geometry\" args={[50, 50, 1, 1]} />\n          <shadowMaterial\n            attach=\"material\"\n            color={0}\n            opacity={0.9}\n            side={THREE.DoubleSide}\n          />\n          <meshBasicMaterial color=\"gray\" side={THREE.DoubleSide} attach=\"material\" />\n          \n      </mesh>   */}\n          \n       \n       \n\n      <Suspense\n        fallback={\n          <Html center>\n            <Loader />\n          </Html>\n        }>\n          {/** PUT MODELS HERE  */}\n          {/** Create a coordinate system for grid. Place the containers/voxels into grid with given rotations  */}\n          <ContainerMesh position={[0,1,0]}/>\n          {/* <SceneGraph/> */}\n          {/* <ContainerGroupMesh/> */}\n\n\n\n\n\n\n\n\n\n\n\n\n\n          {/*******************/}\n      </Suspense>\n\n      <OrbitControls \n        //Get ref from the store?\n        ref={orbitControlsRef} \n        enablePan={true} \n        enableRotate={true} \n        zoomSpeed={0.5}\n        args={[camera, domElement]} \n        target={[0, 3, 0]}\n        // enableDamping\n        // dampingFactor={0.2}\n        rotateSpeed={0.7}\n        maxPolarAngle={1.49}\n        enabled\n        minDistance={5}\n        maxDistance={100}\n      />   \n      {/* <Controls/> */}\n      {/* <Dolly /> */}\n      <Perf />\n\n    </>\n  );\n};\n\n\n//////////////////////////////////\n// Editor\n//////////////////////////////////\n\n\nconst Editor: VFC = () => {\n\n \n  // contect bridge needed as workaround due to: https://github.com/pmndrs/react-three-fiber/issues/43\n  const ContextBridge = useContextBridge(ReactReduxContext)\n\n  \n  return (\n  <>\n    {/* <ClippingSlider /> */}\n\n\n    <Canvas\n          colorManagement\n          shadowMap={{ enabled: true, type: THREE.PCFSoftShadowMap }}\n          camera={{ fov: 45, position: [8, 12, 14] }}\n          pixelRatio={window.devicePixelRatio}\n          gl={{ antialias: true }}\n    >\n      <ContextBridge>\n\n\n        <EditorScene />\n\n       \n      </ContextBridge>\n\n    </Canvas>\n   \n\n\n    {/* <a href=\"https://www.opensystemslab.io/\" className=\"top-left\">\n      Open Systems Lab\n    </a>\n    <a href=\"https://www.notion.so/Housing-4-0-Energy-e83e0e7f455a4a419463619a29c4cf51\" className=\"bottom-right\">\n      More Information\n    </a> */}\n\n  </>\n\n  );\n};\n\nexport default Editor;\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Light.tsx",["508","509"],"import React, {useRef} from 'react';\nimport { Vector3 } from 'three'\nimport { useThree } from 'react-three-fiber'; \n\n\nexport const Light = () => {\n    return( \n    <>\n     <directionalLight \n          castShadow = {true}\n          position={new Vector3(0,200,0)} \n          intensity={0.1} \n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={500}\n          shadow-camera-left={-100}\n          shadow-camera-right={100}\n          shadow-camera-top={-100}\n          shadow-camera-bottom={100}\n        />\n        <spotLight position={[40, 40, 20]} penumbra={1} castShadow />\n        <ambientLight intensity = {0.1} />\n        <pointLight position={new Vector3(30,30,60)} intensity={0.2}/>\n        <pointLight position={new Vector3(-30,-30,60)} intensity={0.5}/>\n    </>\n      \n    )\n  }\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Box.tsx",["510","511"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\n\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport { useHover } from './modelUtils'; \nimport TransformControls from '../components/3d-editor/TransformControls'; \n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Box_1: THREE.Mesh\n    Box_2: THREE.Mesh\n  }\n  materials: {\n    FrontColor: THREE.MeshStandardMaterial\n    BackColor: THREE.MeshStandardMaterial\n  }\n}\n\ninterface ModelProps extends Partial<JSX.IntrinsicElements['mesh']>{\n  // useHover: typeof useHover\n}\n\n\nexport const Box = (props: ModelProps) => {\n  const meshRef = useRef<THREE.Mesh>()\n  let [bindHover, hovered] = useHover()\n\n  const { nodes, materials } = useGLTF('/Box.glb') as GLTFResult\n  return (\n        <React.Fragment>\n          <mesh ref = {meshRef} {...props} dispose={null} name={`${props.key}-1`} material={materials.FrontColor} geometry={nodes.Box_1.geometry} {...bindHover} />\n          <mesh ref = {meshRef} {...props} dispose={null} name={`${props.key}-2`} material={materials.BackColor} geometry={nodes.Box_2.geometry} {...bindHover}/>\n        </React.Fragment>\n  )\n}\n\nuseGLTF.preload('/Box.glb')\n\n\n",["512","513"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms/MiddleLongBlock.tsx",[],["514","515"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/ClippingSlider/ClippingSlider.tsx",["516","517"],"import Slider from \"@material-ui/core/Slider\";\nimport anime from \"animejs\";\nimport React, { useState } from \"react\";\nimport * as THREE from \"three\";\n\nconst DEFAULT = 8;\n\nconst marks = [\n  {\n    value: 8,\n    label: \"Roof\"\n  },\n  {\n    value: 4,\n    label: \"First Floor\"\n  },\n  {\n    value: 1,\n    label: \"Ground Floor\"\n  }\n];\n\nexport const clipPlanes = [\n  new THREE.Plane(new THREE.Vector3(0, -1, 0), DEFAULT)\n];\n\nconst ClippingSlider = () => {\n  const [val, setVal] = useState(DEFAULT);\n\n  return (\n    <div id=\"clipping-slider\">\n      <Slider\n        orientation=\"vertical\"\n        value={val}\n        aria-labelledby=\"vertical-slider\"\n        marks={marks}\n        max={8}\n        min={1}\n        step={1}\n        // onChange = {\n        //   (event: React.ChangeEvent<{}>, value: number) => {\n        //     if (value !== val) {\n        //       const duration = Math.abs(val - value) * 300;\n        //       anime({\n        //         duration,\n        //         constant: value,\n        //         targets: clipPlanes[0],\n        //         easing: \"easeOutElastic(1,0.9)\"\n        //       });\n  \n        //       setVal(value);\n        //     }\n        //   }\n        // }\n      />\n    </div>\n  );\n};\n\nexport default ClippingSlider;\n",["518","519"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/index.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A1.tsx",["520"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\n\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { Vector3 } from 'three'\nimport { useHover } from '../modelUtils'; \n\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    ['A-1.001_1']: THREE.Mesh\n    ['A-1.001_2']: THREE.Mesh\n  }\n  materials: {\n    ['diffuse_0_0_0_255.001']: THREE.MeshStandardMaterial\n    ['Wood-3 Ver.001']: THREE.MeshStandardMaterial\n  }\n}\n\nexport default function Model(props: JSX.IntrinsicElements['group']) {\n  const group = useRef<THREE.Group>()\n  const { nodes, materials } = useGLTF('/Swift/A1.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group name=\"Scene\">\n        <group name=\"A-1001\" rotation={[Math.PI / 2, 0, 0]} > {/**We move the mesh in the z-axis by 1.2 in order to create a more easily referenced starting position */}\n          <mesh {...useHover()} name=\"A-1.001_1\" material={materials['diffuse_0_0_0_255.001']} geometry={nodes['A-1.001_1'].geometry} />\n          <mesh {...useHover()} name=\"A-1.001_2\" material={materials['Wood-3 Ver.001']} geometry={nodes['A-1.001_2'].geometry} />\n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/Swift/A1.glb')\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B6.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/C4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/D4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/E4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B7.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G6.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/F2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/G7.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/B1.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/A2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H5.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H2.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H3.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Swift/H4.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/index.ts",[],["521","522"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Graph.ts",["523","524","525","526","527","528","529","530","531","532","533","534","535","536"],"// import * as Re from 'fp-ts/Record'; \nimport * as S from 'fp-ts/Semigroup'; \nimport * as F from 'fp-ts/function'; \nimport * as A from 'fp-ts/Array'; \nimport * as O from 'fp-ts/Option'; \nimport * as _Map from 'fp-ts/Map'; \nimport * as _Set from 'fp-ts/Set'; \nimport { assoc, prop } from './utility'; \nimport * as L from 'monocle-ts'; \nimport { getLenses } from 'io-ts-types'; \nimport * as t from 'io-ts/Type'; \nimport { IBuildingComponent } from './Component'; \nimport { swiftComponentLibrary, swiftComponentRecord } from '../MetaData/swiftComponentData'; \nimport { IVertex, IVertexData, makeVertex} from './Vertex'\nimport { IEdge, IEdgeData, makeEdge } from './Edge'\n\n\n\n///////////////////////////////////////////////////////////\n/// Constants \n///////////////////////////////////////////////////////////\nexport const ROOT_NODE_KEY = \"_root\";\n\n\n///////////////////////////////////////////////////////////\n/// Types \n///////////////////////////////////////////////////////////\n\nexport interface IGraph<V, E> {\n    vertices: IVertex<V>[],\n    edges: IEdge<E>[],\n}\nexport type AdjacencyMap<A> = Map<A, Set<A>>;  // for us: A = IVertex<IVertexData>\n\n\n///////////////////////////////////////////////////////////\n/// Constructor\n///////////////////////////////////////////////////////////\n\n/**\n* () -> IGraph\n* \n* Generates new empty graph\n* @returns IGraph Graph\n*/\nexport const makeGraph = <V,E>(\n    vertices?: IVertex<V>[],\n    edges?: IEdge<E>[]\n): IGraph<V,E> => ({\n    vertices: vertices? vertices: new Array<IVertex<V>>(),\n    edges: edges? edges: new Array<IEdge<E>>()\n})\n\n\n///////////////////////////////////////////////////////////\n/// Methods \n///////////////////////////////////////////////////////////\n\n/**\n* getVertexHash :: IVertex -> String\n* \n* Hashing function for IVertex. Can be customized.\n* @param IVertex Vertex\n* @return String Vertex's hash\n*/\nexport const getVertexHash = <V>(vertex: IVertex<V>) => vertex.vertexID\n\n/**\n* getEdgeHash :: IEdge -> String\n* \n* Hashing function for IEdge. Can be customized.\n* @param IEdge Edge\n* @return String Edge's hash\n*/\nexport const getEdgeHash =  <E>(edge: IEdge<E>) => `${edge.link[0]} - ${edge.link[1]}`\n\n/**\n* edgeHash :: () -> Array<IVertex>\n* \n* Returns a list of all vertices in a graph\n* @params IGraph Graph\n* @return Array<IVertex> List of all Vertices\n*/\nexport const getVertices = L.Lens.fromProp<IGraph<IVertexData, IEdgeData>>()('vertices').get\n// or alteernatively: const getVertices = prop('vertices')\n\n/**\n* getEdges :: IGraph -> Array<IEdge>\n* \n* Returns a list of all edges in a graph\n* @params IGraph Graph\n* @return Array<IEdge> List of all Edges\n*/\nexport const getEdges = L.Lens.fromProp<IGraph<IVertexData, IEdgeData>>()('edges').get\n// or alternaitvely: const getEdges = prop('edges')\n\n\n /**\n* addVertex :: IVertex -> IGraph -> IGraph\n* \n* Adds Vertex to the graph\n* @param IVertex Vertex\n* @param IGraph Graph\n* @return IGraph Graph\n*/\n export const addVertex = (vertex: IVertex<IVertexData>, g: IGraph<IVertexData,IEdgeData>): IGraph<IVertexData,IEdgeData>  => {\n    // Below 3 lines is a more ramda-esque approach\n    //const vertices = getVertices(g); \n    // const verticesWithAdditionalVertex = A.snoc(vertices, vertex); \n    // return assoc('vertices', verticesWithAdditionalVertex, g);\n    const graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n        vertices: A.getMonoid<IVertex<IVertexData>>(), \n        edges: A.getMonoid<IEdge<IEdgeData>>()\n    }); \n    return graphSemiGroup.concat(\n        g, \n        makeGraph([vertex], new Array<IEdge<IEdgeData>>())\n    ) \n    /// ^ advantage of semigroup approach is that we can add conditions to semigroup, such that\n    // we don't have repeated node ids etc. \n}\n\n /**\n* getVertexByHash :: String -> IGraph -> IVertex\n* \n* Return Vertex by Hash\n* @param String Vertex's hash\n* @param IGraph Graph\n* @return IVertex Vertex if exists or undefined\n*/\n\nexport const getVertexByHash = (vertexHash: String, g: IGraph<IVertexData, IEdgeData>)\n:O.Option<IVertex<IVertexData>[]> => {\n    // type Predicate<A> = (a: A) => boolean\n    const predicate: F.Predicate<IVertex<IVertexData>> = (a) => a.vertexID === vertexHash\n    const filtered = A.filter(predicate)(getVertices(g))\n    return filtered[0] === undefined ? O.none : O.some(filtered)\n}\n\nexport const addEdge = (edge: IEdge<IEdgeData>, g: IGraph<IVertexData, IEdgeData>)\n: IGraph<IVertexData, IEdgeData> => {\n    const graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n        vertices: A.getMonoid<IVertex<IVertexData>>(), \n        edges: A.getMonoid<IEdge<IEdgeData>>()\n    }); \n    return graphSemiGroup.concat(\n        g, \n        makeGraph(new Array<IVertex<IVertexData>>(), [edge])\n    ) \n}\nexport const getEdgesByHash = (edgeHash: [string,string], g: IGraph<IVertexData, IEdgeData>)\n:O.Option<IEdge<IEdgeData>[]> => {\n     // type Predicate<A> = (a: A) => boolean\n     const predicate: F.Predicate<IEdge<IEdgeData>> = (a) => a.link === edgeHash; //note: this is only for direcred graphs...\n     const filtered = A.filter(predicate)(getEdges(g))\n     return filtered[0] === undefined ? O.none : O.some(filtered)\n\n}\n\n /**\n* getNeightborEdgesFromVertexHash :: String -> IGraph -> Array<IEdge>\n* \n* Get all neightboring Edges from Vertex by Vertex Hash\n* @param String Vertex's Hash\n* @param IGraph Graph\n* @result Array<IEdge> Matched Edges from the Vertex\n*/\nexport const getNeightborEdgesFromVertexHash = (\n    vertexHash: String, \n    g: IGraph<IVertexData, IEdgeData>\n): O.Option<IEdge<IEdgeData>[]> =>{\n    return F.pipe(\n    //Likely to be far more edges than vertices. Check for existence of vertex first\n    getVertexByHash(vertexHash, g),\n    O.fold(\n        () => {return O.none},\n        (r) => {\n            const predicate: F.Predicate<IEdge<IEdgeData>> = (a) => a.link[0] === vertexHash; //note: this is only for direcred graphs...\n            const filtered = A.filter(predicate)(getEdges(g))\n            return filtered[0] === undefined ? O.none : O.some(filtered)\n        }\n        )\n    )\n}\n\n\n\n// For each type of edge, we create an adjacency matrix\n// We need one ajacency map for each type of edge... 'childOf', 'parentOf', 'neighbourOf'\n// export const getAdjacencyMap = (g: IGraph<IVertexData, IEdgeData>) => {\n\n//     // Depending om the edge type, we return a different adjacency matrix: \n\n//     const vertices = getVertices(g); \n//     const edges = getEdges(g); \n   \n//     //const m = monoidSetMap(eqVertex).concat()\n//     const s = new Set<IVertex<IVertexData>>()\n//     for (const v of vertices){\n//         for (const e of edges){\n\n//         }\n//     }\n// }\n\n///////////////////////////////////////////////////////////\n/// Semigroups \n///////////////////////////////////////////////////////////\n\nconst vertexSemiGroup = S.getObjectSemigroup<IVertex<IVertexData>>(); \nconst edgeSemiGroup = S.getObjectSemigroup<IEdge<IEdgeData>>(); \n// see: https://dev.to/gcanti/getting-started-with-fp-ts-semigroup-2mf7\n// const getGraphSemiGroup = <V,E>() => {\n//     return S.getStructSemigroup({\n//     // accumulate things\n//     vertices: A.getMonoid<IVertex<V>>(), // <= getMonoid returns a Semigroup \n//     edges: A.getMonoid<IEdge<E>>()\n// })}; \nconst graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n    vertices: A.getMonoid<IVertex<IVertexData>>(), \n    edges: A.getMonoid<IEdge<IEdgeData>>()\n}); \n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Edge.ts",["537","538","539","540","541","542","543"],"\nimport * as F from 'fp-ts/function'; \nimport * as Eq from 'fp-ts/Eq'\nimport { SwiftModule } from '../MetaData/swiftComponentData'\nimport {componentBonds, tBondID, Bond, BondID } from './Bond'; \nimport { v4 as uuidv4 } from 'uuid';\nimport { IVertex } from './Vertex';\n\n//   receptor = binding => effector function\n// If a block is connected to another block, this must update the state of the original block? \n// lock & key ? receptor & antigen?  \n\n\n\n\nexport interface IEdge<E> {\n    link: [string,string],\n    data: E; \n}\n\nexport type EdgeLogic = \n| {_tag: 'childOf' }  \n| {_tag: 'parentOf' }\n| {_tag: 'neighbourOf', bond: Bond}\n// | {_tag: 'x', bond: Bond -> will relate how the two components are joined together. i.e the transformation}\n\nexport interface IEdgeData{\n    // All our edges will be directed to keep things simple. \n\n    // type Predicate<A> = (a: A) => boolean\n    // predicate is defined by truth tables, which are designer set. \n    edgeLogic: EdgeLogic\n\n}\n\n//Constructors:\n\nexport const makeEdge = <E, V>(\n    vertex1: IVertex<V>,\n    vertex2: IVertex<V>,\n    data: E\n): IEdge<E> => {\n    return {\n      link: [vertex1.vertexID, vertex2.vertexID], data: data\n    }\n}\n\n\nexport const matchEdge = <R1, R2, R3>(\n    onChildOf: () => R1,\n    onParentOf: () => R2,\n    onNeighbourOf: (bond: Bond) => R3\n) => (edgeLogic: EdgeLogic): any => {\n    switch (edgeLogic._tag) {\n      case 'childOf':\n        return onChildOf()\n      case 'parentOf':\n        return onParentOf()\n      case 'neighbourOf':\n        return onNeighbourOf(edgeLogic.bond)\n    }\n  }\n\n\n\n\n//Eq\nconst eqEdgeLogic: Eq.Eq<EdgeLogic> = Eq.fromEquals((x, y) => {\n    if (x._tag === 'childOf' && y._tag === 'childOf') return true\n    return false;\n  });\n\n\nconst eqEdge = Eq.getStructEq({\n    link: Eq.getTupleEq(Eq.eqString, Eq.eqString),\n    data: eqEdgeLogic\n})\n\n\n// Truth tables: which components can be joined to one another?\n\n// Can we use an analogy from lego, or protein-protein interaction? \n\n\n// type Predicate<A> = (a: A) => boolean\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Vertex.ts",["544","545","546"],"\nimport * as Eq from 'fp-ts/Eq'\nimport { IBuildingComponent, matchComponentState, ComponentState } from './Component'; \nimport { ContainerState} from './Container'; \nimport { v4 as uuidv4 } from 'uuid';\n\n\n\n\nexport interface IVertex<V> {\n    vertexID: string; \n    data: V\n}\n\nexport interface IVertexData {\n    container: ContainerState\n    component: ComponentState\n}\n\n\n//Constructors:\n\nexport const makeVertex = <V=IVertexData>(\n    data: V,\n    vertexID: string = uuidv4(), \n): IVertex<V> => {\n    return {vertexID, data}\n}\n\n\n\n//Eq\nconst eqContainerState: Eq.Eq<ContainerState> = Eq.fromEquals((x, y) => {\n    if (x._tag === 'Site' && y._tag === 'Site') return true\n    if (x._tag === 'Building' && y._tag === 'Building') return true\n    if (x._tag === 'EnvelopeSection' && y._tag === 'EnvelopeSection') return true\n    if (x._tag === 'Roof' && y._tag === 'Roof') return true\n    if (x._tag=== 'Balcony' && y._tag === 'Balcony') return true\n    if (x._tag === 'Floor' && y._tag === 'Floor') return true\n    if (x._tag === 'Room' && y._tag === 'Room') return true\n    if (x._tag === 'Wall' && y._tag === 'Wall') return true\n    if (x._tag === 'Ceiling' && y._tag === 'Ceiling') return true\n    if (x._tag === 'Window' && y._tag === 'Window') return true\n    if (x._tag === 'Doorway' && y._tag === 'Doorway') return true\n    if (x._tag === 'Void' && y._tag === 'Void') return true\n    return false;\n  });\n\nconst eqDimensions = Eq.getStructEq({\n    X: Eq.eqNumber,\n    Y: Eq.eqNumber,\n    Z: Eq.eqNumber,\n    unit: Eq.eqString //bit of a fudge\n  })\n\nconst eqBuldingComponent = Eq.getStructEq({\n    moduleName: Eq.eqString,\n    dimensions: eqDimensions, \n    buildingSystem: Eq.eqString,\n    locationClass: Eq.eqString,\n    // roofProperties?: IRoofProperties\n    cost: Eq.getStructEq({amount: Eq.eqNumber, currency: Eq.eqString}),\n    assemblyTime: Eq.getStructEq({time: Eq.eqNumber, units: Eq.eqString}), \n})\n\nconst eqComponentState: Eq.Eq<ComponentState> = Eq.fromEquals((x, y) => {\n    if (x._tag === 'unChosen' && y._tag === 'unChosen' ) return true; \n    if (x._tag === 'chosen' && y._tag === 'chosen') return eqBuldingComponent.equals(x.component, y.component);\n    return false;\n  });\n\nconst eqVertexData = Eq.getStructEq({\n    container: eqContainerState,\n    component: eqComponentState\n})\n\nconst eqVertex = Eq.getStructEq({\n    name: Eq.eqString,\n    data: eqVertexData\n})\n\n\n\n\n ","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Container.ts",["547","548","549","550"],"import { Matrix4, Vector3, Euler  } from 'three'\nimport { Matrix4Tuple, createMatrix4 } from './Matrix4'; \nimport { Vector3Tuple } from './Vector3'; \nimport { Bond } from './Bond'; \nimport * as F from 'fp-ts/function'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport interface IFace {\n    faceID: string; \n    connectionCapacityID: number;\n    connection: {_tag: 'unconnected'} | {_tag: 'connected', connectedTo: IFace, connectedBy: Bond} \n}\n\nexport const makeFace = (\n    faceID: string = uuidv4(),\n    connectionCapacityID: number = 1,\n    connection: \n    | {_tag: 'unconnected'} \n    | {_tag: 'connected', connectedTo: IFace, connectedBy: Bond}\n    = {_tag: 'unconnected'} \n): IFace => {return {faceID, connectionCapacityID, connection}}\n\n\nexport interface IFaces {\n    top: IFace, \n    bottom: IFace,\n    front: IFace,\n    left: IFace,\n    right: IFace,\n    back: IFace,\n}\n\nexport const makeFaces = (\n    top: IFace = makeFace(), \n    bottom: IFace = makeFace(),\n    front: IFace = makeFace(),\n    left: IFace = makeFace(),\n    right: IFace = makeFace(),\n    back: IFace = makeFace()\n): IFaces => { return {top, bottom, front, left, right, back}}\n\n\n\n\n/**\n *  Containers are essential frames of reference. We can define the components with a continer with the container's\n * reference frame\n * \n *                  |  <-- r1 -->   0   |       where r1 = [x1, y1, z1 ], a basis vector \n *          T   =   |  <-- r2 -->   0   |       etc. Collectively, {r1,r2,r3} form a basis for the reference frame\n *                  |  <-- r3 -->   0   |\n *                  |  <-- O  -->   1   |       where O is the position of the origin \n * \n * \n *         The world frame is generally defiend by: \n * \n *                  |   1   0   0   0   |\n *          Tw =    |   0   1   0   0   |\n *                  |   0   0   1   0   |\n *                  |   0   0   0   1   |\n */                 \n\n\n\n\nexport interface IContainer {\n    parentContainerID: string | null; \n    containerID: string; \n    faces: IFaces\n    worldTransform: Matrix4Tuple; \n    fromParentTransform: Matrix4Tuple; //This stores the local transform of the object. This is the object's transformation relative to its parent.\n    // scale: Vector3Tuple; \n\n}\n\nexport const makeContainer = (\n    parentContainerID: string | null,\n    worldTransform: Matrix4Tuple = [1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1],\n    // scale: Vector3Tuple = [1,1,1],\n    fromParentTransform: Matrix4Tuple = [1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1],\n    containerID: string = uuidv4(),\n    // rank: number, // we use a chess phrase: rank 0 is the root node. Every level deeper into tree +=1 rank. \n    faces: IFaces = makeFaces(),\n    /* \n    Suppose we have a reference frame, R=(𝑟1,𝑟2,𝑟3,𝑜)\n    where 𝑟1,𝑟2,𝑟3 are the normalized basis vectors and 𝑜 is the origin. \n    We assume that these are all given in Euclidean space, which we will call world space W\n\n     Suppose we are given a point in world space 𝑝^(W). To find 𝑝 with respect to your reference frame you take the vector from 𝑜 to 𝑝 and project it onto the basis vectors.\n    */\n    // position_wrt_W: Vector3,\n    // scale_wrt_W: Vector3,\n    // rotation_wrt_W: Euler\n): IContainer => { return { parentContainerID, containerID, faces, worldTransform, fromParentTransform, /*scale , localTransform, worldTransform, position_wrt_W, scale_wrt_W, rotation_wrt_W */}}\n\nexport const makeChildContainer = (\n    parentContainer: IContainer,\n    fromParentTransform: Matrix4,\n    scale: Vector3Tuple = [1,1,1],\n    containerID: string = uuidv4(),\n    faces: IFaces = makeFaces(),\n): IContainer => {\n    return { \n        parentContainerID: parentContainer.containerID, \n        worldTransform: (createMatrix4(parentContainer.worldTransform).clone().multiply(fromParentTransform)).elements as Matrix4Tuple, //\n        fromParentTransform: fromParentTransform.elements as Matrix4Tuple,\n        containerID: containerID,\n        faces: faces,\n        // scale: scale\n    }\n}\n\n// interface IPattern {\n//     patternid: string,\n// }\n\n// export const makePattern = (\n//     patternid: string\n// ): IPattern => { return { patternid }}\n\n\n\n// const isContainer = ContainerT.is({ location: \"Photographing corgis\" })\n// const maybeContainer = ContainerT.decode({ location: 10 })\n\n\n/////////\n// States\n/////////\n/// Create urls for state? Envelope.Room, Envelope.Room.Wall etc? \n\n// Site, Building, Floor, Room, Wall, Floor, Ceiling, Window, Doorway, void\nexport enum ContainerStateType {\n    Site = 'Site',\n    Building = 'Building',\n    Floor = 'Floor',\n    Room = 'Room',\n    Wall = 'Wall',\n    Ceiling = 'Ceiling',\n    Window = 'Window',\n    Doorway = 'Doorway',\n    Void = 'Void',\n    Roof = 'Roof',\n    EnvelopeSection = 'EnvelopeSection',\n    Balcony = 'Balcony'\n    //U-Shape, L-shape, etc. \n}\n\n// export type PatternedContainer = IPattern & IContainer\n\n// Ought to create brands/refinement types constraining the behaviours of the \nexport type Site = { _tag: ContainerStateType.Site, data: IContainer }\n// const SiteT = t.type({data: PatternedContainerT }, 'Site'); \n// type _Site = t.TypeOf<typeof SiteT>\nexport type Building = { _tag: ContainerStateType.Building, data: IContainer }\nexport type Floor = { _tag: ContainerStateType.Floor; data: IContainer }\nexport type Room = { _tag: ContainerStateType.Room, data: IContainer } // <- 4 walls and a void \nexport type Wall = { _tag: ContainerStateType.Wall; data: IContainer }\nexport type Ceiling = { _tag: ContainerStateType.Ceiling; data: IContainer }\nexport type Window = { _tag: ContainerStateType.Window; data: IContainer }\nexport type Doorway = { _tag: ContainerStateType.Doorway; data: IContainer }\nexport type Void = { _tag: ContainerStateType.Void; data: IContainer }\n\nexport type Roof = { _tag: ContainerStateType.Roof; data: IContainer }\nexport type EnvelopeSection = { _tag: ContainerStateType.EnvelopeSection; data: IContainer }\nexport type Balcony = { _tag: ContainerStateType.Balcony; data: IContainer }\n\n\nexport type ContainerState = \n| Site \n| Building \n| Floor \n| Room \n| Wall | Ceiling \n| Window | Doorway | Void \n| Roof | EnvelopeSection | Balcony\n\n\n\n// State constructors\nexport const makeSite = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Site,\n    data: data\n})\nexport const makeBuilding = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Building,\n    data: data\n})\nexport const makeRoom = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Room,\n    data: data\n})\nexport const makeFloor = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Floor,\n    data: data\n})\nexport const makeCeiling = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Ceiling,\n    data: data\n})\nexport const makeWall = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Wall,\n    data: data\n})\nexport const makeWindow = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Window,\n    data: data\n})\nexport const makeDoorway = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Doorway,\n    data: data\n})\nexport const makeVoid = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Void,\n    data: data\n})\nexport const makeRoof = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Roof,\n    data: data\n})\nexport const makeEnvelopeSection = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.EnvelopeSection,\n    data: data\n})\nexport const makeBalcony = (data: IContainer): ContainerState => ({\n    _tag: ContainerStateType.Balcony,\n    data: data\n})\n\nexport const containerConstructors: Record<ContainerStateType, (data: IContainer) => ContainerState> = {\n    [ContainerStateType.Site]: makeSite,\n    [ContainerStateType.Building]: makeBuilding,\n    [ContainerStateType.Room]: makeRoom,\n    [ContainerStateType.Floor]: makeFloor,\n    [ContainerStateType.Ceiling]: makeCeiling,\n    [ContainerStateType.Wall]: makeWall,\n    [ContainerStateType.Window]: makeWindow,\n    [ContainerStateType.Doorway]: makeDoorway,\n    [ContainerStateType.Void]: makeVoid,\n    [ContainerStateType.Roof]: makeRoof,\n    [ContainerStateType.EnvelopeSection]: makeEnvelopeSection,\n    [ContainerStateType.Balcony]: makeBalcony,\n\n}\n\n// export type ContainerState = Site | Building | Floor | Room | Wall | Ceiling | Window | Doorway | Void \n\n/// Generic pattern matching function\nexport const matchContainerState = <ReturnType extends any>(\n\n    a: (state: Site) => ReturnType,\n    b: (state: Building) => ReturnType,\n    c: (state: Floor) => ReturnType,\n    d: (state: Room) => ReturnType,\n    e: (state: Wall) => ReturnType,\n    f: (state: Ceiling) => ReturnType,\n    g: (state: Window) => ReturnType,\n    h: (state: Doorway) => ReturnType,\n    i: (state: Void) => ReturnType,\n    j: (state: Roof) => ReturnType,\n    k: (state: EnvelopeSection) => ReturnType,\n    l: (state: Balcony) => ReturnType\n\n) => (state: ContainerState): ReturnType => {\n    switch(state._tag) {\n      case ContainerStateType.Site:\n          return a(state);\n      case ContainerStateType.Building:\n          return b(state);\n      case ContainerStateType.Floor:\n          return c(state);\n      case ContainerStateType.Room:\n          return d(state);\n      case ContainerStateType.Wall:\n          return e(state); \n      case ContainerStateType.Ceiling:\n          return f(state); \n      case ContainerStateType.Window:\n          return g(state); \n      case ContainerStateType.Doorway:\n          return h(state); \n      case ContainerStateType.Void:\n          return i(state); \n      case ContainerStateType.Roof:\n          return j(state); \n      case ContainerStateType.EnvelopeSection:\n          return k(state); \n      case ContainerStateType.Balcony:\n          return l(state); \n      default:\n          return F.absurd(state);\n    }\n};\n// e.g:\nexport const logState: (state: ContainerState) => void \n= matchContainerState(\n    (state) => console.log(state._tag), //Site\n    (state) => console.log(state._tag), //Building\n    (state) => console.log(state._tag), //Floor\n    (state) => console.log(state._tag), //Room\n    (state) => console.log(state._tag), //Wall\n    (state) => console.log(state._tag), //Ceiling\n    (state) => console.log(state._tag), //Window\n    (state) => console.log(state._tag), //Doorway\n    (state) => console.log(state._tag), //Void\n    (state) => console.log(state._tag), //Roof\n    (state) => console.log(state._tag), //Envelope\n    (state) => console.log(state._tag), //Balcony\n);\n\n// Create forest fucnctions: make, unfold:\n\n\nenum PatternMode {\n    'A*' = 0,\n    'AB*A' = 1,\n    'AB(n)A' = 2,\n}\n\nenum Periodicity {\n    cylic = 0,\n    alternating = 1\n}\n\n\n\n\n\n\n\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Component.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Bond.ts",["551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566"],"\nimport * as E from 'fp-ts/Either'\nimport * as Eq from 'fp-ts/Eq'\nimport * as F from 'fp-ts/function'\nimport * as _Map from 'fp-ts/Map'\nimport * as O from 'fp-ts/Option'\nimport * as Ord from 'fp-ts/Ord'\nimport * as S from 'fp-ts/Semigroup'\nimport  * as Show from 'fp-ts/Show'\nimport * as C from 'io-ts/Codec'\nimport * as D from 'io-ts/Decoder'\nimport * as G from 'io-ts/Guard'\nimport * as M from 'fp-ts/Monoid'; \nimport * as R from 'fp-ts/Record'\nimport { Matrix4Tuple } from './Matrix4' \nimport { v4 as uuidv4 } from 'uuid';\n\n// MetaData\nimport { SwiftModule } from '../MetaData/swiftComponentData'\nimport { SkylarkModule } from '../MetaData/skylarkComponentData'\n\n\n///////////////\n// This is for situaitons where we want to click on a block, and add a block to it. Or if we drag and drop a block\n// onto another block. We check whether the bond is actually possible, and then (if so) we provide the transformation \n// operation to stick the added block on in the right place.\n// These sorts of operations are useful, too, when we are doing are pattern definitions\n\n\n//Bond + utilies \n\n// A face type has an id, which will be a prime number. A bond id is the multi0lication of the face ids that it is joining.\n// A face will also have a 'bondwithID', which is a multiplication of all the faceIDs that it can bind with. If it can bind with all,\n// we can set the bondwithID to 1, i.e. universal bonder. \n\n/*\nFace1 ID         2  |----------------------------------------->     .\nFace2 ID         2         3         5           7 ..\n\nBond ID          4          6       10           14       \n*/\n\n\n// bonds occur at the join between grid cells... \n\n\nexport interface Bond { readonly bondID: number, readonly transform: Matrix4Tuple }\n\nexport const makeBond = (bondID: number, transform: Matrix4Tuple): Bond => {\n  return {bondID: bondID, transform: transform}\n}\n\ntype BondKeyString = `${SwiftModule}->${SwiftModule}`\n\n\n// fp-ts utilities : Equals & Order \nconst ordBond = F.pipe( Ord.ordNumber, Ord.contramap((u: Bond) => u.bondID) )\nconst eqBond: Eq.Eq<Bond> = { equals: ordBond.equals }\nconst eqBondKeyString: Eq.Eq<BondKeyString> = Eq.fromEquals((x,y) => x === y); \nconst ordBondKeyString = Ord.fromCompare<BondKeyString>((x,y) => Ord.ordString.compare(x, y))\n\n\nexport const componentBonds: Map<BondKeyString, Bond> = new Map<BondKeyString, Bond>(); \n\n\n// Operations\nconst elemBond = _Map.elem(eqBond)\nconst keys = _Map.keys(ordBondKeyString)\nconst values = _Map.values(ordBond)\nconst toArray = _Map.toArray(ordBondKeyString)\nconst lookupWithKey = _Map.lookupWithKey(eqBondKeyString)\n\nexport const findBondValue = (bondString: BondKeyString): O.Option<[BondKeyString, Bond]> => {\n  return _Map.lookupWithKey(eqBondKeyString)(bondString)(componentBonds)\n}\n\n//refinement: \nconst isNumber = (u: string | number): u is number => typeof u === 'number'\n// const filter = (y:  Map<[SwiftModule,SwiftModule], Bond>) => F.pipe(y, _Map.filter(isNumber))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// connection ids \nexport const primes = [\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, \n  83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, \n  179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, \n  277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, \n  383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, \n  491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, \n  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, \n  733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, \n  857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, \n  983, 991, 997\n]\n\n\n\n// a bondID is simply the multiplication of primes.  => our ids are prime factorisation, with unique primes\nexport interface PrimesMultipliedBrand {\n  readonly PrimesMultiplied: unique symbol\n}\nexport type tBondID = number & PrimesMultipliedBrand\nexport const BondID: D.Decoder<unknown, tBondID> = F.pipe(\n  D.number,\n  D.refine((n): n is tBondID => {\n\n    const primeFactorization = (number: number, result?: any): any => {\n      var result = (result || []);\n      var root = Math.sqrt(number);\n      var x = 2;\n    \n      if (number % x) {\n        x = 3;\n    \n        while ((number % x) && ((x = (x + 2)) < root)) {}\n      }\n    \n      x = (x <= root) ? x : number;\n    \n      result.push(x);\n    \n      return (x === number) ? result : primeFactorization((number / x), result);\n    };\n\n    return (primeFactorization(n) as number[]).every(val => primes.includes(val));\n\n  }, 'BondID')\n)\n\n// export type BondID = D.TypeOf<typeof BondID>\n\n\n\n\n\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Graph/Matrix4.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/reducers.ts",["567","568","569","570","571","572","573","574","575","576","577","578"],"import * as A from \"fp-ts/Array\";\nimport * as O from \"fp-ts/Option\";\nimport * as R from \"fp-ts/Record\";\nimport { eqString } from \"fp-ts/lib/Eq\";\nimport { pipe } from \"fp-ts/pipeable\";\n\nimport { ModelStateActionTypes, ModelStateActions, EditorState } from './types/model-state-action-types'\nimport { Container } from './types/static-types'\n\n\nimport {\n  fromTraversable,\n  Getter,\n  Iso,\n  Lens,\n  Optional,\n  Prism,\n  Traversal,\n} from 'monocle-ts';\n\n\n\n\n////////////\n/**\n * Optics\n */\n\nconst containerInFocusLens = Lens.fromPath<EditorState>()([\"entities\", \"containers\", 'byId']);\nconst atContainerInFocus = (id: string) => Lens.fromProp<Record<string, Container>>()(id)\n\n\nconst isContainerWithIdFn: (s : string) => (a: Container) => Container =\n    s => (a: Container): Container => { return a.id == s ?  {id: a.id, visible: true } :  {id: a.id, visible: false } }\n    \nconst containerLens = Lens.fromPath<EditorState>()([\"entities\", \"containers\", \"byId\"]);\nconst recordTraversal = fromTraversable(R.record)<Container>();\nconst composedRecordTraversal = containerLens.composeTraversal(recordTraversal)\n\n\n export const INITIAL_STATE: EditorState = {\n  entities: {\n    containers: {byId: R.empty, allIds: []},\n   \n  }\n }\n\n\n const bringContainerIntoFocus = (containerInFocus: Container) => (state: EditorState): EditorState => {\n  // traverse the container records and change the visibility of all non chosen containers to invisible\n  const modificationPredicate = isContainerWithIdFn(containerInFocus.id)\n  return composedRecordTraversal.modify(modificationPredicate)(state)\n};\n\nconst bringAllContainersIntoFocus = () => (state: EditorState): EditorState => {\n  // traverse the container records and change the visibility of all non chosen containers to invisible\n  return composedRecordTraversal.modify( (a: Container) => {return {id: a.id, visible: true }} ) (state)\n};\n\n\n export const editorReducer = (\n   state = INITIAL_STATE,\n   action: ModelStateActionTypes\n ): EditorState => {\n  switch(action.type) {\n    case ModelStateActions.BRING_CONTAINER_INTO_FOCUS:\n      return bringContainerIntoFocus(action.payload.containerInFocus)(state)\n    case ModelStateActions.BRING_ALL_CONTAINERS_INTO_FOCUS:\n      return bringAllContainersIntoFocus()(state)\n    default:\n      return state\n  }  \n}","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/types/model-state-action-types.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Editor/actions.ts",[],["579","580"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/BLK-A.tsx",[],["581","582"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms2/N/N_S-BLOCK.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/component-in-focus-page/ComponentInFocus.tsx",["583","584"],"import React, {Suspense } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { OrbitControls,  Html, Loader } from '@react-three/drei'\nimport { useSpring } from '@react-spring/core'\nimport { a } from '@react-spring/web'\nimport Overlay from './Overlay'\nimport Scene from './Scene'\n\nimport { GetSubassemblyQuery, GetSubassemblyQueryVariables } from '../../generated/graphql'; \nimport { useQuery  } from '@apollo/client'\nimport { loader } from 'graphql.macro';\nconst GetSubassembly_graphql = loader('src/queries/GetSubassembly.graphql');\n\n\ninterface ComponentInFocusProps {}\n\nconst ComponentInFocus = (props: ComponentInFocusProps) => {\n\n  const { data, loading, error }= useQuery<GetSubassemblyQuery, GetSubassemblyQueryVariables>( GetSubassembly_graphql, { variables: { subassemblyName: \"Module-A1_01\"} });\n\n  console.log(\"data\", data); \n\n\n    // This spring controls the background and the svg fill (text color)\n  const [{ background, fill }, set] = useSpring({ background: '#f0f0f0', fill: '#202020' }, [])\n  return (\n    <div className = 'component-in-focus-page'>\n    <a.main style={{ background }}>\n        <Canvas className=\"component-in-focus canvas\" pixelRatio={[1, 2]}>\n          <Suspense\n          fallback={\n            <Html center>\n              <Loader />\n            </Html>\n          }>    \n            <Scene setBg={set} />\n          </Suspense>\n            <OrbitControls enablePan={false} enableZoom={false} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />\n        </Canvas>\n        <Overlay fill={fill} />\n    </a.main>    \n    </div>\n   \n  )\n}\n\nexport default ComponentInFocus\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/reducers.ts",["585","586","587","588","589","590"],"import * as A from \"fp-ts/Array\";\nimport * as O from \"fp-ts/Option\";\nimport * as R from \"fp-ts/Record\";\nimport { eqString } from \"fp-ts/lib/Eq\";\nimport { pipe } from \"fp-ts/pipeable\";\nimport { Lens } from \"monocle-ts\";\n\nimport { ModelStateActionTypes, ModelStateActions, DashboardState } from './types/model-state-action-types'\nimport { Owner, Property, EnergyPerformance, TasteProfile, Designer, Project, Subassembly, Building, Pattern} from './types/static-types'\n\n// import { ModuleName } from \"../../types\";\n\n\n/**\n * CRUD functions \n * \naddOne: accepts a single entity, and adds it\naddMany: accepts an array of entities, and adds them\nsetAll: accepts an array of entities, and replaces the existing entity contents with the values in the array\nremoveOne: accepts a single entity ID value, and removes the entity with that ID if it exists\nremoveMany: accepts an array of entity ID values, and removes each entity with those IDs if they exist\nupdateOne: accepts an \"update object\" containing an entity ID and an object containing one or more new field values to update inside a changes field, and updates the corresponding entity\nupdateMany: accepts an array of update objects, and updates all corresponding entities\nupsertOne: accepts a single entity. If an entity with that ID exists, the fields in the update will be merged into the existing entity, with any matching fields overwriting the existing values. If the entity does not exist, it will be added.\nupsertMany: accepts an array of entities that will be upserted.\nmap: accepts a callback function that will be run against each existing entity, and may return a change description object. Afterwards, all changes will be merged into the corresponding existing entities.\n\nMany of these can be reproduced using the semigroup operations: \ngetJoinSemigroup - Get a semigroup where concat will return the maximum, based on the provided order.\ngetMeetSemigroup - Get a semigroup where concat will return the minimum, based on the provided order.\nsemigroupAll - boolean semigroup under conjunction.\nsemigroupAny - boolean semigroup under disjunction.\n */\n\n\n\n\n////////////\n/**\n * Optics\n */\n\nconst subassembliesLens = Lens.fromPath<DashboardState>()([\"entities\", \"subassemblies\", 'byId']);\nconst atSubassembly = (id: string) => Lens.fromProp<Record<string, Subassembly>>()(id)\n\nconst projectsLens = Lens.fromPath<DashboardState>()([\"entities\", \"projects\", 'byId']);\nconst atProjectLens = (id: string) => Lens.fromProp<Record<string,Project>>()(id)\n\nconst ownersLens = Lens.fromPath<DashboardState>()([\"entities\", \"owners\", 'byId']);\nconst atOwners = (id: string) => Lens.fromProp<Record<string, Owner>>()(id)\n\nconst propertiesLens = Lens.fromPath<DashboardState>()([\"entities\", \"properties\", 'byId']);\nconst atProperies = (id: string) => Lens.fromProp<Record<string,Property>>()(id)\n\nconst buildingsLens = Lens.fromPath<DashboardState>()([\"entities\", \"buildings\", 'byId']);\nconst atBuilding = (id: string) => Lens.fromProp<Record<string, Building>>()(id)\n\nconst energyPerformanceLens = Lens.fromPath<DashboardState>()([\"entities\", \"energyPerformances\", 'byId']);\nconst atEnergyPerformance = (id: string) => Lens.fromProp<Record<string, EnergyPerformance>>()(id)\n\nconst patternsLens = Lens.fromPath<DashboardState>()([\"entities\", \"patterns\", 'byId']);\nconst atPatterns = (id: string) => Lens.fromProp<Record<string, Pattern>>()(id)\n\n\nconst tasteProfileLens = Lens.fromPath<DashboardState>()([\"entities\", \"tasteProfiles\", 'byId']);\nconst atTasteProfile = (id: string) => Lens.fromProp<Record<string, TasteProfile>>()(id)\n\nconst designerLens = Lens.fromPath<DashboardState>()([\"entities\", \"designers\", 'byId']);\nconst atDesigner = (id: string) => Lens.fromProp<Record<string, Designer>>()(id)\n\n\n\n\n export const INITIAL_STATE: DashboardState = {\n  entities: {\n    projects: {byId: R.empty, allIds: []},\n    owners: {byId: R.empty, allIds: []},\n    properties: {byId: R.empty, allIds: []},\n    buildings: {byId: R.empty, allIds: []},\n    subassemblies: {byId: R.empty, allIds: []},\n    energyPerformances: {byId: R.empty, allIds: []},\n    patterns: {byId: R.empty, allIds: []},\n    tasteProfiles: {byId: R.empty, allIds: []},\n    designers: {byId: R.empty, allIds: []},\n  }\n }\n\n //  Upsert : An operation that inserts rows into a database table if they do not already exist, or updates them if they do.\n //   Each row in a database is associated with an id. In each of these upsert functions, we provide an entire row of data,\n //   including this unique id. If the unique id matches one of an already existing row, then we have to configure rules\n //   of how to update -> do we merge? or do we overwrite? \n\n \n\n /// We can make the upsert function generic and all, but probably best to individually write out the logic... \n interface Entity{\n   id: string;\n   [key: string]: any;\n }\n\ndeclare type Upsert = <E extends Entity, E1, E2, E3>(\n  entity: E, \n  lens: Lens<DashboardState, Record<string, E>>, \n  lensor: (id: string) => Lens<Record<string, E>, E>, \n  upsertExternal1: E1 extends E ? Upsert: undefined,\n  upsertExternal2: E2 extends E ? Upsert: undefined, \n  upsertExternal3: E3 extends E ? Upsert: undefined\n) => (state: DashboardState) => DashboardState\n\nconst upsert = <E extends Entity, E1, E2, E3>(\n  entity: E, \n  lens: Lens<DashboardState, Record<string, E>>, \n  lensor: (id: string) => Lens<Record<string, E>, E>, \n  // upsertExternal1: E1 extends E ? Upsert: undefined,\n  // upsertExternal2: E2 extends E ? Upsert: undefined, \n  // upsertExternal3: E3 extends E ? Upsert: undefined\n) => (state: DashboardState): DashboardState => {\n   return pipe(\n     state,\n     R.lookup(entity.id),\n     O.fold(\n       () => {\n         return pipe(\n           state,\n           lens.compose(lensor(entity.id)).set({...entity})\n         )\n        },\n        (_entity) => {\n          return pipe(\n            state,\n            lens.compose(lensor(entity.id)).modify(\n              (prevEntity): E => ({\n                ...entity\n              }),\n              ),\n            );\n          },\n        ),\n        // upsertExternal1(),\n        // upsertExternal2(),\n        // upsertExternal13()\n      )\n  };\n  \n     \n\nconst upsertSubassembly = (subassembly: Subassembly) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(subassembly.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          subassembliesLens.compose(atSubassembly(subassembly.id)).set({ ...subassembly })\n        );\n      },\n      (_subassembly) => {\n        return pipe(\n          state,\n          subassembliesLens.compose(atSubassembly(subassembly.id)).modify(\n            (prevSubassembly): Subassembly => ({\n              ...subassembly,\n              id: prevSubassembly.id //note: we can also do clever things here like use our semigroups to do more complex merging... \n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertDesigner = (designer: Designer) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(designer.id),\n    O.fold(\n      // if the designer IS NOT found in the record database:\n      () => {\n        return pipe(\n          state,\n          designerLens.compose(atDesigner(designer.id)).set({ \n            ...designer \n          })\n        );\n      },\n      // if the use IS found in the record database\n      (_designer) => {\n        return pipe(\n          state,\n          designerLens.compose(atDesigner(designer.id)).modify(\n            (prevDesigner): Designer => ({\n              ...designer,\n              //note: we can also do clever things here like use our semigroups to do more complex merging... \n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertTasteProfile = (tasteProfile: TasteProfile) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(tasteProfile.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          tasteProfileLens.compose(atTasteProfile(tasteProfile.id)).set({ ...tasteProfile })\n        );\n      },\n      (_tasteProfile) => {\n        return pipe(\n          state,\n          tasteProfileLens.compose(atTasteProfile(tasteProfile.id)).modify(\n            (prevTasteProfile): TasteProfile => ({\n              ...tasteProfile,\n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertEnergyPerformance = (energyPerformance: EnergyPerformance) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(energyPerformance.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          energyPerformanceLens.compose(atEnergyPerformance(energyPerformance.id)).set({ ...energyPerformance })\n        );\n      },\n      (_energyPerformance) => {\n        return pipe(\n          state,\n          energyPerformanceLens.compose(atEnergyPerformance(energyPerformance.id)).modify(\n            (prevEnergyPerformance): EnergyPerformance => ({\n              ...energyPerformance\n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\n\n\nconst upsertOwner = (owner: Owner) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(owner.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          ownersLens.compose(atOwners(owner.id)).set({\n            ...owner\n          })\n        )\n      },\n      (_owner) => {\n        return pipe(\n          state, \n          ownersLens.compose(atOwners(owner.id)).modify(\n            (prevOwner): Owner => ({\n              ...owner,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertTasteProfile(owner.ownerTasteProfile)\n  )\n}\n\nconst upsertPattern = (pattern: Pattern) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(pattern.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          patternsLens.compose(atPatterns(pattern.id)).set({\n            ...pattern\n          })\n        )\n      },\n      (_owner) => {\n        return pipe(\n          state, \n          patternsLens.compose(atPatterns(pattern.id)).modify(\n            (prevPattern): Pattern => ({\n              ...pattern,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n  )\n}\n\nconst upsertBuilding = (building: Building) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(building.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          buildingsLens.compose(atBuilding(building.id)).set({\n            ...building\n          })\n        )\n      },\n      (_building) => {\n        return pipe(\n          state, \n          buildingsLens.compose(atBuilding(building.id)).modify(\n            (prevBuilding): Building => ({\n              ...building,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertPattern(building.buildingPattern),\n    upsertEnergyPerformance(building.energyPerformance)\n  )\n}\n\n\nconst upsertProperty = (property: Property) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(property.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          propertiesLens.compose(atProperies(property.id)).set({\n            ...property\n          })\n        )\n      },\n      (_property) => {\n        return pipe(\n          state, \n          propertiesLens.compose(atProperies(property.id)).modify(\n            (prevProperty): Property => ({\n              ...property,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertBuilding(property.propertyBuilding1),\n    upsertBuilding(property.propertyBuilding2),\n    upsertBuilding(property.propertyBuilding3),\n\n  )\n}\n\nconst upsertProject = (project: Project) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(project.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          projectsLens.compose(atProjectLens(project.id)).set({\n            ...project\n          })\n        )\n      },\n      (_property) => {\n        return pipe(\n          state, \n          projectsLens.compose(atProjectLens(project.id)).modify(\n            (prevProject): Project => ({\n              ...project,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertOwner(project.projectOwner),\n    upsertProperty(project.projectPropety)\n  \n  )\n}\n\n\n export const dashboardReducer = (\n   state = INITIAL_STATE,\n   action: ModelStateActionTypes\n ): DashboardState => {\n  switch(action.type) {\n    case ModelStateActions.UPSERT_SUBASSEMBLIES:\n      return upsertSubassembly(action.payload.subassembly)(state)\n    case ModelStateActions.UPSERT_BUILDINGS:\n      return upsertBuilding(action.payload.buildings)(state);\n    case ModelStateActions.UPSERT_DESIGNER:\n      return upsertDesigner(action.payload.designers)(state);\n    case ModelStateActions.UPSERT_ENERGY_PERFORMANCE:\n      return upsertEnergyPerformance(action.payload.energyPerformances)(state);\n    case ModelStateActions.UPSERT_OWNERS:\n      return upsertOwner(action.payload.owners)(state);\n    case ModelStateActions.UPSERT_PATTERN:\n      return upsertPattern(action.payload.patterns)(state);\n    case ModelStateActions.UPSERT_PROJECTS:\n      return upsertProject(action.payload.projects)(state); \n    case ModelStateActions.UPSERT_PROPERTIES:\n      return upsertProperty(action.payload.properties)(state); \n    case ModelStateActions.UPSERT_TASTE_PROFILE:\n      return upsertTasteProfile(action.payload.tasteProfiles)(state); \n    default:\n      return state\n  }  \n }","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/component-in-focus-page/Overlay.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/component-in-focus-page/Scene.tsx",["591","592","593","594","595","596","597","598","599","600"],"import * as THREE from 'three'\nimport React, { Suspense, useEffect, useState, useRef } from 'react'\nimport { CanvasContext, ObjectMap, useFrame, extend } from 'react-three-fiber'\nimport { PerspectiveCamera, Environment, MeshDistortMaterial, ContactShadows,  Html, Loader } from '@react-three/drei'\nimport { useSpring, SpringStartFn, config } from '@react-spring/core'\nimport { a } from '@react-spring/three'\n\n\n// Example mesh\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\n// type GLTFResult = GLTF & ObjectMap\ntype GLTFResult = GLTF & {\n  nodes: {\n    ['N_S_BLK_1']: THREE.Mesh\n    ['N_S_BLK_2']: THREE.Mesh\n  }\n  materials: {\n    ['FrontColor.004']: THREE.MeshStandardMaterial\n    ['BackColor.008']: THREE.MeshStandardMaterial\n  }\n}\n\n\n// React-spring animates native elements, in this case <mesh/> etc,\n// but it can also handle 3rd–party objs, just wrap them in \"a\".\nconst AnimatedMaterial = a(MeshDistortMaterial)\n\n\n\nexport default function Scene({ setBg }: {\n    setBg: SpringStartFn<{ background: string; fill: string; }>\n}) {\n  const { nodes, materials } = useGLTF('/Skylark/N_S-BLOCK.glb') as GLTFResult; \n\n  // const sphere = useRef<THREE.Object3D>()\n  const modelRef = useRef<THREE.Mesh>()\n  const lightRef = useRef<THREE.Object3D>()\n  const [mode, setMode] = useState<boolean>(false)\n  const [down, setDown] = useState<boolean>(false)\n  const [hovered, setHovered] = useState<boolean>(false)\n\n  // Change cursor on hovered state\n  useEffect(() => {\n    document.body.style.cursor = hovered\n      ? 'none'\n      : `url('data:image/svg+xml;base64,${btoa(\n          '<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"16\" cy=\"16\" r=\"10\" fill=\"#E8B059\"/></svg>'\n        )}'), auto`\n  }, [hovered])\n\n  // Make the bubble float and follow the mouse\n  // This is frame-based animation, useFrame subscribes the component to the render-loop\n  useFrame((state: CanvasContext) => {\n    if (lightRef.current && modelRef.current){\n        lightRef.current.position.x = state.mouse.x * 20\n        lightRef.current.position.y = state.mouse.y * 20\n        modelRef.current.position.x = THREE.MathUtils.lerp(modelRef.current.position.x, hovered ? state.mouse.x / 2 : 0, 0.2)\n        modelRef.current.position.y = THREE.MathUtils.lerp(\n          modelRef.current.position.y,\n          Math.sin(state.clock.elapsedTime / 1.5) / 6 + (hovered ? state.mouse.y / 2 : 0),\n          0.2\n        )\n    }\n  })\n\n  // Springs for color and overall looks, this is state-driven animation\n  // React-spring is physics based and turns static props into animated values\n  type SpringProps = { \n      wobble: number;\n      coat: number;\n      ambient: number;\n      env: number;\n      color: string;\n      config: (n: string) => {\n          mass: number;\n          tension: number;\n          friction: number;\n      }\n  }\n\n  const [{ wobble, coat, color, ambient, env }, set] = useSpring(\n    {\n      wobble: down \n        ? 1.2 \n        : hovered \n            ? 1.05 \n            : 1,\n      coat: mode && !hovered \n        ? 0.04 \n        : 1,\n      ambient: mode && !hovered \n        ? 1.5 \n        : 0.5,\n      env: mode && !hovered \n        ? 0.4 \n        : 1,\n      color: hovered\n        ? '#202020' \n        : mode \n            ? '#202020' \n            : '#202020',\n    //   config: (n: string) => n === 'wobble' && hovered && { mass: 2, tension: 1000, friction: 10 }\n    },\n    [mode, hovered, down]\n  )\n\n  return (\n    \n    <>\n      <PerspectiveCamera makeDefault position={[0, 0, 4]} fov={75}>\n        <a.ambientLight intensity={ambient} />\n        <a.pointLight ref={lightRef} position-z={-15} intensity={env} color=\"#F8C069\" />\n      </PerspectiveCamera>\n      {/* <Suspense\n        fallback={\n          <Html center>\n            <Loader />\n          </Html>\n        }>         */}\n        <a.mesh\n          scale={new THREE.Vector3(3,3,3)}\n          dispose={null}\n          ref={modelRef}\n          //  scale={wobble!.to((w) => [w, w, w])}\n          onPointerOver={() => setHovered(true)}\n          onPointerOut={() => setHovered(false)}\n          onPointerDown={() => setDown(true)}\n          onPointerUp={() => {\n            setDown(false)\n            // Toggle mode between dark and bright\n            setMode(!mode)\n            setBg({ background: !mode ? '#202020' : '#f0f0f0', fill: !mode ? '#f0f0f0' : '#202020' })\n          }}>\n            {/** geometry  */}\n           { nodes['N_S_BLK_1'].geometry !== undefined  ?  \n                  <bufferGeometry attach=\"geometry\" {...nodes['N_S_BLK_1'].geometry}/> :  \n                  <sphereBufferGeometry args={[1, 64, 64]} /> \n            }\n\n            {/** material  */}\n          <AnimatedMaterial color={color} envMapIntensity={env} clearcoat={coat} clearcoatRoughness={0} metalness={0.1} stencilMask ={1} />\n          {/* <a.material {...materials['FrontColor.004']}/> */}\n\n        </a.mesh>\n\n        <Environment preset=\"warehouse\" />\n        <ContactShadows\n          rotation={[Math.PI / 2, 0, 0]}\n          position={[0, -1.6, 0]}\n          opacity={mode ? 0.8 : 0.4}\n          width={15}\n          height={15}\n          blur={2.5}\n          far={1.6}\n        />\n      {/* </Suspense> */}\n    </>\n  )\n}\n\nuseGLTF.preload('/Skylark/N_S-BLOCK.glb')\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/model-state-action-types.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/SceneGraph.tsx",["601","602","603","604","605","606","607"],"import React from 'react';\n\n//Global State\nimport { useDispatch } from 'react-redux'; \n// Global update Actions: \nimport {  upsertSubassembly } from '../../store/Shared/action'; \n// Query API\nimport { runQuery } from '../../API/graphqlAPI'; \n\nimport { ProjectArray} from '../../API/types/t';\n\n\n// Scene graph is to render the state of the global scene graph. The individual scene graph components will have some local state to do with\n// ui that does not need to be shared, but all crucial info must be kept global\n\n\n// Local or global state for scene graph ? -> has to live in the global state... \n\n\n\n// IF WANT LOCAL STATE: USE THE COMMENTED OUT BELOW TO DEFINE A LOCAL REDUCER\ninterface SceneGraphState {\n\n} \nconst initialSceneGraphState: SceneGraphState = {\n \n} \n  \ntype Action =\n  | { _tag: \"addContainer\";        payload: {}    }\n\n\nconst SceneGraphReducer = (state: SceneGraphState, action: Action) => {\n  switch (action._tag) {\n    case \"addContainer\":\n      const globalDispatch = useDispatch()\n      // do query, then push updated scene graph to global store\n      //globalDispatch(upsertSubassembly()) \n\n\n      return {...state};\n    default:\n      throw new Error();\n  }\n}\n\n\n/* Elm architecture: model (i.e state), view (i.e manifestation of the state), update (i.e actions dispatched by events to update state) */\nexport const SceneGraph = (props: any): JSX.Element => {\n\n  const [state, localDispatch] = React.useReducer(SceneGraphReducer, initialSceneGraphState);\n  const globalDispatch = useDispatch()\n\n\n  \n\n  // Query our airtable database: then update our global state: \n\n  // globalDispatch(upsertSubassembly()) \n\n  return (\n    <group\n      {...props}\n  \n      /** Update */\n    >\n      {/** View */}\n\n     \n    </group>\n  )\n}",["608","609"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/composite-types.ts",["610"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/codecs.ts",["611","612"],"\nimport * as t from \"io-ts\";\nimport {isNonEmptyString, isIdString, isValidDateString, isBetween0and10 } from './type-guards'\n/**\n * Custom codecs\n */\n\nexport const NonEmptyString = new t.Type<string, string, unknown>(\n    \"nonEmptyString\",\n    isNonEmptyString,\n    (input, context) => (isNonEmptyString(input) ? t.success(input) : t.failure(input, context)),\n    t.identity,\n  );\n  \nexport const UtcDateString = new t.Type<string, string, unknown>(\n    \"utcDateString\",\n    isValidDateString,\n    (input, context) => (isValidDateString(input) ? t.success(input) : t.failure(input, context)),\n    t.identity,\n  );\n  \nexport const IdString = new t.Type<string, string, unknown>(\n    \"idString\",\n    isIdString,\n    (input, context) => (isIdString(input) ? t.success(input) : t.failure(input, context)),\n    t.identity,\n  );\n  \nconst regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i\ninterface UUIDBrand { readonly UUID: unique symbol }\ntype UUID = t.Branded<string, UUIDBrand>\nconst UUID = t.brand(t.string, (s): s is UUID => regex.test(s), 'UUID')\nexport { UUID }  \n\nexport const Truthy = t.union([t.literal('true'), t.literal('fase')])\n  \ninterface RatingBrand { readonly Rating: unique symbol}\ntype Rating = t.Branded<number, RatingBrand>\nconst Rating = t.brand(t.number, (n): n is Rating => isBetween0and10(n), 'Rating')\nexport { Rating }  \n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/store/Shared/types/type-guards.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/API/types/t.ts",["613","614"],"import * as t from 'io-ts'; \nimport { Truthy, UUID, Rating } from '../../store/Shared/types/codecs'; \n/**\n * Composite types\n */\nexport const BuildingSystem = t.union([t.literal(\"WikiHouseSwift\"),t.literal(\"WikiHouseSkylark\")])\nexport const LocationClass = t.union([t.literal(\"EnvelopeSection\"), t.literal(\"Wall\")])\nexport const SubassemblyName = t.union([\n  t.literal('Module-A1_05'),\n  t.literal('Module-A1_04'),\n  t.literal('Module-A1_03'),\n  t.literal('Module-A1_02'),\n  t.literal('Module-A1_01'),\n  t.literal('Module-A1_v/a'),\n  t.literal('Module-A2_05'),\n  t.literal('Module-A2_04'),\n  t.literal('Module-A2_03'),\n  t.literal('Module-A2_02'),\n  t.literal('Module-A2_01'),\n  t.literal('Module-A2_v/a'),\n  t.literal('Module-B1_07'),\n  t.literal('Module-B1_06'),\n  t.literal('Module-B1_05'),\n  t.literal('Module-B1_04'),\n  t.literal('Module-B1_03'),\n  t.literal('Module-B1_02'),\n  t.literal('Module-B1_01'),\n  t.literal('Module-B1_v/a'),\n  t.literal('Module-B2_07'),\n  t.literal('Module-B2_06'),\n  t.literal('Module-B2_05'),\n  t.literal('Module-B2_04'),\n  t.literal('Module-B2_03'),\n  t.literal('Module-B2_02'),\n  t.literal('Module-B2_01'),\n  t.literal('Module-B2_v/a'),\n  t.literal('Module-C1_05'),\n  t.literal('Module-C1_04'),\n  t.literal('Module-C1_03'),\n  t.literal('Module-C1_02'),\n  t.literal('Module-C1_01'),\n  t.literal('Module-C1_v/a'),\n  t.literal('Module-C2_05'),\n  t.literal('Module-C2_04'),\n  t.literal('Module-C2_03'),\n  t.literal('Module-C2_02'),\n  t.literal('Module-C2_01'),\n  t.literal('Module-C2_v/a'),\n  t.literal('Module-D1_04'),\n  t.literal('Module-D1_03'),\n  t.literal('Module-D1_02'),\n  t.literal('Module-D1_01'),\n  t.literal('Module-D1_v/a'),\n  t.literal('Module-E1_04'),\n  t.literal('Module-E1_03'),\n  t.literal('Module-E1_02'),\n  t.literal('Module-E1_01'),\n  t.literal('Module-E1_v/a')\n])\nexport const PrimaryMaterial = t.literal(\"Timber.Plywood\")\nexport const RoofPitchType = t.union([t.literal('Dual-centre'), t.literal('Mono'), t.literal('Asymetric'), t.literal('Parapet'), t.literal('Flat')])\nexport const SpansNStories = t.union([t.literal('1'), t.literal('2'), t.literal('3')])\n\n\nexport const Designer = t.interface({\n    id: t.string, \n    __typename: t.string,\n    // designerId: t.string, \n    // designerPhoto: t.unknown, \n    designerName: t.string\n  })\n  \nexport const Subassembly = t.interface({\n    id: t.string,\n    // subassemblyId:  UUID,\n    __typename: t.string,\n    subassemblyAssemblyTimeInDays: t.number,\n    subassemblyBuildingSystem: BuildingSystem,\n    subassemblyLocationClass: LocationClass,\n    subassemblyName: SubassemblyName,\n    subassemblyPitchedAngle1: t.number,\n    subassemblyPitchedAngle2: t.number,\n    subassemblyPrimaryMaterial: PrimaryMaterial,\n    subassemblyRoofPitchType: RoofPitchType,\n    subassemblySpansNStories: SpansNStories,\n    subassemblyThickness: t.number,\n    subassemblyUnitCost: t.number,\n    subassemblyXDimension: t.number,\n    subassemblyYDimension: t.number,\n    subassemblyZDimension: t.number,\n  \n    subassemblyDesigner: t.array(Designer)\n  \n  })\n  \nexport const Subassemblies = t.array(Subassembly)\n  \nexport const TasteProfile = t.interface({\n    id: t.string,\n    __typename: t.string,    \n    desireColour: Truthy,\n    desireColourMeta: t.string,\n  })\n  \nexport const Owner = t.interface({\n    id: t.string,\n    __typename: t.string,    \n    ownerName: t.string,\n    ownerTasteProfile: t.array(TasteProfile)\n  })\n  \nexport const Pattern = t.interface({\n    id: t.string,\n    __typename: t.string,    \n    patternBarcode: t.string, \n    patternRating: Rating,\n    patternSubAssembliesUsed: t.array(Subassemblies)\n  })\n  \nexport const EnergyPerformance = t.interface({\n    id: t.string,\n    __typename: t.string,    \n    energyTariffElectricity: t.number,\n    energyTariffGas: t.number,\n    energyMeanTemperatureExternal: t.number,\n    energyWallUValue: t.number,\n    energyRoofUValue: t.number,\n    energyFloorUValue: t.number,\n    energyWindowUValue: t.number,\n    energyRooflightUValue: t.number,\n    energyDoorUValue: t.number,\n    energyAirflowExchange: t.number,\n    energyVentilationType: t.string,\n    energyTempInternalAdjusted: t.number,\n    energySpaceHeatingType: t.string,\n    energySpaceCoolingType: t.string,\n    energyWaterHeatingType: t.string\n  });\n  \nexport const Building = t.interface({\n    id: t.string,\n    __typename: t.string,    \n    buildingFoundationType: t.string,\n    buildingNumberBathrooms: t.number,\n    buildingName: t.string,\n    buildingEnergyPerformance: t.unknown,\n    buildingPattern: t.array(Pattern),\n    energyPerformance: t.array(EnergyPerformance)\n  })\n  \nexport const Property = t.interface({\n    id: t.string,\n    __typename: t.string,    \n    propertyUprn: t.string,\n    propertyName: t.string,\n    propertyAddress: t.string,\n    propertyNorthing: t.number,\n    propertyBoundary: t.unknown,\n    propertyDescription: t.string,\n    propertyType: t.string,\n    propertyBuilding1: t.array(Building),\n    propertyBuilding2: t.union([t.array(Building), t.null]),\n    propertyBuilding3: t.union([t.array(Building), t.null]),\n  })\n  \nexport const ProjectArray = t.array(t.interface({\n    id: t.string,\n    __typename: t.string,\n    projectOwner: t.array(Owner),\n    projectPropety: t.array(Property)\n  }))\n  \nexport type ProjectArray = t.TypeOf<typeof ProjectArray>","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/generated/graphql.tsx",[],["615","616"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/analytics-page/AnalyticsPage.tsx",["617","618","619","620","621","622","623","624","625","626","627","628","629","630","631"],"import React, { useState, useReducer } from 'react';\nimport DataTable  from '../../components/body/DataTable/DataTable'; \nimport { DataTableSkeleton, DataTableSkeletonProps } from 'carbon-components-react'\nimport { Button } from 'carbon-components-react'\n// Using the elm model: state, view and update (can simulate this using reducers)\n\nimport { GetProjectQuery, GetProjectQueryVariables, GetAllSubassembliesQuery, GetAllSubassembliesQueryVariables,Projects, Property, Maybe, Building, Patterns, Subassemblies, EnergyPerformance, Designers } from '../../generated/graphql'; \nimport { useQuery  } from '@apollo/client'\nimport { loader } from 'graphql.macro';\n\nimport TreeChart, {example_treeMapData, example_treeMapOptions} from '../../components/body/Chart/Tree'; \nimport RadarChart, {example_radarChartData, example_radarChartOptions} from '../../components/body/Chart/Radar'; \nimport { GaugeChart, DonutChart, ComboChart } from \"@carbon/charts-react\";\nimport { GaugeChartOptions, GaugeTypes, Alignments, Statuses, DonutChartOptions, ComboChartOptions, ScaleTypes} from '@carbon/charts/interfaces'; \n\n/**\n *  gauge?: {\n        arcWidth?: number;\n        deltaArrow?: {\n            direction?: ArrowDirections;\n            size?: Function;\n            enabled: Boolean;\n        };\n        status?: Statuses;\n        deltaFontSize?: Function;\n        numberSpacing?: number;\n        numberFormatter?: Function;\n        valueFontSize?: Function;\n        type?: GaugeTypes;\n        alignment?: Alignments;\n    };\n */\n\nconst dataTableSkeletonProps = () => ({\n  headers:\n    [\n      { key: 'name' },\n      { key: 'protocol' },\n      { key: 'port' },\n      { key: 'rule' },\n      { key: 'attached-groups' },\n    ],\n  zebra: false,\n  compact: false,\n  showHeader: true,\n  showToolbar: true,\n});\n\nconst comboChartState: {data: any, options: ComboChartOptions} = {\n  data: [\n{\n  \"group\": \"Heating\",\n  \"key\": \"January\",\n  \"value\": 900\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"February\",\n  \"value\": 850\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"March\",\n  \"value\": 700\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"April\",\n  \"value\": 690\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"May\",\n  \"value\": 680\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"June\",\n  \"value\": 560\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"July\",\n  \"value\": 670\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"August\",\n  \"value\": 660\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"January\",\n  \"temp\": -20\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"February\",\n  \"temp\": -12\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"March\",\n  \"temp\": 3\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"April\",\n  \"temp\": 18\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"May\",\n  \"temp\": 24\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"June\",\n  \"temp\": 34\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"July\",\n  \"temp\": 37\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"August\",\n  \"temp\": 30\n}\n],\n  options: {\n// \"experimental\": true,\n\"title\": \"Annual Heating costs\",\n// \"points\": {\n//   \"enabled\": false\n// },\n\"axes\": {\n  \"left\": {\n    \"title\": \"Heating Cost\",\n    \"mapsTo\": \"value\"\n  },\n  \"bottom\": {\n    \"scaleType\": ScaleTypes.LABELS,\n    \"mapsTo\": \"key\"\n  },\n  \"right\": {\n    \"title\": \"Temperature (°C)\",\n    \"mapsTo\": \"temp\",\n    // \"correspondingDatasets\": [\n    //   \"Temperature\"\n    // ]\n  }\n},\n\"comboChartTypes\": [\n  {\n    \"type\": \"area\",\n    \"options\": {},\n    \"correspondingDatasets\": [\n      \"Heating\"\n    ]\n  },\n  {\n    \"type\": \"line\",\n    \"options\": {\n      \"points\": {\n        \"enabled\": true\n      }\n    },\n    \"correspondingDatasets\": [\n      \"Temperature\"\n    ]\n  }\n],\n// \"curve\": \"curveNatural\",\n\"height\": \"400px\"\n}\n}\n\nconst gaugeChartState: {data: any, options: GaugeChartOptions} = {\n  data: [\n{\n  \"group\": \"value\",\n  \"value\": 42\n},\n{\n  \"group\": \"delta\",\n  \"value\": -13.37\n}\n],\n  options: {\n  \"title\": \"Comparison running costs\",\n  \"resizable\": true,\n  \"height\": \"380px\",\n  \"gauge\": {\n    \"status\": Statuses.DANGER,\n    \"type\": GaugeTypes.FULL\n  }\n  }\n};\n\nconst donutChartState: {data: any, options: DonutChartOptions} = {\n  data: [\n{\n  \"group\": \"Internal wall\",\n  \"value\": 2000\n},\n{\n  \"group\": \"Window\",\n  \"value\": 6500\n},\n{\n  \"group\": \"Floor\",\n  \"value\": 7500\n},\n{\n  \"group\": \"Roof\",\n  \"value\": 1200\n},\n{\n  \"group\": \"External Wall\",\n  \"value\": 1000\n},\n{\n  \"group\": \"Misc\",\n  \"value\": 2500\n}\n],\n  options: {\n\"title\": \"Breakdown of subassembly cost, £\",\n\"resizable\": true,\n\"donut\": {\n  \"center\": {\n    \"label\": \"Cost by subassembly type\"\n  }\n},\n\"height\": \"400px\"\n}\n};\n\n// // Lenses\n// import { Lens, lens, Optional } from 'monocle-ts/es6'\n// import { indexArray } from 'monocle-ts/lib/Index/Array'\n// import { pipe } from 'fp-ts/function'\n\n// type Projects_ = {\n//   __typename: \"projects\";\n//   id: string;\n//   projectId: string;\n//   projectOwner: any; //Owner_[];\n//   projectProperty: Property_[]\n// }\n// type Property_ = {\n//   __typename: 'property';\n//   id: string;\n//   propertyId: string;\n//   propertyUprn: string;\n//   propertyName: string;\n//   propertyAddress: string; \n//   propertyNorthing: number; \n//   propertyBoundary: object[];\n//   propertyDescription: string;\n//   propertyType: string; \n//   propertyBuilding2: string; \n//   propertyBuilding3: string; \n//   propertyBuilding1: Building_[]\n//   projects: Projects_[]\n// }\n\n// type Building_ = {\n//   __typename: \"building\";\n//   id: string;\n//   buildingId: string;\n//   buildingFoundationType: string;\n//   buildingNumberBathrooms: number;\n//   buildingName: string;\n//   buildingPattern: Patterns_[]\n//   buildingEnergyPerformance: any; //EnergyPerformance_[]\n//   property: Property[]\n// }\n// type Patterns_ = {\n//   __typename: 'patterns';\n//   id: string;\n//   patternId: number; \n//   patternBarcode: string; \n//   patternRating: number; \n//   patternJsonSchema: string; \n//   patternDesigner: Designers_[]\n//   building: Building_[],\n//   patternSubassembliesUsed?: Subassemblies_[]\n// }\n// type Designers_ = {\n//   __typename: 'designers';\n//   id: string;\n//   designerId: string; \n//   designerPhoto: object; \n//   designerName: string; \n//   patterns: Patterns_[]\n// };\n\n// export type Subassemblies_ = {\n//   __typename: 'subassemblies';\n//   id: string; \n//   subassemblyId: string;\n//   subassemblyName: string; \n//   subassemblyBuildingSystem: string; \n//   subassemblyLocationClass: string; \n//   subassemblyXDimension: number; \n//   subassemblyYDimension: number;\n//   subassemblyZDimension: number; \n//   subassemblyPitchedAngle1: number; \n//   subassemblyPitchedAngle2: number; \n//   subassemblySpansNStories: string; \n//   subassemblyThickness: number; \n//   subassemblyRoofPitchType: string; \n//   subassemblyAssemblyTimeInDays: number; \n//   subassemblyUnitCost: number; \n//   subassemblyPrimaryMaterial: string; \n//   subassemblyDesigner: string; \n//   patterns: Patterns_[]\n// }\n\n// const projectsArrayLens = indexArray<Projects_>().index(0)\n// // const propertyLens = L.prop<Projects>()('property'); // Lens<Parent, Child[]>\n// // const propertyLens = Optional.fromNullableProp<Projects>()('projectProperty')\n// const propertyLens = pipe(lens.id<Projects_>(), lens.prop('projectProperty'))\n// const propertyArrayLens = indexArray<Property_>().index(0);\n// const propertyBuilding1Lens = pipe( lens.id<Property_>(), lens.prop('propertyBuilding1') )\n// const propertyBuilding1ArrayLens = indexArray<Building_>().index(0);\n// const buildingPatternLens = pipe( lens.id<Building_>(), lens.prop('buildingPattern') )\n// const buildingPatternsArrayLens = indexArray<Patterns_>().index(0);\n// const buildingSubassembliesUsedLens = pipe( lens.id<Patterns_>(), lens.prop('patternSubassembliesUsed') )\n// const buildingSubassembliesUsedArrayLens = indexArray<Subassemblies_>().index(0)\n\n// const z = Lens.fromProp<Projects_>()('projectProperty').composeOptional(projectsArrayLens)\n\n\n\n\ntype Subassemblies_ = {\n  __typename: 'subassemblies';\n  id: string; \n  // subassemblyId: string;\n  subassemblyName: string; \n  subassemblyBuildingSystem: string; \n  subassemblyLocationClass: string; \n  subassemblyXDimension: number; \n  subassemblyYDimension: number;\n  subassemblyZDimension: number; \n  subassemblyPitchedAngle1: number; \n  subassemblyPitchedAngle2: number; \n  subassemblySpansNStories: string; \n  subassemblyThickness: number; \n  subassemblyRoofPitchType: string; \n  subassemblyAssemblyTimeInDays: number; \n  subassemblyUnitCost: number; \n  subassemblyPrimaryMaterial: string; \n  subassemblyDesigner: string[]; \n  patterns: object[], //Patterns_[]\n}\n\n  //headers specifies which table column headings should be displayed.\nconst headerData = [\n    {\n      key: '__typename',\n      header: '__typename',\n    },\n    {\n      key: 'subassemblyName',\n      header: 'subassemblyName',\n    },\n    {\n      key: 'subassemblyBuildingSystem',\n      header: 'subassemblyBuildingSystem',\n    },\n    {\n      key: 'subassemblyLocationClass',\n      header: 'subassemblyLocationClass',\n    },\n    {\n      key: 'subassemblyXDimension',\n      header: 'subassemblyXDimension',\n    },\n    {\n      key: 'subassemblyYDimension',\n      header: 'subassemblyYDimension',\n    },\n    {\n      key: 'subassemblyZDimension',\n      header: 'subassemblyZDimension',\n    },\n    {\n      key: 'subassemblyPitchedAngle1',\n      header: 'subassemblyPitchedAngle1',\n    }, \n    {\n      key: 'subassemblyPitchedAngle2',\n      header: 'subassemblyPitchedAngle2',\n    },\n    {\n      key: 'subassemblySpansNStories',\n      header: 'subassemblySpansNStories',\n    },\n    {\n      key: 'subassemblyThickness',\n      header: 'subassemblyThickness',\n    },\n    {\n      key: 'subassemblyRoofPitchType',\n      header: 'subassemblyRoofPitchType',\n    },\n    {\n      key: 'subassemblyAssemblyTimeInDays',\n      header: 'subassemblyAssemblyTimeInDays',\n    },\n\n    {\n      key: 'subassemblyUnitCost',\n      header: 'subassemblyUnitCost',\n    },\n    {\n      key: 'subassemblyPrimaryMaterial',\n      header: 'subassemblyPrimaryMaterial',\n    },\n    {\n      key: 'subassemblyDesigner',\n      header: 'subassemblyDesigner',\n    },\n    {\n      key: 'patterns',\n      header: 'patterns',\n    },\n  \n    \n  ];\n  \n\ninterface AnalyticsPageState {\n  rowData: Subassemblies_[] //{id: string; [h: string]: string}[],\n  headerData:  { key: string; header: string; }[]\n} \n\n\nconst initalState: AnalyticsPageState = {\n  rowData: [{\n      subassemblyAssemblyTimeInDays: 2,\n      subassemblyBuildingSystem: \"WikiHouseSwift\",\n      subassemblyDesigner: [\"Clayton\", \"Alastair Parvin\"],\n      id: \"23\",\n      subassemblyLocationClass: \"EnvelopeSection\",\n      subassemblyName: \"Module-B2_05\",\n      subassemblyPitchedAngle1: 60,\n      subassemblyPitchedAngle2: 30,\n      subassemblyPrimaryMaterial: \"Timber.Plywood\",\n      subassemblyRoofPitchType: \"Mono\",\n      subassemblySpansNStories: \"2\",\n      subassemblyThickness: 0.336,\n      subassemblyUnitCost: 925,\n      subassemblyXDimension: 3.3,\n      subassemblyYDimension: 1.2,\n      subassemblyZDimension: 8.5,\n      __typename: \"subassemblies\"\n    }] as Array<Subassemblies_>,\n  headerData: headerData\n} \n  \n\ntype Action =\n  | { _tag: \"onSubassemblyQuery\";        payload: {subassemblies: Subassemblies_[] }   }\n\n\n\nconst AnalyticsPageReducer = (state: AnalyticsPageState, action: Action) => {\n  switch (action._tag) {\n    case \"onSubassemblyQuery\":\n      \n      return {...state, rowData: action.payload.subassemblies};\n    default:\n      throw new Error();\n  }\n}\n\ninterface AnalyticsPageViewProps {\n\n}\n\nconst AnalyticsPage = (props: AnalyticsPageViewProps): JSX.Element => {\n\n\n\n  \n  const [state, localDispatch] = useReducer(AnalyticsPageReducer, initalState);\n\n\n  const GetAllSubassemblies_graphql = loader('src/queries/GetAllSubassemblies.graphql');\n  const { data, loading, error }= useQuery<GetAllSubassembliesQuery, GetAllSubassembliesQueryVariables>( GetAllSubassemblies_graphql);\n  console.log(data); \n  \n\n  return (\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter analytics-page\">\n\n  \n\n    <div className=\"bx--row bx--grid\">\n    <h1> Costings </h1> \n    </div>\n\n    <div className=\"bx--row bx--grid\">\n        {/* <RadarChart data={example_radarChartData} options={example_radarChartOptions}/> */}\n        <TreeChart data={example_treeMapData} options={example_treeMapOptions}/>\n    </div>\n\n    <div className=\"bx--row bx--grid\">\n      <h1> Building Performance Metrics  </h1> \n    </div>\n\n    <div className=\"bx--row bx--grid\">\n        <div className = \"bx--col\">\n        <RadarChart data={example_radarChartData} options={example_radarChartOptions}/>\n        </div>\n        <div className = \"bx--col\">\n        <GaugeChart\n          data={gaugeChartState.data}\n          options={gaugeChartState.options}\n        />\n        </div>\n        <div className = \"bx--col\">\n        <DonutChart\n          data={donutChartState.data}\n          options={donutChartState.options}\n        />\n        </div>\n    </div>\n\n    <div className=\"bx--row bx--grid\">\n\n    <ComboChart\n\t\t\tdata={comboChartState.data}\n\t\t\toptions={comboChartState.options}\n\t\t/>\n\t\t\n    </div>\n\n\n    <div className=\"bx--row bx--grid\">\n      <h1> Integration with Airtable  </h1> \n    </div>\n\n    <div className=\"bx--row bx--grid\">\n\n      <Button\n          onClick = {(e)    => { \n            return localDispatch({_tag: \"onSubassemblyQuery\", payload: {subassemblies: data?.subassemblies as Subassemblies_[]} }) \n          }}\n      >\n        Get Airtable data \n      </Button>\n    </div>\n    <div className=\"bx--row bx--grid\">\n        {state.rowData.length === 1 ?\n          <div style={{ width: '100%' }}> \n          <DataTableSkeleton {...dataTableSkeletonProps}/>\n          </div> :\n          <DataTable rows={state.rowData} headers={state.headerData}/>}\n    </div>\n\n    \n\n    </div>      \n  )\n}\nexport default AnalyticsPage; \n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/DataTable/DataTable.tsx",["632"],"// https://react.carbondesignsystem.com/?path=/docs/datatable-development--example\n\nimport React from 'react';\nimport { \n  DataTable, TableContainer, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, DataTableProps,\n  TableToolbar, TableBatchAction, TableBatchActions, TableToolbarContent, TableToolbarSearch, TableToolbarMenu, TableToolbarAction, TableSelectAll, TableSelectRow,\n  Button\n} from 'carbon-components-react';\nimport { Delete16 as Delete, Save16 as Save, Download16 as Download } from '@carbon/icons-react'; \n\n// see docs on styles: https://www.carbondesignsystem.com/components/data-table/style\n\n\n\nconst dataTableProps: Partial<DataTableProps> = {\n}\n\n//rows prop -> data to display in the rows of table\n//Each row in the rows prop should provide a unique id\n\n\n\n\nconst BatchActionsDataTable = ({rows, headers}: DataTableProps) => {\n  return(\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter\">\n    <div className=\"bx--row data-table__r1\">\n    <div className=\"bx--col-lg-16\">\n    <div className = 'bx--data-table'>\n\n      \n\n        <DataTable rows={rows} headers={headers}>\n      {({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getSelectionProps,\n        getBatchActionProps,\n        onInputChange,\n        selectedRows,\n      }: {\n        rows: any,\n        headers: any,\n        getHeaderProps: any,\n        getRowProps: any,\n        getSelectionProps: any,\n        getBatchActionProps: any,\n        onInputChange: any,\n        selectedRows: any,\n      }) => (\n        <TableContainer /*title=\"DataTable with batch actions\"*/>\n          <TableToolbar>\n            <TableBatchActions {...getBatchActionProps()}>\n              <TableBatchAction\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n                renderIcon={Delete}\n                onClick={() => console.log('clicked')}\n              >\n                Delete\n              </TableBatchAction>\n              <TableBatchAction\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n                renderIcon={Save}\n                onClick={() => console.log('clicked')}\n              >\n                Save\n              </TableBatchAction>\n              <TableBatchAction\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n                renderIcon={Download}\n                onClick={() => console.log('clicked')}\n              >\n                Download\n              </TableBatchAction>\n            </TableBatchActions>\n            <TableToolbarContent>\n              <TableToolbarSearch\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n                onChange={onInputChange}\n              />\n              <TableToolbarMenu\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n              >\n                <TableToolbarAction primaryFocus onClick={() => alert('Alert 1')}>\n                  Action 1\n                </TableToolbarAction>\n                <TableToolbarAction onClick={() => alert('Alert 2')}>\n                  Action 2\n                </TableToolbarAction>\n                <TableToolbarAction onClick={() => alert('Alert 3')}>\n                  Action 3\n                </TableToolbarAction>\n              </TableToolbarMenu>\n              <Button\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n                onClick={() => console.log('clicked')}\n                size=\"small\"\n                kind=\"primary\"\n              >\n                Add new\n              </Button>\n            </TableToolbarContent>\n          </TableToolbar>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableSelectAll {...getSelectionProps()} />\n                {headers.map((header: any) => (\n                  <TableHeader {...getHeaderProps({ header })}>\n                    {header.header}\n                  </TableHeader>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row: any) => (\n                <TableRow {...getRowProps({ row })}>\n                  <TableSelectRow {...getSelectionProps({ row })} />\n                  {row.cells.map((cell: any) => (\n                    <TableCell key={cell.id}>{cell.value}</TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </DataTable>\n</div>\n</div>\n</div>\n</div>\n  )\n}\n  \nexport default BatchActionsDataTable; \n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/page/builder3D-page/Builder3DPage.tsx",["633"],"\nimport React from 'react'\nimport Editor from '../../components/3d-editor/Editor';\n// import './builder-3D-page'; \n\ninterface Props {}\n\nfunction Builder3DPage(props: Props) {\n    const {} = props\n\n    return (\n        <div className='builder-3D-page'>\n            <Editor/>\n        \n            {/* <a href=\"https://github.com/drcmda/react-three-fiber\" className=\"builder-3D-page top-left\" children=\"Github\" />\n            <a href=\"https://twitter.com/0xca0a\" className=\"builder-3D-page top-right\" children=\"Twitter\" />\n            <a href=\"https://github.com/react-spring/react-spring\" className=\"builder-3D-page ottom-left\" children=\"+ react-spring\" />\n            <a href=\"https://www.instagram.com/tina.henschel/\" className=\"builder-3D-page bottom-right\" children=\"Illustrations @ Tina Henschel\" />\n            <span className=\"builder-3D-page header\">REACT THREE FIBER</span> */}\n\n\n            \n            \n        </div>\n    )\n}\n\nexport default Builder3DPage\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Tree/index.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Tree/TreeChart.tsx",["634"],"import React from 'react'; \n\nimport { TreemapChart } from \"@carbon/charts-react\";\nimport { TreemapChartOptions } from '@carbon/charts/interfaces/index'\n\n\n\ntype TreeMapData = {\n    name: string;\n    children: ({\n        name: string;\n        value: number;\n        showLabel: boolean;\n    } | {\n        name: string;\n        value: number;\n    })[];\n}[]\n\nexport const example_treeMapData: TreeMapData = [\n    {\n      \"name\": \"Materials\",\n      \"children\": [\n        {\n          \"name\": \"Structural Panels\",\n          \"value\": 800,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Concrete Slab\",\n          \"value\": 200,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Fit-out materials\",\n          \"value\": 100,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Miscellaneous\",\n          \"value\": 900,\n          \"showLabel\": true\n\n        }\n      ]\n    },\n    {\n      \"name\": \"Labour\",\n      \"children\": [\n        {\n          \"name\": \"Foundation instillation\",\n          \"value\": 2800,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"CNC cutting\",\n          \"value\": 10000,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Other Services\",\n          \"value\": 500,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Other labour\",\n          \"value\": 500,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Miscellaneous services\",\n          \"value\": 200,\n          \"showLabel\": true\n\n        }\n      ]\n    },\n    {\n      \"name\": \"Admin\",\n      \"children\": [\n        {\n          \"name\": \"Site Engineering\",\n          \"value\": 3500,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Planning application\",\n          \"value\": 3000,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Liscence fees\",\n          \"value\": 2000,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Other admin\",\n          \"value\": 500,\n          \"showLabel\": true\n\n        },\n      ]\n    }\n  ]\n\nexport const example_treeMapOptions: TreemapChartOptions = {\n  // getFillColor: '',\n    \t/**\n\t * Optionally specify a title for the chart\n\t */\n\ttitle: 'Aggregated costings of material, labour & admin',\n\t/**\n\t * boolean to disable animations (enabled by default)\n\t */\n\tanimations: true,\n\t/**\n\t * boolean to prevent the container from resizing\n\t */\n\tresizable: true,\n\t/**\n\t * Optionally specify a width for the chart\n\t */\n\t// width?: string;\n\t/**\n\t * Optionally specify a height for the chart\n\t */\n\theight: '400px',\n\t/**\n\t * tooltip configuration\n\t */\n\t// tooltip?: TooltipOptions;\n\t/**\n\t * legend configuration\n\t */\n\t// legend?: LegendOptions;\n\t/**\n\t * Optional function to determine whether is filled based on datasetLabel, label, and/or data\n\t */\n\t// getIsFilled?: (\n\t// \tdatasetLabel: any,\n\t// \tlabel?: any,\n\t// \tdata?: any,\n\t// \tdefaultFilled?: boolean\n\t// ) => boolean;\n\t/**\n\t * Optional function to generate the fill color based on datasetLabel, label, and/or data\n\t */\n\t// getFillColor?: (\n\t// \tdatasetLabel: any,\n\t// \tlabel?: any,\n\t// \tdata?: any,\n\t// \tdefaultFillColor?: string\n\t// ) => string;\n\t/**\n\t * Optional function to generate the stroke color based on datasetLabel, label, and/or data\n\t */\n\t// getStrokeColor?: (\n\t// \tdatasetLabel: any,\n\t// \tlabel?: any,\n\t// \tdata?: any,\n\t// \tdefaultStrokeColor?: string\n\t// ) => string;\n\t/**\n\t * stylesheet options\n\t */\n\t// style: {\n\t// \t/**\n\t// \t * optional prefixing string for css classes (defaults to 'cc')\n\t// \t */\n\t// \tprefix: 'bx-'\n\t// },\n\t/**\n\t * options related to charting data\n\t */\n\t// data?: {\n\t// \t/**\n\t// \t * identifier for data groups\n\t// \t */\n\t// \tgroupMapsTo?: string;\n\t// \t/**\n\t// \t * used to simulate data loading in skeleton way\n\t// \t */\n\t// \tloading?: boolean;\n\t// \t/**\n\t// \t * options related to pre-selected data groups\n\t// \t * Remains empty if every legend item is active or dataset doesn't have the data groups.\n\t// \t */\n\t// \tselectedGroups?: string[];\n\t// };\n\t/**\n\t * options related to color scales\n\t */\n// \tcolor?: {\n// \t\t/**\n// \t\t * e.g. { \"Dataset 1\": \"blue\" }\n// \t\t */\n// \t\tscale?: object;\n// \t\t/**\n// \t\t * use a carbon dataviz preset color palette\n// \t\t * put the index (selection of which variant)\n// \t\t */\n// \t\tpairing?: {\n// \t\t\t/**\n// \t\t\t * the number of color variants in the palette (defaults to using the number of data groups in the given data)\n// \t\t\t */\n// \t\t\tnumberOfVariants?: number;\n// \t\t\t/**\n// \t\t\t * the option number of the color paring\n// \t\t\t */\n// \t\t\toption?: number;\n// \t\t};\n// \t\t/*\n// \t\t * options related to gradient\n// \t\t * e.g. { enabled: true }\n// \t\t */\n// \t\tgradient?: object;\n// \t};\n}\n\nexport interface GridOptions {\n\ty?: {\n\t\tenabled?: boolean;\n\t\tnumberOfTicks?: number;\n\t};\n\tx?: {\n\t\tenabled?: boolean;\n\t\tnumberOfTicks?: number;\n\t};\n}\ninterface TreeMapChartProps {\n    data: TreeMapData; \n    options: TreemapChartOptions; \n}\n\nconst _TreeMapChart = ({data, options}: { data: TreeMapData, options: TreemapChartOptions }): JSX.Element => {\n\n    return (\n        <>\n\t\t<TreemapChart\n\t\t\tdata={data}\n\t\t\toptions={options}\n        />\t\n        </>\n    )\n\n}\n\nexport default _TreeMapChart; \n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Radar/index.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/body/Chart/Radar/RadarChart.tsx",["635","636"],"import React from 'react'; \n\nimport { RadarChart } from \"@carbon/charts-react\";\n//Types: https://carbon-design-system.github.io/carbon-charts/documentation/modules/_interfaces_charts_.html\nimport { RadarChartOptions } from '@carbon/charts/interfaces/index'\nimport { options as ImplOptions} from '@carbon/charts/configuration'; \n\n\n\nexport type RadarChartData = {\n    product: string;\n    feature: string;\n    score: number;\n}[];\n\nexport const example_radarChartData: RadarChartData = [\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Wind Exposure\",\n\t\t\"score\": 60\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Shading Efficiency\",\n\t\t\"score\": 92\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Cross Ventilation\",\n\t\t\"score\": 5\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Ground Coupling\",\n\t\t\"score\": 85\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"View Quality\",\n\t\t\"score\": 60\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Wind Exposure\",\n\t\t\"score\": 70\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Shading Efficiency\",\n\t\t\"score\": 63\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Cross Ventilation\",\n\t\t\"score\": 78\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Ground Coupling\",\n\t\t\"score\": 50\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"View Quality\",\n\t\t\"score\": 30\n\t}\n];\n\n// import { RadarChart } from 'carbon-components-react'; \n\n/* ------ Carbon Data visualation Config  -------- */\nexport const example_radarChartOptions: RadarChartOptions = {\n\n\t\"title\": \"Performance within Enviroment\",\n\t\"radar\": {\n\t\t\"axes\": {\n\t\t\t\"angle\": \"feature\",\n\t\t\t\"value\": \"score\"\n\t\t}\n\t},\n\t\"data\": {\n\t\t\"groupMapsTo\": \"product\"\n\t},\n\t\"height\": \"400px\",\n    \"resizable\": true,\n\n};\n\n\ninterface RadarChartProps {\n    data: RadarChartData; \n    options: RadarChartOptions; \n}\n\nconst _RadarChart = ({data, options}: { data: RadarChartData, options: RadarChartOptions }): JSX.Element => {\n\n    return (\n        <>\n\t\t<RadarChart\n\t\t\tdata={data}\n\t\t\toptions={options}\n        />\t\n        </>\n    )\n\n}\nexport default _RadarChart; \n\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/index.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Graph.ts",["637","638","639","640","641","642","643","644"],"// import * as Re from 'fp-ts/Record'; \nimport * as S from 'fp-ts/Semigroup'; \nimport * as F from 'fp-ts/function'; \nimport * as A from 'fp-ts/Array'; \nimport * as O from 'fp-ts/Option'; \nimport * as _Map from 'fp-ts/Map'; \nimport * as _Set from 'fp-ts/Set'; \nimport * as L from 'monocle-ts'; \nimport { getLenses } from 'io-ts-types'; \nimport { IVertex, IVertexData, makeVertex} from './Vertex'\nimport { IEdge, IEdgeData, makeEdge } from './Edge'\n\n\n\n///////////////////////////////////////////////////////////\n/// Constants \n///////////////////////////////////////////////////////////\nexport const ROOT_NODE_KEY = \"_root\";\n\n\n///////////////////////////////////////////////////////////\n/// Types \n///////////////////////////////////////////////////////////\n\nexport interface IGraph<V, E> {\n    vertices: IVertex<V>[],\n    edges: IEdge<E>[],\n}\nexport type AdjacencyMap<A> = Map<A, Set<A>>;  // for us: A = IVertex<IVertexData>\n\n\n///////////////////////////////////////////////////////////\n/// Constructor\n///////////////////////////////////////////////////////////\n\n/**\n* () -> IGraph\n* \n* Generates new empty graph\n* @returns IGraph Graph\n*/\nexport const makeGraph = <V,E>(\n    vertices?: IVertex<V>[],\n    edges?: IEdge<E>[]\n): IGraph<V,E> => ({\n    vertices: vertices? vertices: new Array<IVertex<V>>(),\n    edges: edges? edges: new Array<IEdge<E>>()\n})\n\n\n///////////////////////////////////////////////////////////\n/// Methods \n///////////////////////////////////////////////////////////\n\n/**\n* getVertexHash :: IVertex -> String\n* \n* Hashing function for IVertex. Can be customized.\n* @param IVertex Vertex\n* @return String Vertex's hash\n*/\nexport const getVertexHash = <V>(vertex: IVertex<V>) => vertex.vertexID\n\n/**\n* getEdgeHash :: IEdge -> String\n* \n* Hashing function for IEdge. Can be customized.\n* @param IEdge Edge\n* @return String Edge's hash\n*/\nexport const getEdgeHash =  <E>(edge: IEdge<E>) => `${edge.link[0]} - ${edge.link[1]}`\n\n/**\n* edgeHash :: () -> Array<IVertex>\n* \n* Returns a list of all vertices in a graph\n* @params IGraph Graph\n* @return Array<IVertex> List of all Vertices\n*/\nexport const getVertices = L.Lens.fromProp<IGraph<IVertexData, IEdgeData>>()('vertices').get\n// or alteernatively: const getVertices = prop('vertices')\n\n/**\n* getEdges :: IGraph -> Array<IEdge>\n* \n* Returns a list of all edges in a graph\n* @params IGraph Graph\n* @return Array<IEdge> List of all Edges\n*/\nexport const getEdges = L.Lens.fromProp<IGraph<IVertexData, IEdgeData>>()('edges').get\n// or alternaitvely: const getEdges = prop('edges')\n\n\n /**\n* addVertex :: IVertex -> IGraph -> IGraph\n* \n* Adds Vertex to the graph\n* @param IVertex Vertex\n* @param IGraph Graph\n* @return IGraph Graph\n*/\n export const addVertex = (vertex: IVertex<IVertexData>, g: IGraph<IVertexData,IEdgeData>): IGraph<IVertexData,IEdgeData>  => {\n    // Below 3 lines is a more ramda-esque approach\n    //const vertices = getVertices(g); \n    // const verticesWithAdditionalVertex = A.snoc(vertices, vertex); \n    // return assoc('vertices', verticesWithAdditionalVertex, g);\n    const graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n        vertices: A.getMonoid<IVertex<IVertexData>>(), \n        edges: A.getMonoid<IEdge<IEdgeData>>()\n    }); \n    return graphSemiGroup.concat(\n        g, \n        makeGraph([vertex], new Array<IEdge<IEdgeData>>())\n    ) \n    /// ^ advantage of semigroup approach is that we can add conditions to semigroup, such that\n    // we don't have repeated node ids etc. \n}\n\n /**\n* getVertexByHash :: String -> IGraph -> IVertex\n* \n* Return Vertex by Hash\n* @param String Vertex's hash\n* @param IGraph Graph\n* @return IVertex Vertex if exists or undefined\n*/\n\nexport const getVertexByHash = (vertexHash: String, g: IGraph<IVertexData, IEdgeData>)\n:O.Option<IVertex<IVertexData>[]> => {\n    // type Predicate<A> = (a: A) => boolean\n    const predicate: F.Predicate<IVertex<IVertexData>> = (a) => a.vertexID === vertexHash\n    const filtered = A.filter(predicate)(getVertices(g))\n    return filtered[0] === undefined ? O.none : O.some(filtered)\n}\n\nexport const addEdge = (edge: IEdge<IEdgeData>, g: IGraph<IVertexData, IEdgeData>)\n: IGraph<IVertexData, IEdgeData> => {\n    const graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n        vertices: A.getMonoid<IVertex<IVertexData>>(), \n        edges: A.getMonoid<IEdge<IEdgeData>>()\n    }); \n    return graphSemiGroup.concat(\n        g, \n        makeGraph(new Array<IVertex<IVertexData>>(), [edge])\n    ) \n}\nexport const getEdgesByHash = (edgeHash: [string,string], g: IGraph<IVertexData, IEdgeData>)\n:O.Option<IEdge<IEdgeData>[]> => {\n     // type Predicate<A> = (a: A) => boolean\n     const predicate: F.Predicate<IEdge<IEdgeData>> = (a) => a.link === edgeHash; //note: this is only for direcred graphs...\n     const filtered = A.filter(predicate)(getEdges(g))\n     return filtered[0] === undefined ? O.none : O.some(filtered)\n\n}\n\n /**\n* getNeightborEdgesFromVertexHash :: String -> IGraph -> Array<IEdge>\n* \n* Get all neightboring Edges from Vertex by Vertex Hash\n* @param String Vertex's Hash\n* @param IGraph Graph\n* @result Array<IEdge> Matched Edges from the Vertex\n*/\nexport const getNeightborEdgesFromVertexHash = (\n    vertexHash: String, \n    g: IGraph<IVertexData, IEdgeData>\n): O.Option<IEdge<IEdgeData>[]> =>{\n    return F.pipe(\n    //Likely to be far more edges than vertices. Check for existence of vertex first\n    getVertexByHash(vertexHash, g),\n    O.fold(\n        () => {return O.none},\n        (r) => {\n            const predicate: F.Predicate<IEdge<IEdgeData>> = (a) => a.link[0] === vertexHash; //note: this is only for direcred graphs...\n            const filtered = A.filter(predicate)(getEdges(g))\n            return filtered[0] === undefined ? O.none : O.some(filtered)\n        }\n        )\n    )\n}\n\n\n\n// For each type of edge, we create an adjacency matrix\n// We need one ajacency map for each type of edge... 'childOf', 'parentOf', 'neighbourOf'\n// export const getAdjacencyMap = (g: IGraph<IVertexData, IEdgeData>) => {\n\n//     // Depending om the edge type, we return a different adjacency matrix: \n\n//     const vertices = getVertices(g); \n//     const edges = getEdges(g); \n   \n//     //const m = monoidSetMap(eqVertex).concat()\n//     const s = new Set<IVertex<IVertexData>>()\n//     for (const v of vertices){\n//         for (const e of edges){\n\n//         }\n//     }\n// }\n\n///////////////////////////////////////////////////////////\n/// Semigroups \n///////////////////////////////////////////////////////////\n\nconst vertexSemiGroup = S.getObjectSemigroup<IVertex<IVertexData>>(); \nconst edgeSemiGroup = S.getObjectSemigroup<IEdge<IEdgeData>>(); \n// see: https://dev.to/gcanti/getting-started-with-fp-ts-semigroup-2mf7\n// const getGraphSemiGroup = <V,E>() => {\n//     return S.getStructSemigroup({\n//     // accumulate things\n//     vertices: A.getMonoid<IVertex<V>>(), // <= getMonoid returns a Semigroup \n//     edges: A.getMonoid<IEdge<E>>()\n// })}; \nconst graphSemiGroup: S.Semigroup<IGraph<IVertexData, IEdgeData>> = S.getStructSemigroup({\n    vertices: A.getMonoid<IVertex<IVertexData>>(), \n    edges: A.getMonoid<IEdge<IEdgeData>>()\n}); \n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Edge.ts",["645","646","647","648","649","650","651"],"\nimport * as F from 'fp-ts/function'; \nimport * as Eq from 'fp-ts/Eq'\nimport { SwiftModule } from '../meta-data/swiftComponentData'\nimport {componentBonds, tBondID, Bond, BondID } from './Bond'; \nimport { v4 as uuidv4 } from 'uuid';\nimport { IVertex } from './Vertex'; \n//   receptor = binding => effector function\n// If a block is connected to another block, this must update the state of the original block? \n// lock & key ? receptor & antigen?  \n\n\n\n\nexport interface IEdge<E> {\n    link: [string,string],\n    data: E; \n}\n\nexport type EdgeLogic = \n| {_tag: 'childOf' }  \n| {_tag: 'parentOf' }\n| {_tag: 'neighbourOf', bond: Bond}\n// | {_tag: 'x', bond: Bond -> will relate how the two components are joined together. i.e the transformation}\n\nexport interface IEdgeData{\n    // All our edges will be directed to keep things simple. \n\n    // type Predicate<A> = (a: A) => boolean\n    // predicate is defined by truth tables, which are designer set. \n    edgeLogic: EdgeLogic\n\n}\n\n//Constructors:\n\nexport const makeEdge = <E, V>(\n    vertex1: IVertex<V>,\n    vertex2: IVertex<V>,\n    data: E\n): IEdge<E> => {\n    return {\n      link: [vertex1.vertexID, vertex2.vertexID], data: data\n    }\n}\n\n\nexport const matchEdge = <R1, R2, R3>(\n    onChildOf: () => R1,\n    onParentOf: () => R2,\n    onNeighbourOf: (bond: Bond) => R3\n) => (edgeLogic: EdgeLogic): any => {\n    switch (edgeLogic._tag) {\n      case 'childOf':\n        return onChildOf()\n      case 'parentOf':\n        return onParentOf()\n      case 'neighbourOf':\n        return onNeighbourOf(edgeLogic.bond)\n    }\n  }\n\n\n\n\n//Eq\nconst eqEdgeLogic: Eq.Eq<EdgeLogic> = Eq.fromEquals((x, y) => {\n    if (x._tag === 'childOf' && y._tag === 'childOf') return true\n    return false;\n  });\n\n\nconst eqEdge = Eq.getStructEq({\n    link: Eq.getTupleEq(Eq.eqString, Eq.eqString),\n    data: eqEdgeLogic\n})\n\n\n// Truth tables: which components can be joined to one another?\n\n// Can we use an analogy from lego, or protein-protein interaction? \n\n\n// type Predicate<A> = (a: A) => boolean\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Bond.ts",["652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667"],"\nimport * as E from 'fp-ts/Either'\nimport * as Eq from 'fp-ts/Eq'\nimport * as F from 'fp-ts/function'\nimport * as _Map from 'fp-ts/Map'\nimport * as O from 'fp-ts/Option'\nimport * as Ord from 'fp-ts/Ord'\nimport * as S from 'fp-ts/Semigroup'\nimport  * as Show from 'fp-ts/Show'\nimport * as C from 'io-ts/Codec'\nimport * as D from 'io-ts/Decoder'\nimport * as G from 'io-ts/Guard'\nimport * as M from 'fp-ts/Monoid'; \nimport * as R from 'fp-ts/Record'\nimport { Matrix4Tuple } from './Matrix4';  \nimport { v4 as uuidv4 } from 'uuid';\n\n// MetaData\nimport { SwiftModule } from '../meta-data/swiftComponentData'\nimport { SkylarkModule } from '../meta-data/skylarkComponentData'\n\n\n///////////////\n// This is for situaitons where we want to click on a block, and add a block to it. Or if we drag and drop a block\n// onto another block. We check whether the bond is actually possible, and then (if so) we provide the transformation \n// operation to stick the added block on in the right place.\n// These sorts of operations are useful, too, when we are doing are pattern definitions\n\n\n//Bond + utilies \n\n// A face type has an id, which will be a prime number. A bond id is the multi0lication of the face ids that it is joining.\n// A face will also have a 'bondwithID', which is a multiplication of all the faceIDs that it can bind with. If it can bind with all,\n// we can set the bondwithID to 1, i.e. universal bonder. \n\n/*\nFace1 ID         2  |----------------------------------------->     .\nFace2 ID         2         3         5           7 ..\n\nBond ID          4          6       10           14       \n*/\n\n\n// bonds occur at the join between grid cells... \n\n\nexport interface Bond { readonly bondID: number, readonly transform: Matrix4Tuple }\n\nexport const makeBond = (bondID: number, transform: Matrix4Tuple): Bond => {\n  return {bondID: bondID, transform: transform}\n}\n\ntype BondKeyString = `${SwiftModule}->${SwiftModule}`\n\n\n// fp-ts utilities : Equals & Order \nconst ordBond = F.pipe( Ord.ordNumber, Ord.contramap((u: Bond) => u.bondID) )\nconst eqBond: Eq.Eq<Bond> = { equals: ordBond.equals }\nconst eqBondKeyString: Eq.Eq<BondKeyString> = Eq.fromEquals((x,y) => x === y); \nconst ordBondKeyString = Ord.fromCompare<BondKeyString>((x,y) => Ord.ordString.compare(x, y))\n\n\nexport const componentBonds: Map<BondKeyString, Bond> = new Map<BondKeyString, Bond>(); \n\n\n// Operations\nconst elemBond = _Map.elem(eqBond)\nconst keys = _Map.keys(ordBondKeyString)\nconst values = _Map.values(ordBond)\nconst toArray = _Map.toArray(ordBondKeyString)\nconst lookupWithKey = _Map.lookupWithKey(eqBondKeyString)\n\nexport const findBondValue = (bondString: BondKeyString): O.Option<[BondKeyString, Bond]> => {\n  return _Map.lookupWithKey(eqBondKeyString)(bondString)(componentBonds)\n}\n\n//refinement: \nconst isNumber = (u: string | number): u is number => typeof u === 'number'\n// const filter = (y:  Map<[SwiftModule,SwiftModule], Bond>) => F.pipe(y, _Map.filter(isNumber))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// connection ids \nexport const primes = [\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, \n  83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, \n  179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, \n  277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, \n  383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, \n  491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, \n  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, \n  733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, \n  857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, \n  983, 991, 997\n]\n\n\n\n// a bondID is simply the multiplication of primes.  => our ids are prime factorisation, with unique primes\nexport interface PrimesMultipliedBrand {\n  readonly PrimesMultiplied: unique symbol\n}\nexport type tBondID = number & PrimesMultipliedBrand\nexport const BondID: D.Decoder<unknown, tBondID> = F.pipe(\n  D.number,\n  D.refine((n): n is tBondID => {\n\n    const primeFactorization = (number: number, result?: any): any => {\n      var result = (result || []);\n      var root = Math.sqrt(number);\n      var x = 2;\n    \n      if (number % x) {\n        x = 3;\n    \n        while ((number % x) && ((x = (x + 2)) < root)) {}\n      }\n    \n      x = (x <= root) ? x : number;\n    \n      result.push(x);\n    \n      return (x === number) ? result : primeFactorization((number / x), result);\n    };\n\n    return (primeFactorization(n) as number[]).every(val => primes.includes(val));\n\n  }, 'BondID')\n)\n\n// export type BondID = D.TypeOf<typeof BondID>\n\n\n\n\n\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Vertex.ts",["668","669","670"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Component.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Container.ts",["671","672","673","674"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/graph/Matrix4.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/header/carbon-header/CarbonHeader.tsx",["675"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/header/material-header/MaterialHeader.tsx",["676","677","678","679","680","681"],"import React from 'react'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { IconButton, Avatar } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport ViewQuiltIcon from '@material-ui/icons/ViewQuilt';\nimport SendIcon from '@material-ui/icons/Send';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport CropSquareIcon from '@material-ui/icons/CropSquare';\n\ninterface MaterialHeaderProps {}\n\nconst MaterialHeader = (props: MaterialHeaderProps): JSX.Element => {\n    const {} = props\n\n    return (\n        <div className=\"bx--grid--full-width\">\n\n        <div className=\"bx--row\">\n        <div className = \"material-header\">\n\n\n        <div className=\"material-header__left\">\n        <IconButton>\n                    <MenuIcon/>\n                </IconButton>\n\n                {/** Wikihouse Logo  */}\n                {/* <img src = 'https://freight.cargo.site/t/original/i/50cc73196a8e80a6774a8f03cee687f5164e726f614681ff2a4ff307bf9ff082/WikiHouse-Banner---Black.png' alt ='' /> */}\n        </div>\n\n\n        <div className=\"material-header__middle\">\n            {/** --- R3F: Builder ---- */}\n            <IconButton> <CropSquareIcon/> </IconButton>\n            {/** --- Analytics ---- */}\n            <IconButton> <BarChartIcon/> </IconButton> \n        \n            {/** --- Scheduler ---- */}\n            <IconButton> <ViewQuiltIcon/> </IconButton>\n            {/** --- Messenger ---- */}\n            <IconButton> <SendIcon/> </IconButton>\n        </div>\n\n        <div className=\"material-header__right\">\n            <IconButton>\n                <Avatar/>\n            </IconButton>\n        </div>\n\n            \n\n            \n\n            {/** ------- Search bar  ------- */}\n            {/* <div className=\"header__middle\">\n                <SearchIcon/>\n                <input placeholder='search pattern libaray' type='text'/>\n                <ArrowDropDownIcon className = 'header__inputCaret'/>\n            </div> */}\n\n         \n\n        </div>\n\n        </div>\n\n        </div>\n\n        \n    )\n}\n\nexport default MaterialHeader\n",["682","683"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/materials/cladding.ts",["684","685","686","687","688","689","690"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/materials/zincMaterial.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/materials/plywoodMaterial.ts",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Container/GroupContainer.tsx",["691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706"],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms2/N/N-ROOF-BLK.tsx",[],"/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/components/3d-editor/Container/MeshContainer.tsx",["707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725"],"import React, { useRef, useState, useCallback, useEffect, Suspense } from \"react\"\nimport { useFrame, MouseEvent, PointerEvent, WheelEvent, MeshProps, EventHandlers, GroupProps  } from \"react-three-fiber\"\nimport { Geometry, Mesh } from 'three'; \nimport * as THREE from 'three'; \nimport { Html, HtmlProps, meshBounds, Loader} from '@react-three/drei'; \n\nimport { IContainer, makeContainer, IFaces, ContainerState, containerConstructors } from '../../../graph'\n\nimport { useSpring, animated } from 'react-spring'; \n\n// For the tooltip\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n//Global State\nimport { useDispatch } from 'react-redux'; \nimport { bringAllContainersIntoFocus, bringContainerIntoFocus } from '../../../store/Editor/actions'; \n\n\nimport {  plywoodMaterial } from '../../../materials/plywoodMaterial'; \n\n//LOAD GEOMETRY/MATERIALS\n\n// Example mesh\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { GLTF  } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport {GLTFResult} from '../../../Models/Swift/A3'\nuseGLTF.preload('/Swift/A3.glb')\n\n\n// type GLTFResult = GLTF & ObjectMap\n\n\n\n// On double click: zoom in and isolate the container -> view from particular angle. \n// useSpring ?  Must be global state ? \n\n\n/// Tooltip\n\nconst toolTipProps: HtmlProps = {\n\n  prepend: false, // boolean: Project content behind the canvas (default: false)\n  center: false, // boolean: Adds a -50%/-50% css transform (default: false)\n  fullscreen: false, // boolean: Aligns to the upper-left corner, fills the screen (default:false)\n  scaleFactor: 10, // If set (default: undefined), children will be scaled by this factor, and also by distance to a PerspectiveCamera.\n  zIndexRange: [100, 0], //Array<number> :  Z-order range (default=[16777271, 0])\n  portal: undefined // React.MutableRefObject<HTMLElement>: Reference to target container (default=undefined)\n  // {...groupProps} // All THREE.Group props are valid\n  // {...divProps} // All HTMLDivElement props are valid\n\n}\n\nconst ContainerTooltip = (): JSX.Element => {\n  const toolTipUseStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      button: {\n        margin: theme.spacing(1),\n      },\n      customWidth: {\n        maxWidth: 500,\n      },\n      noMaxWidth: {\n        maxWidth: 'none',\n      },\n    }),\n  );\n\n  const longText = `\n  Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus.\n  Praesent non nunc mollis, fermentum neque at, semper arcu.\n  Nullam eget est sed sem iaculis gravida eget vitae justo.\n  `;   \n    return (\n      <Tooltip title={longText} placement=\"left\">\n      <Button className={toolTipUseStyles().button}>Default Width [300px]</Button>\n      </Tooltip>\n    )\n}\n\n\n\n\n/// Container \n\ninterface ContainerViewState {\n    //container state\n    containerState: ContainerState,\n    meshGeometry?: THREE.Geometry | THREE.BufferGeometry,\n    meshMaterial: THREE.MeshStandardMaterial,\n    //view state\n    meshRef: React.MutableRefObject<typeof Mesh | undefined> | undefined;\n    meshHoveredOver: boolean; //usful for ui -> so people know where they're clicking. (possible to turn this feature off ? )\n    meshActive: boolean;\n    meshVisible: boolean; // for when we want to single out a particular container\n    internalLightsOn?: boolean; // for turning on and off internal light sources... \n    toolTipVisible: boolean;\n\n    // meshGeometry: THREE.Geometry; \n    // meshMaterial: THREE.Material\n\n\n} \n\n\n  \n\ntype Action =\n  | { _tag: \"onClick\";        payload: MouseEvent    }\n  | { _tag: \"onPointerOver\";  payload: PointerEvent  }\n  | { _tag: \"onPointerOut\";   payload: PointerEvent  }\n  | { _tag: \"onContextMenu\",  payload: MouseEvent    }\n  | { _tag: \"onDoubleClick\",  payload: {mouseEvent: MouseEvent, gltf: GLTFResult }    }\n\n\nconst ContainerReducer = (state: ContainerViewState, action: Action) => {\n  switch (action._tag) {\n    case \"onClick\":\n      action.payload.stopPropagation()\n      return {...state, meshActive: !state.meshActive};\n    case \"onPointerOver\":\n      action.payload.stopPropagation()\n      return {...state, meshHoveredOver: true};\n    case \"onPointerOut\":\n      action.payload.stopPropagation()\n      return {...state, meshHoveredOver: false};\n    case \"onContextMenu\":\n      action.payload.stopPropagation()\n      return {...state, toolTipVisible: !state.toolTipVisible}\n    case \"onDoubleClick\":\n      action.payload.mouseEvent.stopPropagation()\n      // we update global state, which should in turn update our local state\n      return {...state, meshGeometry: action.payload.gltf.nodes[\"A-3_1\"].geometry }; // double click should probably isolate the mesh\n    default:\n      throw new Error();\n  }\n}\n\n/* Elm architecture: model (i.e state), view (i.e manifestation of the state), update (i.e actions dispatched by events to update state) */\nexport const ContainerMesh = (props: MeshProps): JSX.Element => {\n\n  const gltf  = useGLTF('/Swift/A3.glb') as GLTFResult; \n\n  const initalState: ContainerViewState = {\n    // meshRef: useRef<typeof Mesh>(),\n    meshRef: undefined,\n    meshHoveredOver: false,\n    meshActive: false,\n    meshVisible: true,\n    toolTipVisible: false,\n  \n    containerState: containerConstructors.Room(makeContainer('con1')),\n    meshGeometry: undefined,\n    meshMaterial: plywoodMaterial\n  } \n\n  const globalDispatch = useDispatch()\n\n  const [state, localDispatch] = React.useReducer(ContainerReducer, initalState);\n  return (\n    <mesh\n      {...props}\n      // ref={state.meshRef}\n      scale={[10,10,10]}\n      receiveShadow={true}\n      castShadow={true}\n      visible={state.meshVisible}\n\n      // -- Object3D node props\n      // position?: Vector3;\n      // up?: Vector3;\n      // scale?: Vector3;\n      // rotation?: Euler;\n      // matrix?: Matrix4;\n      // quaternion?: Quaternion;\n      // layers?: Layers;\n      // dispose?: (() => void) | null;\n\n      // -- TGeometry props\n\n      // -- TMaterial props\n      // \tclippingPlanes: any;\n\n\n      /** Update */\n      onClick         = {(e: MouseEvent)    => { return localDispatch({_tag: \"onClick\",        payload: e})  }}\n      onPointerOver   = {(e: PointerEvent)  => { return localDispatch({_tag: \"onPointerOver\",  payload: e})  }}\n      onPointerOut    = {(e: PointerEvent)  => { return localDispatch({_tag: \"onPointerOut\",   payload: e})  }}\n      onContextMenu   = {(e: MouseEvent)    => { return localDispatch({_tag: \"onContextMenu\",   payload: e}) }}\n      onDoubleClick   = {(e: MouseEvent)    => { return localDispatch({ _tag: \"onDoubleClick\",  payload: {mouseEvent: e, gltf: gltf } } )}}\n      onPointerUp     = {(e: PointerEvent)  => {  }}\n      onPointerDown   = {(e: PointerEvent)  => {}}\n      onPointerMove   = {(e: PointerEvent)  => {}}\n      onPointerMissed = {(e: React.MouseEvent) => {}}\n      onWheel         = {(e: WheelEvent)    => {}}\n    >\n      <Suspense\n      fallback={\n        <Html center>\n          <Loader />\n        </Html>\n      }>    \n\n      {/** View */}\n      {/** --- Geometry  */}\n      {(state.meshGeometry !== undefined) ? \n        <bufferGeometry attach=\"geometry\" {...state.meshGeometry}/> :\n        <boxBufferGeometry />\n      }\n      // <boxBufferGeometry args={[1, 1, 1]} />\n      {/** --- Material  */}\n      {(state.meshGeometry !== undefined) ?\n        <meshStandardMaterial/> :\n        <meshStandardMaterial \n          {...state.meshMaterial}\n          /*color={state.meshHoveredOver || state.meshActive ? '0x555555' : '0x555555'} */\n          /> \n      }\n\n      </Suspense>\n\n\n      {/** --- Tooltip  */}\n      {state.toolTipVisible && \n        <Html>\n            <ContainerTooltip/>\n        </Html>\n      }\n    </mesh>\n  )\n}\n\n\n// React components\nconst AnimatedContainerMesh = animated(ContainerMesh)\n\n\n","/Users/hectorcrean/carbon-buildx-repo/io-ts-validation/io-ts-validation/src/Models/Skylark/Atoms/FloorLong.tsx",[],{"ruleId":"726","severity":1,"message":"727","line":3,"column":16,"nodeType":"728","messageId":"729","endLine":3,"endColumn":24},{"ruleId":"726","severity":1,"message":"730","line":4,"column":50,"nodeType":"728","messageId":"729","endLine":4,"endColumn":54},{"ruleId":"726","severity":1,"message":"731","line":7,"column":8,"nodeType":"728","messageId":"729","endLine":7,"endColumn":20},{"ruleId":"726","severity":1,"message":"732","line":8,"column":8,"nodeType":"728","messageId":"729","endLine":8,"endColumn":22},{"ruleId":"733","severity":1,"message":"734","line":23,"column":14,"nodeType":"735","messageId":"736","endLine":23,"endColumn":26},{"ruleId":"737","replacedBy":"738"},{"ruleId":"739","replacedBy":"740"},{"ruleId":"726","severity":1,"message":"741","line":1,"column":55,"nodeType":"728","messageId":"729","endLine":1,"endColumn":59},{"ruleId":"726","severity":1,"message":"742","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":21},{"ruleId":"726","severity":1,"message":"743","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":21},{"ruleId":"726","severity":1,"message":"744","line":10,"column":10,"nodeType":"728","messageId":"729","endLine":10,"endColumn":17},{"ruleId":"726","severity":1,"message":"745","line":10,"column":19,"nodeType":"728","messageId":"729","endLine":10,"endColumn":22},{"ruleId":"726","severity":1,"message":"746","line":20,"column":10,"nodeType":"728","messageId":"729","endLine":20,"endColumn":15},{"ruleId":"726","severity":1,"message":"747","line":20,"column":17,"nodeType":"728","messageId":"729","endLine":20,"endColumn":23},{"ruleId":"726","severity":1,"message":"748","line":21,"column":10,"nodeType":"728","messageId":"729","endLine":21,"endColumn":15},{"ruleId":"726","severity":1,"message":"749","line":21,"column":17,"nodeType":"728","messageId":"729","endLine":21,"endColumn":23},{"ruleId":"726","severity":1,"message":"750","line":26,"column":7,"nodeType":"728","messageId":"729","endLine":26,"endColumn":12},{"ruleId":"726","severity":1,"message":"751","line":187,"column":7,"nodeType":"728","messageId":"729","endLine":187,"endColumn":17},{"ruleId":"737","replacedBy":"752"},{"ruleId":"739","replacedBy":"753"},{"ruleId":"726","severity":1,"message":"754","line":1,"column":17,"nodeType":"728","messageId":"729","endLine":1,"endColumn":25},{"ruleId":"726","severity":1,"message":"755","line":1,"column":27,"nodeType":"728","messageId":"729","endLine":1,"endColumn":33},{"ruleId":"726","severity":1,"message":"756","line":1,"column":69,"nodeType":"728","messageId":"729","endLine":1,"endColumn":79},{"ruleId":"726","severity":1,"message":"757","line":1,"column":81,"nodeType":"728","messageId":"729","endLine":1,"endColumn":88},{"ruleId":"726","severity":1,"message":"758","line":2,"column":10,"nodeType":"728","messageId":"729","endLine":2,"endColumn":17},{"ruleId":"726","severity":1,"message":"759","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":14},{"ruleId":"726","severity":1,"message":"760","line":5,"column":10,"nodeType":"728","messageId":"729","endLine":5,"endColumn":23},{"ruleId":"726","severity":1,"message":"761","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":18},{"ruleId":"762","severity":1,"message":"763","line":94,"column":72,"nodeType":"764","messageId":"765","endLine":94,"endColumn":73},{"ruleId":"737","replacedBy":"766"},{"ruleId":"739","replacedBy":"767"},{"ruleId":"726","severity":1,"message":"768","line":3,"column":20,"nodeType":"728","messageId":"729","endLine":3,"endColumn":26},{"ruleId":"726","severity":1,"message":"769","line":3,"column":28,"nodeType":"728","messageId":"729","endLine":3,"endColumn":43},{"ruleId":"726","severity":1,"message":"770","line":4,"column":56,"nodeType":"728","messageId":"729","endLine":4,"endColumn":67},{"ruleId":"726","severity":1,"message":"771","line":4,"column":69,"nodeType":"728","messageId":"729","endLine":4,"endColumn":83},{"ruleId":"726","severity":1,"message":"772","line":8,"column":8,"nodeType":"728","messageId":"729","endLine":8,"endColumn":22},{"ruleId":"726","severity":1,"message":"773","line":9,"column":10,"nodeType":"728","messageId":"729","endLine":9,"endColumn":19},{"ruleId":"726","severity":1,"message":"774","line":14,"column":8,"nodeType":"728","messageId":"729","endLine":14,"endColumn":12},{"ruleId":"726","severity":1,"message":"775","line":15,"column":8,"nodeType":"728","messageId":"729","endLine":15,"endColumn":22},{"ruleId":"726","severity":1,"message":"776","line":16,"column":10,"nodeType":"728","messageId":"729","endLine":16,"endColumn":18},{"ruleId":"726","severity":1,"message":"777","line":22,"column":10,"nodeType":"728","messageId":"729","endLine":22,"endColumn":20},{"ruleId":"726","severity":1,"message":"778","line":23,"column":10,"nodeType":"728","messageId":"729","endLine":23,"endColumn":22},{"ruleId":"726","severity":1,"message":"779","line":25,"column":10,"nodeType":"728","messageId":"729","endLine":25,"endColumn":28},{"ruleId":"780","severity":1,"message":"781","line":27,"column":1,"nodeType":"782","messageId":"783","endLine":29,"endColumn":12},{"ruleId":"726","severity":1,"message":"784","line":36,"column":7,"nodeType":"728","messageId":"729","endLine":36,"endColumn":12},{"ruleId":"726","severity":1,"message":"785","line":118,"column":5,"nodeType":"728","messageId":"729","endLine":118,"endColumn":10},{"ruleId":"726","severity":1,"message":"786","line":119,"column":5,"nodeType":"728","messageId":"729","endLine":119,"endColumn":9},{"ruleId":"726","severity":1,"message":"787","line":120,"column":5,"nodeType":"728","messageId":"729","endLine":120,"endColumn":13},{"ruleId":"726","severity":1,"message":"788","line":121,"column":5,"nodeType":"728","messageId":"729","endLine":121,"endColumn":11},{"ruleId":"726","severity":1,"message":"789","line":122,"column":5,"nodeType":"728","messageId":"729","endLine":122,"endColumn":15},{"ruleId":"726","severity":1,"message":"790","line":123,"column":5,"nodeType":"728","messageId":"729","endLine":123,"endColumn":21},{"ruleId":"726","severity":1,"message":"755","line":1,"column":16,"nodeType":"728","messageId":"729","endLine":1,"endColumn":22},{"ruleId":"726","severity":1,"message":"761","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":18},{"ruleId":"726","severity":1,"message":"791","line":12,"column":8,"nodeType":"728","messageId":"729","endLine":12,"endColumn":25},{"ruleId":"726","severity":1,"message":"792","line":32,"column":19,"nodeType":"728","messageId":"729","endLine":32,"endColumn":26},{"ruleId":"737","replacedBy":"793"},{"ruleId":"739","replacedBy":"794"},{"ruleId":"737","replacedBy":"795"},{"ruleId":"739","replacedBy":"796"},{"ruleId":"726","severity":1,"message":"797","line":2,"column":8,"nodeType":"728","messageId":"729","endLine":2,"endColumn":13},{"ruleId":"726","severity":1,"message":"798","line":28,"column":15,"nodeType":"728","messageId":"729","endLine":28,"endColumn":21},{"ruleId":"737","replacedBy":"799"},{"ruleId":"739","replacedBy":"800"},{"ruleId":"726","severity":1,"message":"801","line":10,"column":10,"nodeType":"728","messageId":"729","endLine":10,"endColumn":17},{"ruleId":"737","replacedBy":"802"},{"ruleId":"739","replacedBy":"803"},{"ruleId":"726","severity":1,"message":"804","line":6,"column":13,"nodeType":"728","messageId":"729","endLine":6,"endColumn":17},{"ruleId":"726","severity":1,"message":"805","line":7,"column":13,"nodeType":"728","messageId":"729","endLine":7,"endColumn":17},{"ruleId":"726","severity":1,"message":"806","line":8,"column":10,"nodeType":"728","messageId":"729","endLine":8,"endColumn":15},{"ruleId":"726","severity":1,"message":"807","line":8,"column":17,"nodeType":"728","messageId":"729","endLine":8,"endColumn":21},{"ruleId":"726","severity":1,"message":"808","line":10,"column":10,"nodeType":"728","messageId":"729","endLine":10,"endColumn":19},{"ruleId":"726","severity":1,"message":"809","line":11,"column":13,"nodeType":"728","messageId":"729","endLine":11,"endColumn":14},{"ruleId":"726","severity":1,"message":"810","line":12,"column":10,"nodeType":"728","messageId":"729","endLine":12,"endColumn":28},{"ruleId":"726","severity":1,"message":"811","line":13,"column":10,"nodeType":"728","messageId":"729","endLine":13,"endColumn":31},{"ruleId":"726","severity":1,"message":"812","line":13,"column":33,"nodeType":"728","messageId":"729","endLine":13,"endColumn":53},{"ruleId":"726","severity":1,"message":"813","line":14,"column":32,"nodeType":"728","messageId":"729","endLine":14,"endColumn":42},{"ruleId":"726","severity":1,"message":"814","line":15,"column":28,"nodeType":"728","messageId":"729","endLine":15,"endColumn":36},{"ruleId":"726","severity":1,"message":"815","line":210,"column":7,"nodeType":"728","messageId":"729","endLine":210,"endColumn":22},{"ruleId":"726","severity":1,"message":"816","line":211,"column":7,"nodeType":"728","messageId":"729","endLine":211,"endColumn":20},{"ruleId":"726","severity":1,"message":"817","line":219,"column":7,"nodeType":"728","messageId":"729","endLine":219,"endColumn":66},{"ruleId":"726","severity":1,"message":"818","line":2,"column":13,"nodeType":"728","messageId":"729","endLine":2,"endColumn":14},{"ruleId":"726","severity":1,"message":"819","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":21},{"ruleId":"726","severity":1,"message":"820","line":5,"column":9,"nodeType":"728","messageId":"729","endLine":5,"endColumn":23},{"ruleId":"726","severity":1,"message":"821","line":5,"column":25,"nodeType":"728","messageId":"729","endLine":5,"endColumn":32},{"ruleId":"726","severity":1,"message":"822","line":5,"column":40,"nodeType":"728","messageId":"729","endLine":5,"endColumn":46},{"ruleId":"726","severity":1,"message":"823","line":6,"column":16,"nodeType":"728","messageId":"729","endLine":6,"endColumn":22},{"ruleId":"726","severity":1,"message":"824","line":74,"column":7,"nodeType":"728","messageId":"729","endLine":74,"endColumn":13},{"ruleId":"726","severity":1,"message":"810","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":28},{"ruleId":"726","severity":1,"message":"825","line":3,"column":30,"nodeType":"728","messageId":"729","endLine":3,"endColumn":49},{"ruleId":"726","severity":1,"message":"826","line":77,"column":7,"nodeType":"728","messageId":"729","endLine":77,"endColumn":15},{"ruleId":"726","severity":1,"message":"801","line":1,"column":19,"nodeType":"728","messageId":"729","endLine":1,"endColumn":26},{"ruleId":"726","severity":1,"message":"827","line":1,"column":28,"nodeType":"728","messageId":"729","endLine":1,"endColumn":33},{"ruleId":"726","severity":1,"message":"828","line":315,"column":6,"nodeType":"728","messageId":"729","endLine":315,"endColumn":17},{"ruleId":"726","severity":1,"message":"829","line":321,"column":6,"nodeType":"728","messageId":"729","endLine":321,"endColumn":17},{"ruleId":"726","severity":1,"message":"830","line":2,"column":13,"nodeType":"728","messageId":"729","endLine":2,"endColumn":14},{"ruleId":"726","severity":1,"message":"831","line":8,"column":13,"nodeType":"728","messageId":"729","endLine":8,"endColumn":14},{"ruleId":"726","severity":1,"message":"832","line":9,"column":14,"nodeType":"728","messageId":"729","endLine":9,"endColumn":18},{"ruleId":"726","severity":1,"message":"833","line":10,"column":13,"nodeType":"728","messageId":"729","endLine":10,"endColumn":14},{"ruleId":"726","severity":1,"message":"834","line":12,"column":13,"nodeType":"728","messageId":"729","endLine":12,"endColumn":14},{"ruleId":"726","severity":1,"message":"835","line":13,"column":13,"nodeType":"728","messageId":"729","endLine":13,"endColumn":14},{"ruleId":"726","severity":1,"message":"836","line":14,"column":13,"nodeType":"728","messageId":"729","endLine":14,"endColumn":14},{"ruleId":"726","severity":1,"message":"823","line":16,"column":16,"nodeType":"728","messageId":"729","endLine":16,"endColumn":22},{"ruleId":"726","severity":1,"message":"837","line":20,"column":10,"nodeType":"728","messageId":"729","endLine":20,"endColumn":23},{"ruleId":"726","severity":1,"message":"838","line":67,"column":7,"nodeType":"728","messageId":"729","endLine":67,"endColumn":15},{"ruleId":"726","severity":1,"message":"839","line":68,"column":7,"nodeType":"728","messageId":"729","endLine":68,"endColumn":11},{"ruleId":"726","severity":1,"message":"840","line":69,"column":7,"nodeType":"728","messageId":"729","endLine":69,"endColumn":13},{"ruleId":"726","severity":1,"message":"841","line":70,"column":7,"nodeType":"728","messageId":"729","endLine":70,"endColumn":14},{"ruleId":"726","severity":1,"message":"842","line":71,"column":7,"nodeType":"728","messageId":"729","endLine":71,"endColumn":20},{"ruleId":"726","severity":1,"message":"843","line":78,"column":7,"nodeType":"728","messageId":"729","endLine":78,"endColumn":15},{"ruleId":"844","severity":1,"message":"845","line":120,"column":11,"nodeType":"728","messageId":"846","endLine":120,"endColumn":17},{"ruleId":"726","severity":1,"message":"847","line":1,"column":13,"nodeType":"728","messageId":"729","endLine":1,"endColumn":14},{"ruleId":"726","severity":1,"message":"848","line":2,"column":13,"nodeType":"728","messageId":"729","endLine":2,"endColumn":14},{"ruleId":"726","severity":1,"message":"849","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":18},{"ruleId":"726","severity":1,"message":"850","line":5,"column":10,"nodeType":"728","messageId":"729","endLine":5,"endColumn":14},{"ruleId":"726","severity":1,"message":"851","line":13,"column":3,"nodeType":"728","messageId":"729","endLine":13,"endColumn":9},{"ruleId":"726","severity":1,"message":"852","line":14,"column":3,"nodeType":"728","messageId":"729","endLine":14,"endColumn":6},{"ruleId":"726","severity":1,"message":"853","line":16,"column":3,"nodeType":"728","messageId":"729","endLine":16,"endColumn":11},{"ruleId":"726","severity":1,"message":"854","line":17,"column":3,"nodeType":"728","messageId":"729","endLine":17,"endColumn":8},{"ruleId":"726","severity":1,"message":"855","line":18,"column":3,"nodeType":"728","messageId":"729","endLine":18,"endColumn":12},{"ruleId":"726","severity":1,"message":"856","line":29,"column":7,"nodeType":"728","messageId":"729","endLine":29,"endColumn":27},{"ruleId":"726","severity":1,"message":"857","line":30,"column":7,"nodeType":"728","messageId":"729","endLine":30,"endColumn":25},{"ruleId":"858","severity":1,"message":"859","line":34,"column":53,"nodeType":"860","messageId":"736","endLine":34,"endColumn":55},{"ruleId":"737","replacedBy":"861"},{"ruleId":"739","replacedBy":"862"},{"ruleId":"737","replacedBy":"863"},{"ruleId":"739","replacedBy":"864"},{"ruleId":"726","severity":1,"message":"865","line":19,"column":17,"nodeType":"728","messageId":"729","endLine":19,"endColumn":24},{"ruleId":"726","severity":1,"message":"866","line":19,"column":26,"nodeType":"728","messageId":"729","endLine":19,"endColumn":31},{"ruleId":"726","severity":1,"message":"847","line":1,"column":13,"nodeType":"728","messageId":"729","endLine":1,"endColumn":14},{"ruleId":"726","severity":1,"message":"849","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":18},{"ruleId":"726","severity":1,"message":"867","line":110,"column":7,"nodeType":"728","messageId":"729","endLine":110,"endColumn":13},{"ruleId":"726","severity":1,"message":"868","line":110,"column":35,"nodeType":"728","messageId":"729","endLine":110,"endColumn":37},{"ruleId":"726","severity":1,"message":"869","line":110,"column":39,"nodeType":"728","messageId":"729","endLine":110,"endColumn":41},{"ruleId":"726","severity":1,"message":"870","line":110,"column":43,"nodeType":"728","messageId":"729","endLine":110,"endColumn":45},{"ruleId":"726","severity":1,"message":"871","line":2,"column":17,"nodeType":"728","messageId":"729","endLine":2,"endColumn":25},{"ruleId":"726","severity":1,"message":"872","line":3,"column":25,"nodeType":"728","messageId":"729","endLine":3,"endColumn":34},{"ruleId":"726","severity":1,"message":"768","line":3,"column":46,"nodeType":"728","messageId":"729","endLine":3,"endColumn":52},{"ruleId":"726","severity":1,"message":"873","line":4,"column":80,"nodeType":"728","messageId":"729","endLine":4,"endColumn":84},{"ruleId":"726","severity":1,"message":"874","line":4,"column":86,"nodeType":"728","messageId":"729","endLine":4,"endColumn":92},{"ruleId":"726","severity":1,"message":"875","line":5,"column":36,"nodeType":"728","messageId":"729","endLine":5,"endColumn":42},{"ruleId":"726","severity":1,"message":"876","line":35,"column":18,"nodeType":"728","messageId":"729","endLine":35,"endColumn":27},{"ruleId":"726","severity":1,"message":"877","line":70,"column":8,"nodeType":"728","messageId":"729","endLine":70,"endColumn":19},{"ruleId":"726","severity":1,"message":"878","line":83,"column":12,"nodeType":"728","messageId":"729","endLine":83,"endColumn":18},{"ruleId":"726","severity":1,"message":"879","line":83,"column":49,"nodeType":"728","messageId":"729","endLine":83,"endColumn":52},{"ruleId":"726","severity":1,"message":"880","line":6,"column":11,"nodeType":"728","messageId":"729","endLine":6,"endColumn":28},{"ruleId":"726","severity":1,"message":"881","line":8,"column":10,"nodeType":"728","messageId":"729","endLine":8,"endColumn":18},{"ruleId":"726","severity":1,"message":"882","line":10,"column":10,"nodeType":"728","messageId":"729","endLine":10,"endColumn":22},{"ruleId":"726","severity":1,"message":"883","line":36,"column":13,"nodeType":"728","messageId":"729","endLine":36,"endColumn":27},{"ruleId":"726","severity":1,"message":"884","line":51,"column":10,"nodeType":"728","messageId":"729","endLine":51,"endColumn":15},{"ruleId":"726","severity":1,"message":"885","line":51,"column":17,"nodeType":"728","messageId":"729","endLine":51,"endColumn":30},{"ruleId":"726","severity":1,"message":"883","line":52,"column":9,"nodeType":"728","messageId":"729","endLine":52,"endColumn":23},{"ruleId":"737","replacedBy":"886"},{"ruleId":"739","replacedBy":"887"},{"ruleId":"726","severity":1,"message":"888","line":2,"column":18,"nodeType":"728","messageId":"729","endLine":2,"endColumn":22},{"ruleId":"844","severity":1,"message":"889","line":32,"column":7,"nodeType":"728","messageId":"846","endLine":32,"endColumn":11},{"ruleId":"844","severity":1,"message":"890","line":39,"column":7,"nodeType":"728","messageId":"846","endLine":39,"endColumn":13},{"ruleId":"726","severity":1,"message":"888","line":2,"column":18,"nodeType":"728","messageId":"729","endLine":2,"endColumn":22},{"ruleId":"844","severity":1,"message":"891","line":173,"column":13,"nodeType":"728","messageId":"846","endLine":173,"endColumn":25},{"ruleId":"737","replacedBy":"892"},{"ruleId":"739","replacedBy":"893"},{"ruleId":"726","severity":1,"message":"727","line":1,"column":17,"nodeType":"728","messageId":"729","endLine":1,"endColumn":25},{"ruleId":"726","severity":1,"message":"894","line":3,"column":29,"nodeType":"728","messageId":"729","endLine":3,"endColumn":51},{"ruleId":"726","severity":1,"message":"895","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":25},{"ruleId":"726","severity":1,"message":"896","line":7,"column":27,"nodeType":"728","messageId":"729","endLine":7,"endColumn":51},{"ruleId":"726","severity":1,"message":"897","line":7,"column":113,"nodeType":"728","messageId":"729","endLine":7,"endColumn":121},{"ruleId":"726","severity":1,"message":"898","line":7,"column":123,"nodeType":"728","messageId":"729","endLine":7,"endColumn":131},{"ruleId":"726","severity":1,"message":"899","line":7,"column":133,"nodeType":"728","messageId":"729","endLine":7,"endColumn":138},{"ruleId":"726","severity":1,"message":"900","line":7,"column":140,"nodeType":"728","messageId":"729","endLine":7,"endColumn":148},{"ruleId":"726","severity":1,"message":"901","line":7,"column":150,"nodeType":"728","messageId":"729","endLine":7,"endColumn":158},{"ruleId":"726","severity":1,"message":"902","line":7,"column":160,"nodeType":"728","messageId":"729","endLine":7,"endColumn":173},{"ruleId":"726","severity":1,"message":"903","line":7,"column":175,"nodeType":"728","messageId":"729","endLine":7,"endColumn":192},{"ruleId":"726","severity":1,"message":"904","line":7,"column":194,"nodeType":"728","messageId":"729","endLine":7,"endColumn":203},{"ruleId":"726","severity":1,"message":"905","line":14,"column":41,"nodeType":"728","messageId":"729","endLine":14,"endColumn":51},{"ruleId":"726","severity":1,"message":"865","line":496,"column":17,"nodeType":"728","messageId":"729","endLine":496,"endColumn":24},{"ruleId":"726","severity":1,"message":"866","line":496,"column":26,"nodeType":"728","messageId":"729","endLine":496,"endColumn":31},{"ruleId":"726","severity":1,"message":"906","line":15,"column":7,"nodeType":"728","messageId":"729","endLine":15,"endColumn":46},{"ruleId":"733","severity":1,"message":"734","line":9,"column":11,"nodeType":"735","messageId":"736","endLine":9,"endColumn":13},{"ruleId":"726","severity":1,"message":"907","line":235,"column":11,"nodeType":"728","messageId":"729","endLine":235,"endColumn":28},{"ruleId":"726","severity":1,"message":"908","line":6,"column":21,"nodeType":"728","messageId":"729","endLine":6,"endColumn":32},{"ruleId":"726","severity":1,"message":"909","line":90,"column":11,"nodeType":"728","messageId":"729","endLine":90,"endColumn":26},{"ruleId":"726","severity":1,"message":"804","line":6,"column":13,"nodeType":"728","messageId":"729","endLine":6,"endColumn":17},{"ruleId":"726","severity":1,"message":"805","line":7,"column":13,"nodeType":"728","messageId":"729","endLine":7,"endColumn":17},{"ruleId":"726","severity":1,"message":"808","line":9,"column":10,"nodeType":"728","messageId":"729","endLine":9,"endColumn":19},{"ruleId":"726","severity":1,"message":"813","line":10,"column":32,"nodeType":"728","messageId":"729","endLine":10,"endColumn":42},{"ruleId":"726","severity":1,"message":"814","line":11,"column":28,"nodeType":"728","messageId":"729","endLine":11,"endColumn":36},{"ruleId":"726","severity":1,"message":"815","line":206,"column":7,"nodeType":"728","messageId":"729","endLine":206,"endColumn":22},{"ruleId":"726","severity":1,"message":"816","line":207,"column":7,"nodeType":"728","messageId":"729","endLine":207,"endColumn":20},{"ruleId":"726","severity":1,"message":"817","line":215,"column":7,"nodeType":"728","messageId":"729","endLine":215,"endColumn":66},{"ruleId":"726","severity":1,"message":"818","line":2,"column":13,"nodeType":"728","messageId":"729","endLine":2,"endColumn":14},{"ruleId":"726","severity":1,"message":"819","line":4,"column":10,"nodeType":"728","messageId":"729","endLine":4,"endColumn":21},{"ruleId":"726","severity":1,"message":"820","line":5,"column":9,"nodeType":"728","messageId":"729","endLine":5,"endColumn":23},{"ruleId":"726","severity":1,"message":"821","line":5,"column":25,"nodeType":"728","messageId":"729","endLine":5,"endColumn":32},{"ruleId":"726","severity":1,"message":"822","line":5,"column":40,"nodeType":"728","messageId":"729","endLine":5,"endColumn":46},{"ruleId":"726","severity":1,"message":"823","line":6,"column":16,"nodeType":"728","messageId":"729","endLine":6,"endColumn":22},{"ruleId":"726","severity":1,"message":"824","line":73,"column":7,"nodeType":"728","messageId":"729","endLine":73,"endColumn":13},{"ruleId":"726","severity":1,"message":"830","line":2,"column":13,"nodeType":"728","messageId":"729","endLine":2,"endColumn":14},{"ruleId":"726","severity":1,"message":"831","line":8,"column":13,"nodeType":"728","messageId":"729","endLine":8,"endColumn":14},{"ruleId":"726","severity":1,"message":"832","line":9,"column":14,"nodeType":"728","messageId":"729","endLine":9,"endColumn":18},{"ruleId":"726","severity":1,"message":"833","line":10,"column":13,"nodeType":"728","messageId":"729","endLine":10,"endColumn":14},{"ruleId":"726","severity":1,"message":"834","line":12,"column":13,"nodeType":"728","messageId":"729","endLine":12,"endColumn":14},{"ruleId":"726","severity":1,"message":"835","line":13,"column":13,"nodeType":"728","messageId":"729","endLine":13,"endColumn":14},{"ruleId":"726","severity":1,"message":"836","line":14,"column":13,"nodeType":"728","messageId":"729","endLine":14,"endColumn":14},{"ruleId":"726","severity":1,"message":"823","line":16,"column":16,"nodeType":"728","messageId":"729","endLine":16,"endColumn":22},{"ruleId":"726","severity":1,"message":"837","line":20,"column":10,"nodeType":"728","messageId":"729","endLine":20,"endColumn":23},{"ruleId":"726","severity":1,"message":"838","line":67,"column":7,"nodeType":"728","messageId":"729","endLine":67,"endColumn":15},{"ruleId":"726","severity":1,"message":"839","line":68,"column":7,"nodeType":"728","messageId":"729","endLine":68,"endColumn":11},{"ruleId":"726","severity":1,"message":"840","line":69,"column":7,"nodeType":"728","messageId":"729","endLine":69,"endColumn":13},{"ruleId":"726","severity":1,"message":"841","line":70,"column":7,"nodeType":"728","messageId":"729","endLine":70,"endColumn":14},{"ruleId":"726","severity":1,"message":"842","line":71,"column":7,"nodeType":"728","messageId":"729","endLine":71,"endColumn":20},{"ruleId":"726","severity":1,"message":"843","line":78,"column":7,"nodeType":"728","messageId":"729","endLine":78,"endColumn":15},{"ruleId":"844","severity":1,"message":"845","line":120,"column":11,"nodeType":"728","messageId":"846","endLine":120,"endColumn":17},{"ruleId":"726","severity":1,"message":"810","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":28},{"ruleId":"726","severity":1,"message":"825","line":3,"column":30,"nodeType":"728","messageId":"729","endLine":3,"endColumn":49},{"ruleId":"726","severity":1,"message":"826","line":77,"column":7,"nodeType":"728","messageId":"729","endLine":77,"endColumn":15},{"ruleId":"726","severity":1,"message":"801","line":1,"column":19,"nodeType":"728","messageId":"729","endLine":1,"endColumn":26},{"ruleId":"726","severity":1,"message":"827","line":1,"column":28,"nodeType":"728","messageId":"729","endLine":1,"endColumn":33},{"ruleId":"726","severity":1,"message":"828","line":315,"column":6,"nodeType":"728","messageId":"729","endLine":315,"endColumn":17},{"ruleId":"726","severity":1,"message":"829","line":321,"column":6,"nodeType":"728","messageId":"729","endLine":321,"endColumn":17},{"ruleId":"726","severity":1,"message":"730","line":14,"column":10,"nodeType":"728","messageId":"729","endLine":14,"endColumn":14},{"ruleId":"726","severity":1,"message":"910","line":4,"column":8,"nodeType":"728","messageId":"729","endLine":4,"endColumn":18},{"ruleId":"726","severity":1,"message":"911","line":5,"column":8,"nodeType":"728","messageId":"729","endLine":5,"endColumn":25},{"ruleId":"726","severity":1,"message":"912","line":6,"column":8,"nodeType":"728","messageId":"729","endLine":6,"endColumn":16},{"ruleId":"726","severity":1,"message":"913","line":7,"column":8,"nodeType":"728","messageId":"729","endLine":7,"endColumn":25},{"ruleId":"726","severity":1,"message":"914","line":11,"column":8,"nodeType":"728","messageId":"729","endLine":11,"endColumn":20},{"ruleId":"733","severity":1,"message":"734","line":17,"column":11,"nodeType":"735","messageId":"736","endLine":17,"endColumn":13},{"ruleId":"737","replacedBy":"915"},{"ruleId":"739","replacedBy":"916"},{"ruleId":"726","severity":1,"message":"917","line":2,"column":3,"nodeType":"728","messageId":"729","endLine":2,"endColumn":20},{"ruleId":"726","severity":1,"message":"918","line":3,"column":3,"nodeType":"728","messageId":"729","endLine":3,"endColumn":14},{"ruleId":"726","severity":1,"message":"919","line":5,"column":3,"nodeType":"728","messageId":"729","endLine":5,"endColumn":11},{"ruleId":"726","severity":1,"message":"920","line":6,"column":3,"nodeType":"728","messageId":"729","endLine":6,"endColumn":7},{"ruleId":"726","severity":1,"message":"921","line":7,"column":3,"nodeType":"728","messageId":"729","endLine":7,"endColumn":20},{"ruleId":"726","severity":1,"message":"922","line":8,"column":3,"nodeType":"728","messageId":"729","endLine":8,"endColumn":20},{"ruleId":"726","severity":1,"message":"801","line":14,"column":3,"nodeType":"728","messageId":"729","endLine":14,"endColumn":10},{"ruleId":"726","severity":1,"message":"755","line":1,"column":17,"nodeType":"728","messageId":"729","endLine":1,"endColumn":23},{"ruleId":"726","severity":1,"message":"727","line":1,"column":25,"nodeType":"728","messageId":"729","endLine":1,"endColumn":33},{"ruleId":"726","severity":1,"message":"923","line":1,"column":35,"nodeType":"728","messageId":"729","endLine":1,"endColumn":46},{"ruleId":"726","severity":1,"message":"924","line":1,"column":48,"nodeType":"728","messageId":"729","endLine":1,"endColumn":57},{"ruleId":"726","severity":1,"message":"925","line":2,"column":10,"nodeType":"728","messageId":"729","endLine":2,"endColumn":18},{"ruleId":"726","severity":1,"message":"926","line":2,"column":58,"nodeType":"728","messageId":"729","endLine":2,"endColumn":67},{"ruleId":"726","severity":1,"message":"927","line":2,"column":69,"nodeType":"728","messageId":"729","endLine":2,"endColumn":82},{"ruleId":"726","severity":1,"message":"928","line":2,"column":96,"nodeType":"728","messageId":"729","endLine":2,"endColumn":108},{"ruleId":"726","severity":1,"message":"919","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":18},{"ruleId":"726","severity":1,"message":"929","line":5,"column":27,"nodeType":"728","messageId":"729","endLine":5,"endColumn":37},{"ruleId":"726","severity":1,"message":"930","line":6,"column":10,"nodeType":"728","messageId":"729","endLine":6,"endColumn":20},{"ruleId":"726","severity":1,"message":"931","line":6,"column":37,"nodeType":"728","messageId":"729","endLine":6,"endColumn":43},{"ruleId":"726","severity":1,"message":"773","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":19},{"ruleId":"726","severity":1,"message":"932","line":7,"column":21,"nodeType":"728","messageId":"729","endLine":7,"endColumn":29},{"ruleId":"726","severity":1,"message":"933","line":21,"column":7,"nodeType":"728","messageId":"729","endLine":21,"endColumn":30},{"ruleId":"726","severity":1,"message":"883","line":137,"column":11,"nodeType":"728","messageId":"729","endLine":137,"endColumn":25},{"ruleId":"726","severity":1,"message":"755","line":1,"column":17,"nodeType":"728","messageId":"729","endLine":1,"endColumn":23},{"ruleId":"726","severity":1,"message":"727","line":1,"column":25,"nodeType":"728","messageId":"729","endLine":1,"endColumn":33},{"ruleId":"726","severity":1,"message":"923","line":1,"column":35,"nodeType":"728","messageId":"729","endLine":1,"endColumn":46},{"ruleId":"726","severity":1,"message":"924","line":1,"column":48,"nodeType":"728","messageId":"729","endLine":1,"endColumn":57},{"ruleId":"726","severity":1,"message":"925","line":2,"column":10,"nodeType":"728","messageId":"729","endLine":2,"endColumn":18},{"ruleId":"726","severity":1,"message":"927","line":2,"column":69,"nodeType":"728","messageId":"729","endLine":2,"endColumn":82},{"ruleId":"726","severity":1,"message":"934","line":2,"column":84,"nodeType":"728","messageId":"729","endLine":2,"endColumn":94},{"ruleId":"726","severity":1,"message":"919","line":3,"column":10,"nodeType":"728","messageId":"729","endLine":3,"endColumn":18},{"ruleId":"726","severity":1,"message":"929","line":5,"column":27,"nodeType":"728","messageId":"729","endLine":5,"endColumn":37},{"ruleId":"726","severity":1,"message":"930","line":7,"column":10,"nodeType":"728","messageId":"729","endLine":7,"endColumn":20},{"ruleId":"726","severity":1,"message":"931","line":7,"column":37,"nodeType":"728","messageId":"729","endLine":7,"endColumn":43},{"ruleId":"726","severity":1,"message":"773","line":9,"column":10,"nodeType":"728","messageId":"729","endLine":9,"endColumn":19},{"ruleId":"726","severity":1,"message":"935","line":18,"column":10,"nodeType":"728","messageId":"729","endLine":18,"endColumn":37},{"ruleId":"726","severity":1,"message":"936","line":18,"column":39,"nodeType":"728","messageId":"729","endLine":18,"endColumn":62},{"ruleId":"726","severity":1,"message":"759","line":27,"column":10,"nodeType":"728","messageId":"729","endLine":27,"endColumn":14},{"ruleId":"726","severity":1,"message":"933","line":43,"column":7,"nodeType":"728","messageId":"729","endLine":43,"endColumn":30},{"ruleId":"726","severity":1,"message":"883","line":159,"column":9,"nodeType":"728","messageId":"729","endLine":159,"endColumn":23},{"ruleId":"937","severity":1,"message":"938","line":211,"column":8,"nodeType":"939","endLine":212,"endColumn":10},{"ruleId":"726","severity":1,"message":"940","line":237,"column":7,"nodeType":"728","messageId":"729","endLine":237,"endColumn":28},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'CarbonHeader' is defined but never used.","'MaterialHeader' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-native-reassign",["941"],"no-negated-in-lhs",["942"],"'from' is defined but never used.","'ApolloError' is defined but never used.","'GET_PROJECT' is defined but never used.","'flatten' is defined but never used.","'map' is defined but never used.","'Users' is defined but never used.","'Answer' is defined but never used.","'users' is defined but never used.","'answer' is defined but never used.","'query' is assigned a value but never used.","'decodeWith' is assigned a value but never used.",["941"],["942"],"'Fragment' is defined but never used.","'useRef' is defined but never used.","'useContext' is defined but never used.","'useMemo' is defined but never used.","'useGLTF' is defined but never used.","'GLTF' is defined but never used.","'OrbitControls' is defined but never used.","'useThree' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["941"],["942"],"'extend' is defined but never used.","'ReactThreeFiber' is defined but never used.","'Environment' is defined but never used.","'ContactShadows' is defined but never used.","'ClippingSlider' is defined but never used.","'useSpring' is defined but never used.","'Icon' is defined but never used.","'FullscreenIcon' is defined but never used.","'Object3D' is defined but never used.","'SceneGraph' is defined but never used.","'truncateSync' is defined but never used.","'ContainerGroupMesh' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Dolly' is assigned a value but never used.","'scene' is assigned a value but never used.","'size' is assigned a value but never used.","'viewport' is assigned a value but never used.","'aspect' is assigned a value but never used.","'invalidate' is assigned a value but never used.","'setDefaultCamera' is assigned a value but never used.","'TransformControls' is defined but never used.","'hovered' is assigned a value but never used.",["941"],["942"],["941"],["942"],"'anime' is defined but never used.","'setVal' is assigned a value but never used.",["941"],["942"],"'Vector3' is defined but never used.",["941"],["942"],"'_Map' is defined but never used.","'_Set' is defined but never used.","'assoc' is defined but never used.","'prop' is defined but never used.","'getLenses' is defined but never used.","'t' is defined but never used.","'IBuildingComponent' is defined but never used.","'swiftComponentLibrary' is defined but never used.","'swiftComponentRecord' is defined but never used.","'makeVertex' is defined but never used.","'makeEdge' is defined but never used.","'vertexSemiGroup' is assigned a value but never used.","'edgeSemiGroup' is assigned a value but never used.","'graphSemiGroup' is assigned a value but never used.","'F' is defined but never used.","'SwiftModule' is defined but never used.","'componentBonds' is defined but never used.","'tBondID' is defined but never used.","'BondID' is defined but never used.","'uuidv4' is defined but never used.","'eqEdge' is assigned a value but never used.","'matchComponentState' is defined but never used.","'eqVertex' is assigned a value but never used.","'Euler' is defined but never used.","'PatternMode' is defined but never used.","'Periodicity' is defined but never used.","'E' is defined but never used.","'S' is defined but never used.","'Show' is defined but never used.","'C' is defined but never used.","'G' is defined but never used.","'M' is defined but never used.","'R' is defined but never used.","'SkylarkModule' is defined but never used.","'elemBond' is assigned a value but never used.","'keys' is assigned a value but never used.","'values' is assigned a value but never used.","'toArray' is assigned a value but never used.","'lookupWithKey' is assigned a value but never used.","'isNumber' is assigned a value but never used.","@typescript-eslint/no-redeclare","'result' is already defined.","redeclared","'A' is defined but never used.","'O' is defined but never used.","'eqString' is defined but never used.","'pipe' is defined but never used.","'Getter' is defined but never used.","'Iso' is defined but never used.","'Optional' is defined but never used.","'Prism' is defined but never used.","'Traversal' is defined but never used.","'containerInFocusLens' is assigned a value but never used.","'atContainerInFocus' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["941"],["942"],["941"],["942"],"'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'upsert' is assigned a value but never used.","'E1' is defined but never used.","'E2' is defined but never used.","'E3' is defined but never used.","'Suspense' is defined but never used.","'ObjectMap' is defined but never used.","'Html' is defined but never used.","'Loader' is defined but never used.","'config' is defined but never used.","'materials' is assigned a value but never used.","'SpringProps' is defined but never used.","'wobble' is assigned a value but never used.","'set' is assigned a value but never used.","'upsertSubassembly' is defined but never used.","'runQuery' is defined but never used.","'ProjectArray' is defined but never used.","'globalDispatch' is assigned a value but never used.","'state' is assigned a value but never used.","'localDispatch' is assigned a value but never used.",["941"],["942"],"'UUID' is defined but never used.","'UUID' is already defined.","'Rating' is already defined.","'ProjectArray' is already defined.",["941"],["942"],"'DataTableSkeletonProps' is defined but never used.","'GetProjectQuery' is defined but never used.","'GetProjectQueryVariables' is defined but never used.","'Projects' is defined but never used.","'Property' is defined but never used.","'Maybe' is defined but never used.","'Building' is defined but never used.","'Patterns' is defined but never used.","'Subassemblies' is defined but never used.","'EnergyPerformance' is defined but never used.","'Designers' is defined but never used.","'Alignments' is defined but never used.","'dataTableProps' is assigned a value but never used.","'TreeMapChartProps' is defined but never used.","'ImplOptions' is defined but never used.","'RadarChartProps' is defined but never used.","'SearchIcon' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'AppsIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'ScheduleIcon' is defined but never used.",["941"],["942"],"'BoxBufferGeometry' is defined but never used.","'BoxGeometry' is defined but never used.","'Geometry' is defined but never used.","'Mesh' is defined but never used.","'MeshBasicMaterial' is defined but never used.","'MeshPhongMaterial' is defined but never used.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'useFrame' is defined but never used.","'MeshProps' is defined but never used.","'EventHandlers' is defined but never used.","'Object3DNode' is defined but never used.","'meshBounds' is defined but never used.","'IContainer' is defined but never used.","'IFaces' is defined but never used.","'animated' is defined but never used.","'toolTipProps' is assigned a value but never used.","'GroupProps' is defined but never used.","'bringAllContainersIntoFocus' is defined but never used.","'bringContainerIntoFocus' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","'AnimatedContainerMesh' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]