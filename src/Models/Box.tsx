/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei/useGLTF'

import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

import { useHover } from './modelUtils'; 
import TransformControls from '../components/3d-editor/TransformControls'; 

type GLTFResult = GLTF & {
  nodes: {
    Box_1: THREE.Mesh
    Box_2: THREE.Mesh
  }
  materials: {
    FrontColor: THREE.MeshStandardMaterial
    BackColor: THREE.MeshStandardMaterial
  }
}

interface ModelProps extends Partial<JSX.IntrinsicElements['mesh']>{
  // useHover: typeof useHover
}


export const Box = (props: ModelProps) => {
  const meshRef = useRef<THREE.Mesh>()
  let [bindHover, hovered] = useHover()

  const { nodes, materials } = useGLTF('/Box.glb') as GLTFResult
  return (
        <React.Fragment>
          <mesh ref = {meshRef} {...props} dispose={null} name={`${props.key}-1`} material={materials.FrontColor} geometry={nodes.Box_1.geometry} {...bindHover} />
          <mesh ref = {meshRef} {...props} dispose={null} name={`${props.key}-2`} material={materials.BackColor} geometry={nodes.Box_2.geometry} {...bindHover}/>
        </React.Fragment>
  )
}

useGLTF.preload('/Box.glb')


