{"version":3,"sources":["components/3d-editor/Light.tsx","materials/plywoodMaterial.ts","Models/Swift/G3.tsx","components/3d-editor/Container/MeshGroupContainer2.tsx","Models/Swift/GLTF-types.ts","materials/zincMaterial.ts","components/3d-editor/Skylark_gltf_skylark.tsx","components/3d-editor/Editor.tsx","page/builder3D-page/Builder3DPage.tsx","page/component-in-focus-page/Overlay.tsx","page/component-in-focus-page/Scene.tsx","page/component-in-focus-page/ComponentInFocus.tsx","components/body/DataTable/DataTable.tsx","components/body/Chart/Tree/TreeChart.tsx","components/body/Chart/Tree/index.tsx","components/body/Chart/Radar/RadarChart.tsx","components/body/Chart/Radar/index.tsx","page/analytics-page/AnalyticsPage.tsx","components/3d-editor/Showroom.tsx","components/3d-editor/Gestured/Scroll.tsx","page/showroom-page/ShowroomPage.tsx","App.tsx","lib/grid/Data/CellState.ts","lib/grid/Fn/getLenses.ts","lib/grid/Fn/getPrism.ts","store/Shared/types/model-state-action-types.ts","lib/grid/Fn/actionFn.ts","store/Shared/reducers.ts","store/Editor/types/editor-action-types.ts","store/Editor/types/CellState.ts","lib/optics/getLenses.ts","lib/optics/getPrism.ts","store/Editor/reducers.ts","middleware/logger.ts","store/index.ts","client.ts","index.tsx"],"names":["Light","castShadow","position","Vector3","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","penumbra","tl","THREE","color","clipIntersection","clipShadows","plywoodMaterial","map","load","texture","wrapS","wrapT","repeat","set","aoMapIntensity","envMapIntensity","displacementScale","roughness","metalness","side","polygonOffset","polygonOffsetFactor","useGLTF","preload","ActionTypes","envelopeStateLens","Lens","fromProp","meshLens","SwiftGLTF","zincMaterial","rotation","Math","PI","Model","props","group","useRef","nodes","materials","state","showHTML","ref","dispose","receiveShadow","onClick","e","stopPropagation","Html","material","geometry","untitled_1","untitled_2","untitled_3","Translucent_Glass_Gray","untitled_4","untitled_5","untitled_6","untitled_7","untitled_8","untitled_9","untitled_10","untitled_11","untitled_12","untitled_13","untitled_14","untitled_15","untitled_16","untitled_17","untitled_18","_Translucent_Glass_Gray_1","untitled_19","untitled_20","untitled_21","EditorScene","orbitControlsRef","console","log","useThree","camera","domElement","gl","scene","size","viewport","aspect","invalidate","setDefaultCamera","fallback","center","Loader","OrbitControls","enablePan","enableRotate","zoomSpeed","args","target","rotateSpeed","maxPolarAngle","enabled","minDistance","maxDistance","Editor","ContextBridge","useContextBridge","ReactReduxContext","colorManagement","shadowMap","type","fov","pixelRatio","window","devicePixelRatio","antialias","Builder3DPage","React","useEffect","handleKeyDown","ev","key","metaKey","shiftKey","document","addEventListener","removeEventListener","className","href","children","Overlay","fill","text","main","sub","sub_sub","buildingSystem","designedBy","buildingComponent","buildingComponentMeta","svg","viewBox","xmlns","style","whiteSpace","fontFamily","fontSize","fontWeight","letterSpacing","x","y","AnimatedMaterial","a","MeshDistortMaterial","Scene","setBg","modelRef","lightRef","useState","mode","setMode","down","setDown","hovered","setHovered","body","cursor","btoa","useFrame","current","mouse","lerp","sin","clock","elapsedTime","useSpring","wobble","coat","ambient","env","PerspectiveCamera","makeDefault","ambientLight","pointLight","position-z","mesh","scale","onPointerOver","onPointerOut","onPointerDown","onPointerUp","background","undefined","attach","clearcoat","clearcoatRoughness","stencilMask","Environment","preset","ContactShadows","opacity","width","height","blur","far","GetSubassembly_graphql","ComponentInFocus","useQuery","variables","subassemblyName","data","loading","error","enableZoom","minPolarAngle","BatchActionsDataTable","rows","headers","DataTable","getHeaderProps","getRowProps","getSelectionProps","getBatchActionProps","onInputChange","selectedRows","TableContainer","TableToolbar","TableBatchActions","TableBatchAction","tabIndex","shouldShowBatchActions","renderIcon","Delete","Save","Download","TableToolbarContent","TableToolbarSearch","onChange","TableToolbarMenu","TableToolbarAction","primaryFocus","alert","kind","Table","TableHead","TableRow","TableSelectAll","header","TableHeader","TableBody","row","TableSelectRow","cells","cell","TableCell","value","id","example_treeMapData","example_treeMapOptions","title","animations","resizable","_TreeMapChart","options","example_radarChartData","example_radarChartOptions","_RadarChart","dataTableSkeletonProps","zebra","compact","showHeader","showToolbar","comboChartState","ScaleTypes","LABELS","gaugeChartState","Statuses","DANGER","GaugeTypes","FULL","donutChartState","initalState","rowData","subassemblyAssemblyTimeInDays","subassemblyBuildingSystem","subassemblyDesigner","subassemblyLocationClass","subassemblyPitchedAngle1","subassemblyPitchedAngle2","subassemblyPrimaryMaterial","subassemblyRoofPitchType","subassemblySpansNStories","subassemblyThickness","subassemblyUnitCost","subassemblyXDimension","subassemblyYDimension","subassemblyZDimension","__typename","headerData","AnalyticsPageReducer","action","_tag","payload","subassemblies","Error","AnalyticsPage","useReducer","localDispatch","Tree","Radar","length","DataTableSkeleton","ShowroomScene","bindFn","fog","transparent","to","multisampling","luminanceInfluence","radius","bias","distanceThreshold","distanceFalloff","rangeFalloff","Showroom","bounds","config","defaultConfig","slow","fn","useCallback","cy","xy","py","previous","memo","get","newY","clamp","bottom","top","bind","useGesture","onWheel","onDrag","useYScroll","domTarget","concurrent","invalidateFrameloop","alpha","near","div","ChooseBuildingSystemReducer","ShowroomPage","component","App","path","ComponentInFocusPage","Point3","t","Building","floors","Storey","EnvelopeSection","Room","WallUnit","wall_unit_state","FloorUnit","floor_unit__state","RoofUnit","roof_unit_state","Void","Inactive","coordinates","ActiveState","Active","active_state","getProps","codec","getLenses","r","k","ModelStateActions","getPrism","Prism","union","some","none","s","subassembliesLens","fromPath","atSubassembly","projectsLens","atProjectLens","ownersLens","atOwners","propertiesLens","atProperies","buildingsLens","atBuilding","energyPerformanceLens","atEnergyPerformance","patternsLens","atPatterns","tasteProfileLens","atTasteProfile","designerLens","atDesigner","INITIAL_STATE","entities","projects","byId","R","allIds","owners","properties","buildings","energyPerformances","patterns","tasteProfiles","designers","upsertSubassembly","subassembly","pipe","O","compose","_subassembly","modify","prevSubassembly","upsertDesigner","designer","_designer","prevDesigner","upsertTasteProfile","tasteProfile","_tasteProfile","prevTasteProfile","upsertEnergyPerformance","energyPerformance","_energyPerformance","prevEnergyPerformance","upsertOwner","owner","_owner","prevOwner","ownerTasteProfile","upsertPattern","pattern","prevPattern","upsertBuilding","building","_building","prevBuilding","buildingPattern","upsertProperty","property","_property","prevProperty","propertyBuilding1","propertyBuilding2","propertyBuilding3","upsertProject","project","prevProject","projectOwner","projectPropety","containers","cellStates","containerLens","recordTraversal","fromTraversable","composedRecordTraversal","composeTraversal","cellStateLens","atCellState","bringContainerIntoFocus","containerInFocus","modificationPredicate","visible","bringAllContainersIntoFocus","upsertCellState","entity","lens","lensor","_entity","prevEntity","loggerMiddleware","store","next","info","result","getState","groupEnd","rootReducer","combineReducers","dashboard","UPSERT_SUBASSEMBLIES","UPSERT_BUILDINGS","UPSERT_DESIGNER","UPSERT_ENERGY_PERFORMANCE","UPSERT_OWNERS","UPSERT_PATTERN","UPSERT_PROJECTS","UPSERT_PROPERTIES","UPSERT_TASTE_PROFILE","editor","BRING_CONTAINER_INTO_FOCUS","BRING_ALL_CONTAINERS_INTO_FOCUS","UPSERT_CELL_STATE","configureStore","reducer","middleware","getDefaultMiddleware","prepend","thunkMiddleware","httpLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","rootEl","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.965f83fe.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport { Vector3 } from 'three'\nimport { useThree } from 'react-three-fiber'; \n\n\nexport const Light = () => {\n    return( \n    <>\n     <directionalLight \n          castShadow = {true}\n          position={new Vector3(0,200,0)} \n          intensity={0.1} \n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={500}\n          shadow-camera-left={-100}\n          shadow-camera-right={100}\n          shadow-camera-top={-100}\n          shadow-camera-bottom={100}\n        />\n        <spotLight position={[40, 40, 20]} penumbra={1} castShadow />\n        <ambientLight intensity = {0.1} />\n        <pointLight position={new Vector3(30,30,60)} intensity={0.2}/>\n        <pointLight position={new Vector3(-30,-30,60)} intensity={0.5}/>\n    </>\n      \n    )\n  }\n\n","import * as THREE from \"three\";\n\n// import { clipPlanes } from \"../components/ClippingSlider\";\n\nexport const fill = new THREE.MeshLambertMaterial({\n  color: \"white\",\n  // flatShading: true,\n  // clippingPlanes: clipPlanes,\n  clipIntersection: true,\n  clipShadows: true\n  // side: THREE.DoubleSide,\n  // shadowSide: THREE.DoubleSide\n});\n\nconst tl = new THREE.TextureLoader();\n\nconst rpt = function(texture: THREE.Texture) {\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  texture.repeat.set(0.025, 0.025);\n};\n\nexport const plywoodMaterial = new THREE.MeshStandardMaterial({\n  color: 0xeeeeee,\n  map: tl.load(\n    \"/Materials/67_Birch playwood PBR texture-seamless.jpg\",\n    rpt\n  ),\n  // displacementMap: tl.load(\n  //   \"materials/46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_DISPL.jpg\",\n  //   rpt\n  // ),\n  // normalMap: tl.load(\n  //   \"materials/46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_NORM.jpg\",\n  //   rpt\n  // ),\n  // aoMap: tl.load(\n  //   \"materials/46_plywood texture-seamless_hr/46_plywood texture-seamless_hr-AO.jpg\",\n  //   rpt\n  // ),\n  // side: THREE.DoubleSide\n  // specularMap: tl.load('/46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_SPEC.jpg', rpt),\n  // shininess: 0,\n  // normalScale: 1.0,\n\n  // ambientIntensity: 0.3,\n  aoMapIntensity: 3.0,\n  envMapIntensity: 1.5,\n  // https://discourse.threejs.org/t/material-displacement-map-makes-the-texture-unwrap-the-models-surfaces/5119/11\n  displacementScale: 0,\n  roughness: 0.8,\n  metalness: 0,\n  side: THREE.DoubleSide,\n  polygonOffset: true,\n  polygonOffsetFactor: 1,\n\n  // flatShading: true,\n  //clippingPlanes: clipPlanes,\n  clipIntersection: true,\n  // shadowSide: THREE.DoubleSide,\n  // side: THREE.FrontSide\n  // clipShadows: true\n});\n\nexport default plywoodMaterial;\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\n\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { GroupProps, useThree, MaterialProps} from 'react-three-fiber'\nimport { Vector3 } from 'three'\n// import { useHover } from '../modelUtils'; \n\ntype GLTFResult = GLTF & {\n  nodes: {\n    ['G-3_1']: THREE.Mesh\n    ['G-3_2']: THREE.Mesh\n  }\n  materials: {\n    ['Wood-3 Ver.033']: THREE.MeshStandardMaterial\n    ['diffuse_0_0_0_255.033']: THREE.MeshStandardMaterial\n  }\n}\n\ninterface G3SwiftProps extends GroupProps {\n  meshActive: boolean; \n  meshHoveredOver?: boolean;\n  meshMaterial?: THREE.Material; // -> the mesh material includes a clipping plane.. \n\n}\nexport default function Model(props: G3SwiftProps) {\n\n  const group = useRef<THREE.Group>()\n  const { nodes, materials } = useGLTF('/Swift/G3.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group name=\"Scene\">\n        <group name=\"G-3\" rotation={[Math.PI / 2, 0, 0]}>\n          <mesh \n            name=\"G-3_1\" \n            material={props.meshMaterial? props.meshMaterial : materials['Wood-3 Ver.033']} \n            geometry={nodes['G-3_1'].geometry} \n            material-clippingPlane={ [new THREE.Plane(new THREE.Vector3(0, -1, 0), 0.5)]}\n            // material-color={props.meshActive ? 'red' : 'blue'}\n          />\n          <mesh \n            name=\"G-3_2\" \n            material={props.meshMaterial? props.meshMaterial : materials['diffuse_0_0_0_255.033']} \n            geometry={nodes['G-3_2'].geometry}  \n            material-color={(props.meshActive || props.meshHoveredOver) ? 'red' : 'pink'}\n            material-clippingPlane={ [new THREE.Plane(new THREE.Vector3(0, -1, 0), 1)]}\n\n          />\n            \n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/Swift/G3.glb')\n","import React, { useRef, useState, useCallback, useEffect, Suspense, useReducer } from \"react\"\nimport { useFrame, MouseEvent, PointerEvent, WheelEvent, MeshProps, EventHandlers, GroupProps, ObjectMap, useThree  } from \"react-three-fiber\"\nimport { Geometry, Mesh } from 'three'; \nimport * as THREE from 'three'; \nimport { Html, HtmlProps, meshBounds, Loader} from '@react-three/drei'; \nimport { IContainer, makeContainer, IFaces, ContainerState, containerConstructors } from '../../../lib/graph'\nimport { useSpring, animated } from 'react-spring'; \n// For the tooltip\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n//Global State\nimport { useDispatch } from 'react-redux'; \nimport { bringAllContainersIntoFocus, bringContainerIntoFocus } from '../../../store/Editor/action-constructors'; \nimport {  plywoodMaterial } from '../../../materials/plywoodMaterial'; \n\nimport SwiftG3 from '../../../Models/Swift/G3'; \nimport { Things } from './Thing'; \n\n\nimport { \n  CellState,   \n  Point3, \n  Building,\n  Storey,\n  EnvelopeSection, \n  Room,\n  WallUnit, \n  FloorUnit, \n  RoofUnit,\n  Void,\n  Active, \n  Inactive,\n  ActiveState\n} from '../../../store/Editor/types/CellState'; \nimport { getLenses } from '../../../lib/optics/getLenses'; \nimport { getPrism } from '../../../lib/optics/getPrism'; \n\nimport { Lens, lens } from 'monocle-ts'; \n\n//LOAD GEOMETRY/MATERIALS\n\n// Example mesh\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { GLTF  } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport { GLTFTypeLookup, SwiftGLTF } from '../../../Models/Swift/GLTF-types'\n\n\ntype GLTFResult = GLTF & ObjectMap\n\n\n/////////////////////////////////////////////\n/// This is a wrapper for a grid cell/voxel. We allocate a certain state to the cell, and then render that state\n/// into a particular view. \n////////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n// On double click: zoom in and isolate the container -> view from particular angle. \n// useSpring ?  Must be global state ? \n\n\n/// Tooltip\n\nconst toolTipProps: HtmlProps = {\n\n  prepend: false, // boolean: Project content behind the canvas (default: false)\n  center: false, // boolean: Adds a -50%/-50% css transform (default: false)\n  fullscreen: false, // boolean: Aligns to the upper-left corner, fills the screen (default:false)\n  scaleFactor: 10, // If set (default: undefined), children will be scaled by this factor, and also by distance to a PerspectiveCamera.\n  zIndexRange: [100, 0], //Array<number> :  Z-order range (default=[16777271, 0])\n  portal: undefined // React.MutableRefObject<HTMLElement>: Reference to target container (default=undefined)\n  // {...groupProps} // All THREE.Group props are valid\n  // {...divProps} // All HTMLDivElement props are valid\n\n}\n\nconst ContainerTooltip = (): JSX.Element => {\n  const toolTipUseStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      button: {\n        margin: theme.spacing(1),\n      },\n      customWidth: {\n        maxWidth: 500,\n      },\n      noMaxWidth: {\n        maxWidth: 'none',\n      },\n    }),\n  );\n\n  const longText = `\n  Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus.\n  Praesent non nunc mollis, fermentum neque at, semper arcu.\n  Nullam eget est sed sem iaculis gravida eget vitae justo.\n  `;   \n    return (\n      <Tooltip title={longText} placement=\"left\">\n      <Button className={toolTipUseStyles().button}>Default Width [300px]</Button>\n      </Tooltip>\n    )\n}\n\n\n\n\ntype MeshState = {\n  meshGeometry?: THREE.Geometry | THREE.BufferGeometry,\n  meshMaterial: THREE.MeshStandardMaterial,\n  meshRef: React.MutableRefObject<typeof Mesh | undefined> | undefined;\n  meshHoveredOver: boolean; //usful for ui -> so people know where they're clicking. (possible to turn this feature off ? )\n  meshActive: boolean;\n  meshVisible: boolean; // for when we want to single out a particular container\n}\n\ninterface EnvelopeState {\n  component: string,\n  mesh1: MeshState, \n  mesh2: MeshState\n}\ninterface ViewState {\n  internalLightsOn: boolean;\n  toolTipVisible: boolean;\n}\n\n\ninterface State {\n    //model state\n    modelState: EnvelopeState,\n\n    viewState: ViewState;\n\n} \n\n\n// --| Lenses\nconst stateLens = Lens.fromProp<State>(); \nconst viewStateLens = Lens.fromProp<ViewState>();\nconst envelopeStateLens = Lens.fromProp<EnvelopeState>()\nconst meshLens = Lens.fromProp<MeshState>()\n\nconst mesh1Lens = envelopeStateLens('mesh1'); \nconst meshActiveLens = meshLens('meshActive'); \n// const s = mesh1Lens.composeLens(meshActiveLens).modify((a: boolean) => false)\n\n// --| View and Model state\n\n\n\n// --| Action types\nexport enum ActionTypes {\n  ON_CLICK = \"ON_CLICK\",\n  ON_POINTER_OVER = \"ON_POINTER_OVER\",\n  ON_POINTER_OUT = \"ON_POINTER_OUT\",\n  ON_CONTEXT_MENU = \"ON_CONTEXT_MENU\",\n  ON_DOUBLE_CLICK = 'ON_DOUBLE_CLICK'\n}\n\ninterface onClickAction {\n _tag: typeof ActionTypes.ON_CLICK\n payload: { mouseEvent: MouseEvent }\n}\ninterface onPointerOverAction {\n  _tag: typeof ActionTypes.ON_POINTER_OVER\n  payload: { pointerEvent: PointerEvent }\n}\ninterface onPointerOutAction {\n  _tag: typeof ActionTypes.ON_POINTER_OUT\n  payload: { pointerEvent: PointerEvent }\n}\ninterface onContextMenuAction {\n  _tag: typeof ActionTypes.ON_CONTEXT_MENU\n  payload: { mouseEvent: MouseEvent }\n}\ninterface onDoubleClick<T extends GLTFResult= GLTFResult> {\n  _tag: typeof ActionTypes.ON_DOUBLE_CLICK\n  payload: {mouseEvent: MouseEvent, gltf: T }\n}\n\n// Action types\n\nexport type Action = \n| onClickAction\n| onPointerOverAction\n| onPointerOutAction\n| onContextMenuAction\n| onDoubleClick\n\n// Action constructors:\n\nexport function onDoubleClick<T extends GLTFResult= GLTFResult>(e: MouseEvent, gltf: T): Action {\n  return {\n    _tag: ActionTypes.ON_DOUBLE_CLICK,\n    payload: {mouseEvent: e, gltf:  gltf}\n  }\n}\nexport function onClick(e: MouseEvent): Action {\n  return {\n    _tag: ActionTypes.ON_CLICK,\n    payload: {mouseEvent: e }\n  }\n}\nexport function onPointerOver(e: PointerEvent): Action {\n  return {\n    _tag: ActionTypes.ON_POINTER_OVER,\n    payload: {pointerEvent: e }\n  }\n}\nexport function onPointerOut(e: PointerEvent): Action {\n  return {\n    _tag: ActionTypes.ON_POINTER_OUT,\n    payload: {pointerEvent: e }\n  }\n}\nexport function onContextMenu(e: MouseEvent): Action {\n  return {\n    _tag: ActionTypes.ON_CONTEXT_MENU,\n    payload: {mouseEvent: e }\n  }\n}\n\n\n\n// Reducer functions on state : \nconst activateMeshOnClick = () => (state: State): State => {\n  return {\n    viewState: state.viewState, \n    modelState: envelopeStateLens('mesh1')\n                  .composeLens(meshLens('meshActive'))\n                  .modify((a: boolean) => !a)(state.modelState)\n  }\n}\nconst activateMeshOnHoverOver = () => (state: State): State => {\n  return {\n    viewState: state.viewState, \n    modelState: envelopeStateLens('mesh1')\n                .composeLens(meshLens('meshHoveredOver'))\n                .modify((a: boolean) => true)(state.modelState)\n  }\n}\nconst deactivateMeshOnHoverOut = () => (state: State): State => {\n  return {\n    viewState: state.viewState, \n    modelState: envelopeStateLens('mesh1')\n                .composeLens(meshLens('meshHoveredOver'))\n                .modify((a: boolean) => false)(state.modelState)\n  }\n}\n\nconst makeToolTipVisible = () => (state: State): State => {\n  return {\n      ...state, viewState: viewStateLens('toolTipVisible').modify((a: boolean) => !a)(state.viewState)\n  }\n}\n\nconst updateGeometry = (newGeometry:Geometry | THREE.BufferGeometry  ) => (state: State): State => {\n  return {\n    viewState: state.viewState,\n    modelState: envelopeStateLens('mesh1')\n                .composeLens(meshLens('meshGeometry'))\n                .modify((a: Geometry | THREE.BufferGeometry | undefined) => {return newGeometry})(state.modelState)\n  }\n}\n\n\n\n\n\ninterface ContainerMeshProps extends GroupProps {\n  componentID: SwiftGLTF;\n  position: THREE.Vector3\n}\n\n/* Elm architecture: model (i.e state), view (i.e manifestation of the state), update (i.e actions dispatched by events to update state) */\nexport const ContainerGroup = (props: ContainerMeshProps): JSX.Element => {\n\n  const initalState: State = {\n\n    modelState: {\n      component: props.componentID,\n      mesh1: {\n        meshGeometry: undefined,\n        meshMaterial: plywoodMaterial,\n        meshRef: undefined,\n        meshHoveredOver: false, //usful for ui -> so people know where they're clicking. (possible to turn this feature off ? )\n        meshActive: false,\n        meshVisible: true, // for when we want to single out a particular container\n      },\n      mesh2: {\n        meshGeometry: undefined,\n        meshMaterial: plywoodMaterial,\n        meshRef: undefined,\n        meshHoveredOver: false, //usful for ui -> so people know where they're clicking. (possible to turn this feature off ? )\n        meshActive: false,\n        meshVisible: true, // for when we want to single out a particular container\n      }\n    },\n\n    viewState: {\n      internalLightsOn: false,\n      toolTipVisible: false,\n    }\n   \n  } \n\n\n  const { gl } = useThree();\n  gl.localClippingEnabled = true;\n\n  //// Reducer function \n\n  const ContainerReducer = (state: State, action: Action) => {\n    switch (action._tag) {\n      case ActionTypes.ON_CLICK:\n        console.log(state)\n        action.payload.mouseEvent.stopPropagation()\n        return activateMeshOnClick()(state); \n      case ActionTypes.ON_POINTER_OVER:\n        action.payload.pointerEvent.stopPropagation()\n        return activateMeshOnHoverOver()(state)\n      case ActionTypes.ON_POINTER_OUT:\n        action.payload.pointerEvent.stopPropagation()\n        return deactivateMeshOnHoverOut()(state);\n      case ActionTypes.ON_DOUBLE_CLICK:\n        action.payload.mouseEvent.stopPropagation()\n        return makeToolTipVisible()(state)      \n        // return {...state, meshGeometry: action.payload.gltf.nodes[\"A-3_1\"].geometry }; // double click should probably isolate the mesh\n      default:\n        throw new Error();\n    }\n  }\n\n\n  const [state, localDispatch] = useReducer(ContainerReducer, initalState);\n\n  return (\n    <group\n      {...props}\n      // ref={state.meshRef}\n      receiveShadow={true}\n      castShadow={true}\n      visible={state.modelState.mesh1.meshVisible}  \n      // -- Object3D node props\n      // position?: Vector3;\n      // up?: Vector3;\n      // scale?: Vector3;\n      // rotation?: Euler;\n      // matrix?: Matrix4;\n      // quaternion?: Quaternion;\n      // layers?: Layers;\n      // dispose?: (() => void) | null;\n      // -- TGeometry props\n      // -- TMaterial props\n      // \tclippingPlanes: any;\n\n\n      /** Update */\n      onClick         = {(e: MouseEvent)    => { return localDispatch( onClick(e)             ) }   }\n      onPointerOver   = {(e: PointerEvent)  => { return localDispatch( onPointerOver(e)       ) }   }\n      onPointerOut    = {(e: PointerEvent)  => { return localDispatch( onPointerOut(e)        ) }   }\n      onContextMenu   = {(e: MouseEvent)    => { return localDispatch( onContextMenu(e)       ) }   }\n      // onDoubleClick   = {(e: MouseEvent)    => { return localDispatch( onDoubleClick(e, props.gltf[0]) ) }   }\n      onPointerUp     = {(e: PointerEvent)  => {  }}\n      onPointerDown   = {(e: PointerEvent)  => {}}\n      onPointerMove   = {(e: PointerEvent)  => {}}\n      onPointerMissed = {(e: React.MouseEvent) => {}}\n      onWheel         = {(e: WheelEvent)    => {}}\n    >\n      <Suspense\n      fallback={\n        <Html center>\n          <Loader />\n        </Html>\n      }>    \n\n      <SwiftG3 meshActive={state.modelState.mesh1.meshActive} meshHoveredOver={state.modelState.mesh1.meshHoveredOver}/>\n      {/** GLTF model ------------------------------------ */}\n    \n      {/** ------------------------------------------------*/}\n\n      </Suspense>\n\n\n      {/** --- Tooltip  */}\n      {state.viewState.toolTipVisible && \n        <Html>\n            <ContainerTooltip/>\n        </Html>\n      }\n    </group>\n  )\n}\n\n\n// React components\n// const AnimatedContainerMesh = animated(ContainerMesh); \n","import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport * as THREE from 'three'\n\n\n\nexport type GLTFTypeLookup<R extends SwiftGLTF> = ShapeMap[R]\n\n\nexport enum SwiftGLTF {\n    A1 = 'A1', A2 = 'A2', A3 = 'A3', A4 = 'A4', A5 = 'A5',\n    B1 = 'B1', B2 = 'B2', B3 = 'B3', B4 = 'B4', B5 = 'B5', B6 = 'B6', B7 = \"B7\",\n    C1 = 'C1', C2 = 'C2', C3 = 'C3', C4 = 'C4', C5 = 'C5',\n    D1 = 'D1', D2 = 'D2', D3 = 'D3', D4 = 'D4',\n    E1 = 'E1', E2 = 'E2',  E3 = 'E3', E4 = 'E4',\n    F1 = 'F1', F2 = 'F2', F3 = 'F3', F4 = 'F4', F5 = 'F5',\n    G1 = 'G1', G2 = 'G2', G3 = 'G3', G4 = 'G4', G5 = 'G5', G6 = 'G6', G7 = 'G7',\n    H1 = 'H1', H2 = 'H2', H3 = 'H3', H4 = 'H4',  H5 = 'H5'\n  }\nexport interface ShapeMap {\n    // R0: T;\n    A1: GLTF &  {\n        nodes: {\n          ['A-1.001_1']: THREE.Mesh\n          ['A-1.001_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.001']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.001']: THREE.MeshStandardMaterial\n        }\n      },\n    A2: GLTF & {\n        nodes: {\n          ['A-2_1']: THREE.Mesh\n          ['A-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.002']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.002']: THREE.MeshStandardMaterial\n        },\n    }\n    A3: GLTF & {\n        nodes: {\n          ['A-3_1']: THREE.Mesh\n          ['A-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.003']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.003']: THREE.MeshStandardMaterial\n        }\n      },\n    A4: GLTF & {\n        nodes: {\n          ['A-4_1']: THREE.Mesh\n          ['A-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.004']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.004']: THREE.MeshStandardMaterial\n        }\n      },\n    A5: GLTF & {\n        nodes: {\n          ['A-5_1']: THREE.Mesh\n          ['A-5_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.005']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.005']: THREE.MeshStandardMaterial\n        }\n      },\n    B1: GLTF & {\n        nodes: {\n          ['B-1_1']: THREE.Mesh\n          ['B-1_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.006']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.006']: THREE.MeshStandardMaterial\n        }\n      },\n    B2: GLTF & {\n        nodes: {\n          ['B-2_1']: THREE.Mesh\n          ['B-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.007']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.007']: THREE.MeshStandardMaterial\n        }\n      },\n    B3: GLTF & {\n        nodes: {\n          ['B-3_1']: THREE.Mesh\n          ['B-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.008']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.008']: THREE.MeshStandardMaterial\n        }\n      },\n    B4: GLTF & {\n        nodes: {\n          ['B-4_1']: THREE.Mesh\n          ['B-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.009']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.009']: THREE.MeshStandardMaterial\n        }\n      },\n    B5: GLTF & {\n        nodes: {\n          ['B-5_1']: THREE.Mesh\n          ['B-5_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.010']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.010']: THREE.MeshStandardMaterial\n        }\n      },\n    B6: GLTF & {\n        nodes: {\n          ['B-6_1']: THREE.Mesh\n          ['B-6_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.011']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.011']: THREE.MeshStandardMaterial\n        }\n      },\n    B7: GLTF & {\n        nodes: {\n          ['B-7_1']: THREE.Mesh\n          ['B-7_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.012']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.012']: THREE.MeshStandardMaterial\n        }\n      },\n    C1: GLTF & {\n        nodes: {\n          ['C-1_1']: THREE.Mesh\n          ['C-1_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.013']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.013']: THREE.MeshStandardMaterial\n        }\n      },\n    C2: GLTF & {\n        nodes: {\n          ['C-2_1']: THREE.Mesh\n          ['C-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.014']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.014']: THREE.MeshStandardMaterial\n        }\n      },\n    C3:  GLTF & {\n        nodes: {\n          ['C-3_1']: THREE.Mesh\n          ['C-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.015']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.015']: THREE.MeshStandardMaterial\n        }\n      },\n    C4: GLTF & {\n        nodes: {\n          ['C-4_1']: THREE.Mesh\n          ['C-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.016']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.016']: THREE.MeshStandardMaterial\n        }\n      },\n    C5: GLTF & {\n        nodes: {\n          ['C-5_1']: THREE.Mesh\n          ['C-5_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.017']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.017']: THREE.MeshStandardMaterial\n        }\n      },\n    D1: GLTF & {\n        nodes: {\n          ['D-1_1']: THREE.Mesh\n          ['D-1_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.018']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.018']: THREE.MeshStandardMaterial\n        }\n      },\n    D2: GLTF & {\n        nodes: {\n          ['D-2_1']: THREE.Mesh\n          ['D-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.019']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.019']: THREE.MeshStandardMaterial\n        }\n      },\n    D3: GLTF & {\n        nodes: {\n          ['D-3_1']: THREE.Mesh\n          ['D-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.020']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.020']: THREE.MeshStandardMaterial\n        }\n      },\n    D4: GLTF & {\n        nodes: {\n          ['D-4_1']: THREE.Mesh\n          ['D-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.021']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.021']: THREE.MeshStandardMaterial\n        }\n      },\n    E1: GLTF & {\n        nodes: {\n          ['E-1_1']: THREE.Mesh\n          ['E-1_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.022']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.022']: THREE.MeshStandardMaterial\n        }\n      },\n    E2: GLTF & {\n        nodes: {\n          ['E-2_1']: THREE.Mesh\n          ['E-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.023']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.023']: THREE.MeshStandardMaterial\n        }\n      },\n    E3:  GLTF & {\n        nodes: {\n          ['E-3_1']: THREE.Mesh\n          ['E-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.024']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.024']: THREE.MeshStandardMaterial\n        }\n      },\n    E4: GLTF & {\n        nodes: {\n          ['E-4_1']: THREE.Mesh\n          ['E-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.025']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.025']: THREE.MeshStandardMaterial\n        }\n      },\n    F1:  GLTF & {\n        nodes: {\n          ['F-1_1']: THREE.Mesh\n          ['F-1_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.026']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.026']: THREE.MeshStandardMaterial\n        }\n      },\n    F2:  GLTF & {\n        nodes: {\n          ['F-2_1']: THREE.Mesh\n          ['F-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.027']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.027']: THREE.MeshStandardMaterial\n        }\n      },\n    F3: GLTF & {\n        nodes: {\n          ['F-3_1']: THREE.Mesh\n          ['F-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.028']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.028']: THREE.MeshStandardMaterial\n        }\n      },\n    F4:  GLTF & {\n        nodes: {\n          ['F-4_1']: THREE.Mesh\n          ['F-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.029']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.029']: THREE.MeshStandardMaterial\n        }\n      },\n    F5: GLTF & {\n        nodes: {\n          ['F-5_1']: THREE.Mesh\n          ['F-5_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.030']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.030']: THREE.MeshStandardMaterial\n        }\n      },\n    G1: GLTF & {\n        nodes: {\n          ['G-1_1']: THREE.Mesh\n          ['G-1_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.031']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.031']: THREE.MeshStandardMaterial\n        }\n      },\n    G2:  GLTF & {\n        nodes: {\n          ['G-2_1']: THREE.Mesh\n          ['G-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.032']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.032']: THREE.MeshStandardMaterial\n        }\n      },\n    G3: GLTF & {\n        nodes: {\n          ['G-3_1']: THREE.Mesh\n          ['G-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['Wood-3 Ver.033']: THREE.MeshStandardMaterial\n          ['diffuse_0_0_0_255.033']: THREE.MeshStandardMaterial\n        }\n      },\n    G4: GLTF & {\n        nodes: {\n          ['G-4_1']: THREE.Mesh\n          ['G-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.034']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.034']: THREE.MeshStandardMaterial\n        }\n      },\n    G5: GLTF & {\n        nodes: {\n          ['G-5_1']: THREE.Mesh\n          ['G-5_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.035']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.035']: THREE.MeshStandardMaterial\n        }\n      },\n    G6: GLTF & {\n        nodes: {\n          ['G-6_1']: THREE.Mesh\n          ['G-6_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.036']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.036']: THREE.MeshStandardMaterial\n        }\n      },\n    G7: GLTF & {\n        nodes: {\n          ['G-7_1']: THREE.Mesh\n          ['G-7_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.037']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.037']: THREE.MeshStandardMaterial\n        }\n      },\n    H1: GLTF & {\n        nodes: {\n          ['H-1_1']: THREE.Mesh\n          ['H-1_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.038']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.038']: THREE.MeshStandardMaterial\n        }\n      },\n    H2: GLTF & {\n        nodes: {\n          ['H-2_1']: THREE.Mesh\n          ['H-2_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.039']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.039']: THREE.MeshStandardMaterial\n        }\n      },\n    H3: GLTF & {\n        nodes: {\n          ['H-3_1']: THREE.Mesh\n          ['H-3_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.040']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.040']: THREE.MeshStandardMaterial\n        }\n      },\n    H4:  GLTF & {\n        nodes: {\n          ['H-4_1']: THREE.Mesh\n          ['H-4_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.041']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.041']: THREE.MeshStandardMaterial\n        }\n      },\n    H5: GLTF & {\n        nodes: {\n          ['H-5_1']: THREE.Mesh\n          ['H-5_2']: THREE.Mesh\n        }\n        materials: {\n          ['diffuse_0_0_0_255.042']: THREE.MeshStandardMaterial\n          ['Wood-3 Ver.042']: THREE.MeshStandardMaterial\n        }\n      }\n   \n  }\n\n\n\n\n","import * as THREE from \"three\";\n\n// import { clipPlanes } from \"../components/ClippingSlider\";\n\nconst tl = new THREE.TextureLoader();\n\nconst rpt = function(texture: THREE.Texture) {\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  texture.repeat.set(0.025, 0.025);\n  texture.rotation = Math.PI / 2;\n};\n\nexport const zincMaterial = new THREE.MeshStandardMaterial({\n  color: 0xeeeeee,\n  map: tl.load(\n    \"/Materials/16_steel zinc coated corrugated metal texture-seamless.jpg\",\n    rpt\n  ),\n  // displacementMap: tl.load(\n  //   \"materials/16_steel zinc coated corrugated metal texture-seamless_hr/16_steel zinc coated_DISPL.jpg\",\n  //   rpt\n  // ),\n  // normalMap: tl.load(\n  //   \"materials/16_steel zinc coated corrugated metal texture-seamless_hr/16_steel zinc coated_NORM.jpg\",\n  //   rpt\n  // ),\n  // aoMap: tl.load(\n  //   \"materials/16_steel zinc coated corrugated metal texture-seamless_hr/16_steel zinc coated-AO.jpg\",\n  //   rpt\n  // ),\n  // side: THREE.DoubleSide\n  // specularMap: tl.load('/46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_SPEC.jpg', rpt),\n  // shininess: 0,\n  // normalScale: 1.0,\n\n  // ambientIntensity: 0.3,\n  // aoMapIntensity: 3.0,\n  // envMapIntensity: 10.5,\n  // https://discourse.threejs.org/t/material-displacement-map-makes-the-texture-unwrap-the-models-surfaces/5119/11\n  displacementScale: 0,\n  // displacementBias: 1,\n  roughness: 0.8,\n  metalness: 0.4,\n  // side: THREE.DoubleSide,\n  polygonOffset: true,\n  polygonOffsetFactor: 1,\n\n  // flatShading: true,\n  // clippingPlanes: clipPlanes,\n  clipIntersection: true,\n  // shadowSide: THREE.DoubleSide,\n  side: THREE.FrontSide,\n  clipShadows: true\n  // clipShadows: true\n});\n\nexport default zincMaterial;\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { Html } from '@react-three/drei';\n\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport { plywoodMaterial } from '../../materials/plywoodMaterial'; \nimport { zincMaterial  } from '../../materials/zincMaterial'; \n\ntype GLTFResult = GLTF & {\n  nodes: {\n    untitled_1: THREE.Mesh\n    untitled_2: THREE.Mesh\n    untitled_3: THREE.Mesh\n    untitled_4: THREE.Mesh\n    untitled_5: THREE.Mesh\n    untitled_6: THREE.Mesh\n    untitled_7: THREE.Mesh\n    untitled_8: THREE.Mesh\n    untitled_9: THREE.Mesh\n    untitled_10: THREE.Mesh\n    untitled_11: THREE.Mesh\n    untitled_12: THREE.Mesh\n    untitled_13: THREE.Mesh\n    untitled_14: THREE.Mesh\n    untitled_15: THREE.Mesh\n    untitled_16: THREE.Mesh\n    untitled_17: THREE.Mesh\n    untitled_18: THREE.Mesh\n    untitled_19: THREE.Mesh\n    untitled_20: THREE.Mesh\n    untitled_21: THREE.Mesh\n    untitled_22: THREE.Mesh\n  }\n  materials: {\n    Timber: THREE.MeshStandardMaterial\n    BackColor: THREE.MeshStandardMaterial\n    FrontColor: THREE.MeshStandardMaterial\n    Translucent_Glass_Gray: THREE.MeshStandardMaterial\n    Color_M00: THREE.MeshStandardMaterial\n    _White_: THREE.MeshStandardMaterial\n    Wood_Plywood_Knots: THREE.MeshStandardMaterial\n    Color_001: THREE.MeshStandardMaterial\n    Inox_Chiuveta: THREE.MeshStandardMaterial\n    _9: THREE.MeshStandardMaterial\n    balic_berch1: THREE.MeshStandardMaterial\n    Color_D09: THREE.MeshStandardMaterial\n    _11: THREE.MeshStandardMaterial\n    _LightGray_: THREE.MeshStandardMaterial\n    _DimGray_: THREE.MeshStandardMaterial\n    M_0010_Snow: THREE.MeshStandardMaterial\n    _Translucent_Glass_Gray_1: THREE.MeshStandardMaterial\n    _2: THREE.MeshStandardMaterial\n    M_96_96_1: THREE.MeshStandardMaterial\n    prettyplastic: THREE.MeshStandardMaterial\n  }\n}\n\nexport default function Model(props: JSX.IntrinsicElements['group']) {\n  const group = useRef<THREE.Group>()\n  const { nodes, materials } = useGLTF('/skylark_gltf_skylark.glb') as GLTFResult\n\n  const state = {\n    showHTML: false\n  }\n\n  return (\n    <group \n      ref={group} \n      {...props} \n      dispose={null}\n      castShadow={true}\n      receiveShadow={true}\n      onClick={\n        (e) => {\n          e.stopPropagation()\n          state.showHTML = !state.showHTML; \n        }\n      }\n      \n    >\n      <group rotation={[Math.PI / 2, 0, 0]}>\n        {state.showHTML == true  ? <Html> <a>  Skylark House </a></Html> : <Html> <a>  </a></Html>}\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_1.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_2.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_3.geometry} />\n        <mesh material={materials.Translucent_Glass_Gray} geometry={nodes.untitled_4.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_5.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_6.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_7.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_8.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_9.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_10.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_11.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_12.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_13.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_14.geometry} />\n        <mesh material={plywoodMaterial} geometry={nodes.untitled_15.geometry} />\n        <mesh material={zincMaterial} geometry={nodes.untitled_16.geometry} />\n        <mesh material={zincMaterial} geometry={nodes.untitled_17.geometry} />\n        <mesh material={zincMaterial} geometry={nodes.untitled_18.geometry} />\n        <mesh material={materials._Translucent_Glass_Gray_1} geometry={nodes.untitled_19.geometry} />\n        <mesh material={zincMaterial} geometry={nodes.untitled_20.geometry} />\n        <mesh material={zincMaterial} geometry={nodes.untitled_21.geometry} />\n        {/* <mesh material={zincMaterial} geometry={nodes.untitled_22.geometry} /> */}\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/skylark_gltf_skylark.glb')\n","\nimport React, { useRef, VFC, Suspense } from 'react';\nimport { useThree, extend, ReactThreeFiber, useFrame, Canvas } from 'react-three-fiber';\nimport {OrbitControls, Html, Loader, useContextBridge, Environment, ContactShadows } from '@react-three/drei';\nimport { Light } from './Light'; \nimport { Perf } from 'r3f-perf';\nimport * as THREE from 'three'; \nimport ClippingSlider from './ClippingSlider/ClippingSlider'; \nimport { useSpring } from 'react-spring'; \n//Models\nimport { ContainerMesh  } from './Container/MeshContainer'; \n// import { ContainerGroupMesh } from './Container/MeshGroupContainer'\nimport { ContainerGroup } from './Container/MeshGroupContainer2'\n\n// Icons\nimport Icon from '@material-ui/core/Icon';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport { Object3D, Vector3 } from 'three';\n\n// Redux Context\nimport { ReactReduxContext } from 'react-redux';\n\n// SceneGraph Object\nimport { SceneGraph } from './SceneGraph'\nimport { truncateSync } from 'fs';\n\n\nimport Dodecahedron from './Gestured/Draggable'; \n\nimport { gltfPicked } from './Container/modelMatcher'; \n\nimport {SwiftGLTF } from '../../Models/Swift/GLTF-types'; \n\nimport { v4 as uuidv4 } from 'uuid';\n\n\n\nimport SkylarkWhole from './Skylark_gltf_skylark'\n{/* <Icon>\n  <FullscreenIcon/>\n</Icon> */}\n\n\n/////\n// Camera\n/////\n\nconst Dolly = (targetObject: THREE.Object3D): void => {\n  // This one makes the camera move in and out\n  useFrame(({ clock, camera }) => {\n    // Move camera to a point where you can more easily see the object under inspection\n    // camera.position.z = 50 + Math.sin(clock.getElapsedTime()) * 30\n    // Look at the object under isnpection\n    const {x,y,z} = targetObject.position; \n    camera.lookAt(new Vector3(x,y,z)) \n\n    // This process should be animated\n    // just use .lerp ( x : Float, y : Float, t : Float ) : Float ? \n\n    // camera.updateProjectionMatrix()\n\n  })\n}\n\n\n// // alternate \n// const Controls = (targetObject: Object3D) => {\n//   const { gl, camera } = useThree()\n  \n  \n\n//   const [props, set ] \n//   = useSpring<{\n//     from: {x: number, y: number, z: number};\n//     to: { x: number, y: number, z: number };\n//     onFrame: (...args: any) => void;\n//     reverse: boolean;\n//     onRest: (...args: any) => void;\n//   }>(\n//     () => (\n//       {\n//         from: {x: camera.position.x, y: camera.position.y, z: camera.position.z}, \n//         to: {x: targetObject.position.x, y: targetObject.position.y, z: targetObject.position.z},\n//         onFrame: ({to}: {to : {x: number, y: number, z: number}}) => { \n//           camera.position.x = to.x; \n//           camera.position.y = to.y; \n//           camera.position.z = to.z; \n//         },\n//         reverse: false,\n//         onRest: () => {}\n//       }\n//     )\n//   )\n\n\n//   useSpring<{\n//     from: unknown;\n//     z: unknown;\n//     onFrame: (...args:any) => void;\n//   }>({\n//     from: {\n//       z: 300\n//     },\n//     z: 2,\n//     onFrame: ({ z }) => {\n//       camera.position.z = z\n//     }\n//   })\n\n//   return <OrbitControls target={[0, 0, 0]} args={[camera, gl.domElement]} />\n// }\n\n\nconst extractGridPosition = (key: string): number[] =>\n  key.split(\",\").map(x => Number(x) * 1.2);\n\n\nconst Building = () => {\n  const { gl } = useThree();\n  gl.localClippingEnabled = true;\n\n  const grid = {\n    \"0,-5\": {\n      type: SwiftGLTF.A1,\n    },\n    \"0,-4\": {\n      type: SwiftGLTF.A2,\n    },\n    \"0,-3\": {\n      type: SwiftGLTF.A3,\n    },\n    \"0,-2\": {\n      type: SwiftGLTF.A4,\n    },\n    \"0,-1\": {\n      type: SwiftGLTF.B1,\n    },\n    \"0,0\": {\n      type: SwiftGLTF.B2,\n    }\n  };\n\n  return (\n    <>\n      {Object.entries(grid).map(([k, v]) => (\n        \n        <React.Fragment>\n           <ContainerGroup \n            key={uuidv4()} \n            position={new THREE.Vector3(extractGridPosition(k)[0], 0, extractGridPosition(k)[1])} \n            componentID={v.type} \n          />\n        </React.Fragment>\n       \n      ))}\n    </>\n  );\n};\n\n\n//////////////////////////////////\n// Scene\n//////////////////////////////////\n\n\n\nconst EditorScene = () => {\n\n  const orbitControlsRef = useRef<OrbitControls>();\n  console.log(orbitControlsRef)\n\n  const {\n    camera,\n    gl: { domElement },\n    scene,            // Default scene\n    size,             // Bounds of the view (which stretches 100% and auto-adjusts)\n    viewport,         // Bounds of the viewport in 3d units + factor (size/viewport)\n    aspect,           // Aspect ratio (size.width / size.height)\n    invalidate,       // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    setDefaultCamera  // Sets the default camera\n  } = useThree()\n  \n\n  return (\n    <>\n    {/**Sets up a global cubemap, which affects scene.environment, and optionally scene.background. A selection of presets from \n     * HDRI Haven are available for convenience. */}\n     {/* <Environment preset=\"warehouse\" /> */}\n      \n      {/* <ContactShadows\n          rotation={[Math.PI / 2, 0, 0]}\n          position={[0, -1.6, 0]}\n          width={15}\n          height={15}\n          blur={2.5}\n          far={1.6}\n        /> */}\n\n        \n    \n      <Light/>\n      {/* <mesh \n        name=\"ground\" \n        rotation={[-Math.PI / 2, 0, 0]} \n        receiveShadow={true}\n      >\n          <planeBufferGeometry attach=\"geometry\" args={[50, 50, 1, 1]} />\n          <shadowMaterial\n            attach=\"material\"\n            color={0.5}\n            opacity={0.9}\n            side={THREE.DoubleSide}\n          />\n          <meshBasicMaterial color=\"gray\" side={THREE.DoubleSide} attach=\"material\" />\n          \n      </mesh>   */}\n          \n       \n       \n          {/* <Dodecahedron/> */}\n\n      <Suspense\n        fallback={\n          <Html center>\n            <Loader />\n          </Html>\n        }>\n          {/** PUT MODELS HERE  */}\n          {/** Create a coordinate system for grid. Place the containers/voxels into grid with given rotations  */}\n         \n          {/* <SceneGraph/> */}\n          <SkylarkWhole/>\n\n\n          {/* <Building/> */}\n          {/* <ContainerMesh componentID={SwiftGLTF.A1}/> */}\n\n\n\n\n\n\n\n\n\n\n\n\n\n          {/*******************/}\n      </Suspense>\n\n      <OrbitControls \n        //Get ref from the store?\n        ref={orbitControlsRef} \n        enablePan={true} \n        enableRotate={true} \n        zoomSpeed={0.5}\n        args={[camera, domElement]} \n        target={[0, 3, 0]}\n        // enableDamping\n        // dampingFactor={0.2}\n        rotateSpeed={0.7}\n        maxPolarAngle={1.49}\n        enabled\n        minDistance={5}\n        maxDistance={100}\n      />   \n      {/* <Controls/> */}\n      {/* <Dolly /> */}\n      <Perf />\n\n    </>\n  );\n};\n\n\n//////////////////////////////////\n// Editor\n//////////////////////////////////\n\n\nconst Editor: VFC = () => {\n\n \n  // contect bridge needed as workaround due to: https://github.com/pmndrs/react-three-fiber/issues/43\n  const ContextBridge = useContextBridge(ReactReduxContext)\n\n  \n  return (\n  <>\n    {/* <ClippingSlider /> */}\n\n\n    <Canvas\n          colorManagement\n          shadowMap={{ enabled: true, type: THREE.PCFSoftShadowMap }}\n          camera={{ fov: 45, position: [8, 12, 14] }}\n          pixelRatio={window.devicePixelRatio}\n          gl={{ antialias: true }}\n    >\n      <ContextBridge>\n\n\n        <EditorScene />\n\n       \n      </ContextBridge>\n\n    </Canvas>\n   \n\n\n    {/* <a href=\"https://www.opensystemslab.io/\" className=\"top-left\">\n      Open Systems Lab\n    </a>\n    <a href=\"https://www.notion.so/Housing-4-0-Energy-e83e0e7f455a4a419463619a29c4cf51\" className=\"bottom-right\">\n      More Information\n    </a> */}\n\n  </>\n\n  );\n};\n\nexport default Editor;\n","\nimport React from 'react'\nimport Editor from '../../components/3d-editor/Editor';\n// import './builder-3D-page'; \n\n\n// --> First scene: a selection of the different building systems: \n// --> \n\ninterface Props {}\n\nfunction Builder3DPage(props: Props) {\n    const {} = props\n\n    React.useEffect(() => {\n        const handleKeyDown = (ev: KeyboardEvent) => {\n          if (ev.key === \"i\") {\n              console.log('i button pressed')\n            // setEditMode(EditMode.Insert);\n          } else if (ev.key === \"m\" || ev.key === \"Escape\") {\n            // setEditMode(EditMode.Move);\n          } else if (ev.key === \"r\") {\n            // setEditMode(EditMode.Resize);\n          } else if (ev.key === \"s\") {\n            // setEditMode(EditMode.Slice);\n          } else if (ev.key === \"z\" && ev.metaKey && !ev.shiftKey) {\n            // setHangars(undoable.undo);\n          } else if (ev.key === \"z\" && ev.metaKey && ev.shiftKey) {\n            // setHangars(undoable.redo);\n          } else if (ev.key === \"c\") {\n            // toggleClippingHeight();\n          }\n        };\n        document.addEventListener(\"keydown\", handleKeyDown);\n        return () => {\n          document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n      }, []);\n\n\n\n    return (\n        <div className='builder-3D-page'>\n            <Editor/>\n        \n\n            <a href=\"https://github.com/hector-crean/io-ts-validation\" className=\"top-left\" children=\"Github\" />\n            <a href=\"https://www.notion.so/Housing-4-0-Energy-e83e0e7f455a4a419463619a29c4cf51\" className=\"top-right\" children=\"Notion Page\" />\n            <a href=\"https://www.opensystemslab.io/\" className=\"bottom-left\" children=\"+ Open Systems Lab \" />\n            {/* <a href=\"\" className=\"bottom-right\" children=\"\" /> */}\n            <span className=\"header\"> H4.OE</span>\n\n\n\n            <div className=\"action-btn\" onClick={()=> {}} />\n\n            \n        </div>\n    )\n}\n\nexport default Builder3DPage\n","import React from 'react'\nimport { a } from '@react-spring/web'\nimport { SpringValue } from '@react-spring/core'; \n\nexport default function Overlay({ fill }: {fill: SpringValue<string>}) {\n  // Just a Figma export, the fill is animated\n  const text = {\n        date: '20/01/20',\n        title: {\n            main: 'H4.0E', sub: 'Sustainable', sub_sub: 'Building'\n        },\n        body: {\n            buildingSystem: 'Skylark',\n            designedBy: 'designed by OSL',\n            buildingComponent: 'building component X',\n            buildingComponentMeta: 'This and that and the other about this particular bit of kit'\n        }\n    }\n  return (\n    <div className=\"greeting-page overlay\">\n      <a.svg viewBox=\"0 0 583 720\" fill={fill} xmlns=\"http://www.w3.org/2000/svg\">\n        {/* <path fill=\"#E8B059\" d=\"M50.5 61h9v9h-9zM50.5 50.5h9v9h-9zM40 50.5h9v9h-9z\" />\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M61 40H50.5v9H61v10.5h9V40h-9z\" fill=\"#E8B059\" /> */}\n        <text style={{ whiteSpace: 'pre' }} fontFamily=\"Inter\" fontSize={6} fontWeight=\"bold\" letterSpacing=\"-.02em\">\n          <tspan x={328} y={46.182} children={text.date} />\n        </text>\n        <text style={{ whiteSpace: 'pre' }} fontFamily=\"Inter\" fontSize={6} fontWeight=\"bold\" letterSpacing=\"-.02em\">\n          <tspan x={392} y={46.182} children={text.title.main} />\n          <tspan x={392} y={54.182} children={text.title.sub} />\n          <tspan x={392} y={62.182} children={text.title.sub_sub} />\n        </text>\n        <text style={{ whiteSpace: 'pre' }} fontFamily=\"Inter\" fontSize={10.5} fontWeight={500} letterSpacing=\"0em\">\n          <tspan x={40} y={175.318} children={text.body.buildingSystem} />\n          <tspan x={40} y={188.318} children={text.body.designedBy} />\n        </text>\n        <text fill=\"#E8B059\" style={{ whiteSpace: 'pre' }} fontFamily=\"Inter\" fontSize={52} fontWeight=\"bold\" letterSpacing=\"0em\">\n          <tspan x={40} y={257.909} children={text.body.buildingComponent} />\n        </text>\n        <text style={{ whiteSpace: 'pre' }} fontFamily=\"Inter\" fontSize={12} fontWeight=\"bold\" letterSpacing=\"0em\">\n          <tspan x={40} y={270.909} />\n        </text>\n        <text style={{ whiteSpace: 'pre' }} fontFamily=\"Inter\" fontSize={48} fontWeight=\"bold\" letterSpacing=\"0em\">\n          <tspan x={40} y={321.909} children=\" \" />\n          <tspan x={40} y={372.909} children=\" \" />\n          <tspan x={40} y={423.909} children=\" \" />\n          <tspan x={40} y={474.909} children=\"\" />\n          <tspan x={40} y={525.909} children=\" \" />\n          <tspan x={40} y={576.909} children=\" \" />\n        </text>\n        <text style={{ whiteSpace: 'pre' }} fontFamily=\"Inter\" fontSize={10.5} fontWeight={500} letterSpacing=\"0em\">\n        </text>\n      </a.svg>\n    </div>\n  )\n}\n","import * as THREE from 'three'\nimport React, { Suspense, useEffect, useState, useRef } from 'react'\nimport { CanvasContext, ObjectMap, useFrame, extend } from 'react-three-fiber'\nimport { PerspectiveCamera, Environment, MeshDistortMaterial, ContactShadows,  Html, Loader } from '@react-three/drei'\nimport { useSpring, SpringStartFn, config } from '@react-spring/core'\nimport { a } from '@react-spring/three'\n\n\n// Example mesh\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\n// type GLTFResult = GLTF & ObjectMap\ntype GLTFResult = GLTF & {\n  nodes: {\n    ['N_S_BLK_1']: THREE.Mesh\n    ['N_S_BLK_2']: THREE.Mesh\n  }\n  materials: {\n    ['FrontColor.004']: THREE.MeshStandardMaterial\n    ['BackColor.008']: THREE.MeshStandardMaterial\n  }\n}\n\n\n// React-spring animates native elements, in this case <mesh/> etc,\n// but it can also handle 3rd–party objs, just wrap them in \"a\".\nconst AnimatedMaterial = a(MeshDistortMaterial)\n\n\n\nexport default function Scene({ setBg }: {\n    setBg: SpringStartFn<{ background: string; fill: string; }>\n}) {\n  const { nodes, materials } = useGLTF('/Skylark/N_S-BLOCK.glb') as GLTFResult; \n\n  // const sphere = useRef<THREE.Object3D>()\n  const modelRef = useRef<THREE.Mesh>()\n  const lightRef = useRef<THREE.Object3D>()\n  const [mode, setMode] = useState<boolean>(false)\n  const [down, setDown] = useState<boolean>(false)\n  const [hovered, setHovered] = useState<boolean>(false)\n\n  // Change cursor on hovered state\n  useEffect(() => {\n    document.body.style.cursor = hovered\n      ? 'none'\n      : `url('data:image/svg+xml;base64,${btoa(\n          '<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"16\" cy=\"16\" r=\"10\" fill=\"#E8B059\"/></svg>'\n        )}'), auto`\n  }, [hovered])\n\n  // Make the bubble float and follow the mouse\n  // This is frame-based animation, useFrame subscribes the component to the render-loop\n  useFrame((state: CanvasContext) => {\n    if (lightRef.current && modelRef.current){\n        lightRef.current.position.x = state.mouse.x * 20\n        lightRef.current.position.y = state.mouse.y * 20\n        modelRef.current.position.x = THREE.MathUtils.lerp(modelRef.current.position.x, hovered ? state.mouse.x / 2 : 0, 0.2)\n        modelRef.current.position.y = THREE.MathUtils.lerp(\n          modelRef.current.position.y,\n          Math.sin(state.clock.elapsedTime / 1.5) / 6 + (hovered ? state.mouse.y / 2 : 0),\n          0.2\n        )\n    }\n  })\n\n  // Springs for color and overall looks, this is state-driven animation\n  // React-spring is physics based and turns static props into animated values\n  type SpringProps = { \n      wobble: number;\n      coat: number;\n      ambient: number;\n      env: number;\n      color: string;\n      config: (n: string) => {\n          mass: number;\n          tension: number;\n          friction: number;\n      }\n  }\n\n  const [{ wobble, coat, color, ambient, env }, set] = useSpring(\n    {\n      wobble: down \n        ? 1.2 \n        : hovered \n            ? 1.05 \n            : 1,\n      coat: mode && !hovered \n        ? 0.04 \n        : 1,\n      ambient: mode && !hovered \n        ? 1.5 \n        : 0.5,\n      env: mode && !hovered \n        ? 0.4 \n        : 1,\n      color: hovered\n        ? '#202020' \n        : mode \n            ? '#202020' \n            : '#202020',\n    //   config: (n: string) => n === 'wobble' && hovered && { mass: 2, tension: 1000, friction: 10 }\n    },\n    [mode, hovered, down]\n  )\n\n  return (\n    \n    <>\n      <PerspectiveCamera makeDefault position={[0, 0, 4]} fov={75}>\n        <a.ambientLight intensity={ambient} />\n        <a.pointLight ref={lightRef} position-z={-15} intensity={env} color=\"#F8C069\" />\n      </PerspectiveCamera>\n      {/* <Suspense\n        fallback={\n          <Html center>\n            <Loader />\n          </Html>\n        }>         */}\n        <a.mesh\n          scale={new THREE.Vector3(3,3,3)}\n          dispose={null}\n          ref={modelRef}\n          //  scale={wobble!.to((w) => [w, w, w])}\n          onPointerOver={() => setHovered(true)}\n          onPointerOut={() => setHovered(false)}\n          onPointerDown={() => setDown(true)}\n          onPointerUp={() => {\n            setDown(false)\n            // Toggle mode between dark and bright\n            setMode(!mode)\n            setBg({ background: !mode ? '#202020' : '#f0f0f0', fill: !mode ? '#f0f0f0' : '#202020' })\n          }}>\n            {/** geometry  */}\n           { nodes['N_S_BLK_1'].geometry !== undefined  ?  \n                  <bufferGeometry attach=\"geometry\" {...nodes['N_S_BLK_1'].geometry}/> :  \n                  <sphereBufferGeometry args={[1, 64, 64]} /> \n            }\n\n            {/** material  */}\n          <AnimatedMaterial color={color} envMapIntensity={env} clearcoat={coat} clearcoatRoughness={0} metalness={0.1} stencilMask ={1} />\n          {/* <a.material {...materials['FrontColor.004']}/> */}\n\n        </a.mesh>\n\n        <Environment preset=\"warehouse\" />\n        <ContactShadows\n          rotation={[Math.PI / 2, 0, 0]}\n          position={[0, -1.6, 0]}\n          opacity={mode ? 0.8 : 0.4}\n          width={15}\n          height={15}\n          blur={2.5}\n          far={1.6}\n        />\n      {/* </Suspense> */}\n    </>\n  )\n}\n\nuseGLTF.preload('/Skylark/N_S-BLOCK.glb')\n","import React, {Suspense } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { OrbitControls,  Html, Loader } from '@react-three/drei'\nimport { useSpring } from '@react-spring/core'\nimport { a } from '@react-spring/web'\nimport Overlay from './Overlay'\nimport Scene from './Scene'\n\nimport { GetSubassemblyQuery, GetSubassemblyQueryVariables } from '../../generated/graphql'; \nimport { useQuery  } from '@apollo/client'\nimport { loader } from 'graphql.macro';\nconst GetSubassembly_graphql = loader('src/queries/GetSubassembly.graphql');\n\n\ninterface ComponentInFocusProps {}\n\nconst ComponentInFocus = (props: ComponentInFocusProps) => {\n\n  const { data, loading, error }= useQuery<GetSubassemblyQuery, GetSubassemblyQueryVariables>( GetSubassembly_graphql, { variables: { subassemblyName: \"Module-A1_01\"} });\n\n  console.log(\"data\", data); \n\n\n    // This spring controls the background and the svg fill (text color)\n  const [{ background, fill }, set] = useSpring({ background: '#f0f0f0', fill: '#202020' }, [])\n  return (\n    <div className = 'component-in-focus-page'>\n    <a.main style={{ background }}>\n        <Canvas className=\"component-in-focus canvas\" pixelRatio={[1, 2]}>\n          <Suspense\n          fallback={\n            <Html center>\n              <Loader />\n            </Html>\n          }>    \n            <Scene setBg={set} />\n          </Suspense>\n            <OrbitControls enablePan={false} enableZoom={false} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />\n        </Canvas>\n        <Overlay fill={fill} />\n    </a.main>    \n    </div>\n   \n  )\n}\n\nexport default ComponentInFocus\n","// https://react.carbondesignsystem.com/?path=/docs/datatable-development--example\n\nimport React from 'react';\nimport { \n  DataTable, TableContainer, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, DataTableProps,\n  TableToolbar, TableBatchAction, TableBatchActions, TableToolbarContent, TableToolbarSearch, TableToolbarMenu, TableToolbarAction, TableSelectAll, TableSelectRow,\n  Button\n} from 'carbon-components-react';\nimport { Delete16 as Delete, Save16 as Save, Download16 as Download } from '@carbon/icons-react'; \n\n// see docs on styles: https://www.carbondesignsystem.com/components/data-table/style\n\n\n\nconst dataTableProps: Partial<DataTableProps> = {\n}\n\n//rows prop -> data to display in the rows of table\n//Each row in the rows prop should provide a unique id\n\n\n\n\nconst BatchActionsDataTable = ({rows, headers}: DataTableProps) => {\n  return(\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter\">\n    <div className=\"bx--row data-table__r1\">\n    <div className=\"bx--col-lg-16\">\n    <div className = 'bx--data-table'>\n\n      \n\n        <DataTable rows={rows} headers={headers}>\n      {({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getSelectionProps,\n        getBatchActionProps,\n        onInputChange,\n        selectedRows,\n      }: {\n        rows: any,\n        headers: any,\n        getHeaderProps: any,\n        getRowProps: any,\n        getSelectionProps: any,\n        getBatchActionProps: any,\n        onInputChange: any,\n        selectedRows: any,\n      }) => (\n        <TableContainer /*title=\"DataTable with batch actions\"*/>\n          <TableToolbar>\n            <TableBatchActions {...getBatchActionProps()}>\n              <TableBatchAction\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n                renderIcon={Delete}\n                onClick={() => console.log('clicked')}\n              >\n                Delete\n              </TableBatchAction>\n              <TableBatchAction\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n                renderIcon={Save}\n                onClick={() => console.log('clicked')}\n              >\n                Save\n              </TableBatchAction>\n              <TableBatchAction\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n                renderIcon={Download}\n                onClick={() => console.log('clicked')}\n              >\n                Download\n              </TableBatchAction>\n            </TableBatchActions>\n            <TableToolbarContent>\n              <TableToolbarSearch\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n                onChange={onInputChange}\n              />\n              <TableToolbarMenu\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n              >\n                <TableToolbarAction primaryFocus onClick={() => alert('Alert 1')}>\n                  Action 1\n                </TableToolbarAction>\n                <TableToolbarAction onClick={() => alert('Alert 2')}>\n                  Action 2\n                </TableToolbarAction>\n                <TableToolbarAction onClick={() => alert('Alert 3')}>\n                  Action 3\n                </TableToolbarAction>\n              </TableToolbarMenu>\n              <Button\n                tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n                onClick={() => console.log('clicked')}\n                size=\"small\"\n                kind=\"primary\"\n              >\n                Add new\n              </Button>\n            </TableToolbarContent>\n          </TableToolbar>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableSelectAll {...getSelectionProps()} />\n                {headers.map((header: any) => (\n                  <TableHeader {...getHeaderProps({ header })}>\n                    {header.header}\n                  </TableHeader>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row: any) => (\n                <TableRow {...getRowProps({ row })}>\n                  <TableSelectRow {...getSelectionProps({ row })} />\n                  {row.cells.map((cell: any) => (\n                    <TableCell key={cell.id}>{cell.value}</TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </DataTable>\n</div>\n</div>\n</div>\n</div>\n  )\n}\n  \nexport default BatchActionsDataTable; \n\n","import React from 'react'; \n\nimport { TreemapChart } from \"@carbon/charts-react\";\nimport { TreemapChartOptions } from '@carbon/charts/interfaces/index'\n\n\n\ntype TreeMapData = {\n    name: string;\n    children: ({\n        name: string;\n        value: number;\n        showLabel: boolean;\n    } | {\n        name: string;\n        value: number;\n    })[];\n}[]\n\nexport const example_treeMapData: TreeMapData = [\n    {\n      \"name\": \"Materials\",\n      \"children\": [\n        {\n          \"name\": \"Structural Panels\",\n          \"value\": 800,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Concrete Slab\",\n          \"value\": 200,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Fit-out materials\",\n          \"value\": 100,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Miscellaneous\",\n          \"value\": 900,\n          \"showLabel\": true\n\n        }\n      ]\n    },\n    {\n      \"name\": \"Labour\",\n      \"children\": [\n        {\n          \"name\": \"Foundation instillation\",\n          \"value\": 2800,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"CNC cutting\",\n          \"value\": 10000,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Other Services\",\n          \"value\": 500,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Other labour\",\n          \"value\": 500,\n          \"showLabel\": true\n\n        },\n        {\n          \"name\": \"Miscellaneous services\",\n          \"value\": 200,\n          \"showLabel\": true\n\n        }\n      ]\n    },\n    {\n      \"name\": \"Admin\",\n      \"children\": [\n        {\n          \"name\": \"Site Engineering\",\n          \"value\": 3500,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Planning application\",\n          \"value\": 3000,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Liscence fees\",\n          \"value\": 2000,\n          \"showLabel\": true\n        },\n        {\n          \"name\": \"Other admin\",\n          \"value\": 500,\n          \"showLabel\": true\n\n        },\n      ]\n    }\n  ]\n\nexport const example_treeMapOptions: TreemapChartOptions = {\n  // getFillColor: '',\n    \t/**\n\t * Optionally specify a title for the chart\n\t */\n\ttitle: 'Aggregated costings of material, labour & admin',\n\t/**\n\t * boolean to disable animations (enabled by default)\n\t */\n\tanimations: true,\n\t/**\n\t * boolean to prevent the container from resizing\n\t */\n\tresizable: true,\n\t/**\n\t * Optionally specify a width for the chart\n\t */\n\t// width?: string;\n\t/**\n\t * Optionally specify a height for the chart\n\t */\n\theight: '400px',\n\t/**\n\t * tooltip configuration\n\t */\n\t// tooltip?: TooltipOptions;\n\t/**\n\t * legend configuration\n\t */\n\t// legend?: LegendOptions;\n\t/**\n\t * Optional function to determine whether is filled based on datasetLabel, label, and/or data\n\t */\n\t// getIsFilled?: (\n\t// \tdatasetLabel: any,\n\t// \tlabel?: any,\n\t// \tdata?: any,\n\t// \tdefaultFilled?: boolean\n\t// ) => boolean;\n\t/**\n\t * Optional function to generate the fill color based on datasetLabel, label, and/or data\n\t */\n\t// getFillColor?: (\n\t// \tdatasetLabel: any,\n\t// \tlabel?: any,\n\t// \tdata?: any,\n\t// \tdefaultFillColor?: string\n\t// ) => string;\n\t/**\n\t * Optional function to generate the stroke color based on datasetLabel, label, and/or data\n\t */\n\t// getStrokeColor?: (\n\t// \tdatasetLabel: any,\n\t// \tlabel?: any,\n\t// \tdata?: any,\n\t// \tdefaultStrokeColor?: string\n\t// ) => string;\n\t/**\n\t * stylesheet options\n\t */\n\t// style: {\n\t// \t/**\n\t// \t * optional prefixing string for css classes (defaults to 'cc')\n\t// \t */\n\t// \tprefix: 'bx-'\n\t// },\n\t/**\n\t * options related to charting data\n\t */\n\t// data?: {\n\t// \t/**\n\t// \t * identifier for data groups\n\t// \t */\n\t// \tgroupMapsTo?: string;\n\t// \t/**\n\t// \t * used to simulate data loading in skeleton way\n\t// \t */\n\t// \tloading?: boolean;\n\t// \t/**\n\t// \t * options related to pre-selected data groups\n\t// \t * Remains empty if every legend item is active or dataset doesn't have the data groups.\n\t// \t */\n\t// \tselectedGroups?: string[];\n\t// };\n\t/**\n\t * options related to color scales\n\t */\n// \tcolor?: {\n// \t\t/**\n// \t\t * e.g. { \"Dataset 1\": \"blue\" }\n// \t\t */\n// \t\tscale?: object;\n// \t\t/**\n// \t\t * use a carbon dataviz preset color palette\n// \t\t * put the index (selection of which variant)\n// \t\t */\n// \t\tpairing?: {\n// \t\t\t/**\n// \t\t\t * the number of color variants in the palette (defaults to using the number of data groups in the given data)\n// \t\t\t */\n// \t\t\tnumberOfVariants?: number;\n// \t\t\t/**\n// \t\t\t * the option number of the color paring\n// \t\t\t */\n// \t\t\toption?: number;\n// \t\t};\n// \t\t/*\n// \t\t * options related to gradient\n// \t\t * e.g. { enabled: true }\n// \t\t */\n// \t\tgradient?: object;\n// \t};\n}\n\nexport interface GridOptions {\n\ty?: {\n\t\tenabled?: boolean;\n\t\tnumberOfTicks?: number;\n\t};\n\tx?: {\n\t\tenabled?: boolean;\n\t\tnumberOfTicks?: number;\n\t};\n}\ninterface TreeMapChartProps {\n    data: TreeMapData; \n    options: TreemapChartOptions; \n}\n\nconst _TreeMapChart = ({data, options}: { data: TreeMapData, options: TreemapChartOptions }): JSX.Element => {\n\n    return (\n        <>\n\t\t<TreemapChart\n\t\t\tdata={data}\n\t\t\toptions={options}\n        />\t\n        </>\n    )\n\n}\n\nexport default _TreeMapChart; \n","import _TreeMapChart, {example_treeMapData, example_treeMapOptions} from './TreeChart'; \nexport default _TreeMapChart;\nexport { example_treeMapData, example_treeMapOptions }; ","import React from 'react'; \n\nimport { RadarChart } from \"@carbon/charts-react\";\n//Types: https://carbon-design-system.github.io/carbon-charts/documentation/modules/_interfaces_charts_.html\nimport { RadarChartOptions } from '@carbon/charts/interfaces/index'\nimport { options as ImplOptions} from '@carbon/charts/configuration'; \n\n\n\nexport type RadarChartData = {\n    product: string;\n    feature: string;\n    score: number;\n}[];\n\nexport const example_radarChartData: RadarChartData = [\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Wind Exposure\",\n\t\t\"score\": 60\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Shading Efficiency\",\n\t\t\"score\": 92\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Cross Ventilation\",\n\t\t\"score\": 5\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"Ground Coupling\",\n\t\t\"score\": 85\n\t},\n\t{\n\t\t\"product\": \"Building System: Swift\",\n\t\t\"feature\": \"View Quality\",\n\t\t\"score\": 60\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Wind Exposure\",\n\t\t\"score\": 70\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Shading Efficiency\",\n\t\t\"score\": 63\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Cross Ventilation\",\n\t\t\"score\": 78\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"Ground Coupling\",\n\t\t\"score\": 50\n\t},\n\t{\n\t\t\"product\": \"Building System: Skylark\",\n\t\t\"feature\": \"View Quality\",\n\t\t\"score\": 30\n\t}\n];\n\n// import { RadarChart } from 'carbon-components-react'; \n\n/* ------ Carbon Data visualation Config  -------- */\nexport const example_radarChartOptions: RadarChartOptions = {\n\n\t\"title\": \"Performance within Enviroment\",\n\t\"radar\": {\n\t\t\"axes\": {\n\t\t\t\"angle\": \"feature\",\n\t\t\t\"value\": \"score\"\n\t\t}\n\t},\n\t\"data\": {\n\t\t\"groupMapsTo\": \"product\"\n\t},\n\t\"height\": \"400px\",\n    \"resizable\": true,\n\n};\n\n\ninterface RadarChartProps {\n    data: RadarChartData; \n    options: RadarChartOptions; \n}\n\nconst _RadarChart = ({data, options}: { data: RadarChartData, options: RadarChartOptions }): JSX.Element => {\n\n    return (\n        <>\n\t\t<RadarChart\n\t\t\tdata={data}\n\t\t\toptions={options}\n        />\t\n        </>\n    )\n\n}\nexport default _RadarChart; \n\n\n\n","import _RadarChart, {example_radarChartData, example_radarChartOptions} from './RadarChart'; \nexport { example_radarChartData, example_radarChartOptions }; \nexport default _RadarChart; ","import React, { useState, useReducer } from 'react';\nimport DataTable  from '../../components/body/DataTable/DataTable'; \nimport { DataTableSkeleton, DataTableSkeletonProps } from 'carbon-components-react'\nimport { Button } from 'carbon-components-react'\n// Using the elm model: state, view and update (can simulate this using reducers)\n\nimport { GetProjectQuery, GetProjectQueryVariables, GetAllSubassembliesQuery, GetAllSubassembliesQueryVariables,Projects, Property, Maybe, Building, Patterns, Subassemblies, EnergyPerformance, Designers } from '../../generated/graphql'; \nimport { useQuery  } from '@apollo/client'\nimport { loader } from 'graphql.macro';\n\nimport TreeChart, {example_treeMapData, example_treeMapOptions} from '../../components/body/Chart/Tree'; \nimport RadarChart, {example_radarChartData, example_radarChartOptions} from '../../components/body/Chart/Radar'; \nimport { GaugeChart, DonutChart, ComboChart } from \"@carbon/charts-react\";\nimport { GaugeChartOptions, GaugeTypes, Alignments, Statuses, DonutChartOptions, ComboChartOptions, ScaleTypes} from '@carbon/charts/interfaces'; \n\n/**\n *  gauge?: {\n        arcWidth?: number;\n        deltaArrow?: {\n            direction?: ArrowDirections;\n            size?: Function;\n            enabled: Boolean;\n        };\n        status?: Statuses;\n        deltaFontSize?: Function;\n        numberSpacing?: number;\n        numberFormatter?: Function;\n        valueFontSize?: Function;\n        type?: GaugeTypes;\n        alignment?: Alignments;\n    };\n */\n\nconst dataTableSkeletonProps = () => ({\n  headers:\n    [\n      { key: 'name' },\n      { key: 'protocol' },\n      { key: 'port' },\n      { key: 'rule' },\n      { key: 'attached-groups' },\n    ],\n  zebra: false,\n  compact: false,\n  showHeader: true,\n  showToolbar: true,\n});\n\nconst comboChartState: {data: any, options: ComboChartOptions} = {\n  data: [\n{\n  \"group\": \"Heating\",\n  \"key\": \"January\",\n  \"value\": 900\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"February\",\n  \"value\": 850\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"March\",\n  \"value\": 700\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"April\",\n  \"value\": 690\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"May\",\n  \"value\": 680\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"June\",\n  \"value\": 560\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"July\",\n  \"value\": 670\n},\n{\n  \"group\": \"Heating\",\n  \"key\": \"August\",\n  \"value\": 660\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"January\",\n  \"temp\": -20\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"February\",\n  \"temp\": -12\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"March\",\n  \"temp\": 3\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"April\",\n  \"temp\": 18\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"May\",\n  \"temp\": 24\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"June\",\n  \"temp\": 34\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"July\",\n  \"temp\": 37\n},\n{\n  \"group\": \"Temperature\",\n  \"key\": \"August\",\n  \"temp\": 30\n}\n],\n  options: {\n// \"experimental\": true,\n\"title\": \"Annual Heating costs\",\n// \"points\": {\n//   \"enabled\": false\n// },\n\"axes\": {\n  \"left\": {\n    \"title\": \"Heating Cost\",\n    \"mapsTo\": \"value\"\n  },\n  \"bottom\": {\n    \"scaleType\": ScaleTypes.LABELS,\n    \"mapsTo\": \"key\"\n  },\n  \"right\": {\n    \"title\": \"Temperature (°C)\",\n    \"mapsTo\": \"temp\",\n    // \"correspondingDatasets\": [\n    //   \"Temperature\"\n    // ]\n  }\n},\n\"comboChartTypes\": [\n  {\n    \"type\": \"area\",\n    \"options\": {},\n    \"correspondingDatasets\": [\n      \"Heating\"\n    ]\n  },\n  {\n    \"type\": \"line\",\n    \"options\": {\n      \"points\": {\n        \"enabled\": true\n      }\n    },\n    \"correspondingDatasets\": [\n      \"Temperature\"\n    ]\n  }\n],\n// \"curve\": \"curveNatural\",\n\"height\": \"400px\"\n}\n}\n\nconst gaugeChartState: {data: any, options: GaugeChartOptions} = {\n  data: [\n{\n  \"group\": \"value\",\n  \"value\": 42\n},\n{\n  \"group\": \"delta\",\n  \"value\": -13.37\n}\n],\n  options: {\n  \"title\": \"Comparison running costs\",\n  \"resizable\": true,\n  \"height\": \"380px\",\n  \"gauge\": {\n    \"status\": Statuses.DANGER,\n    \"type\": GaugeTypes.FULL\n  }\n  }\n};\n\nconst donutChartState: {data: any, options: DonutChartOptions} = {\n  data: [\n{\n  \"group\": \"Internal wall\",\n  \"value\": 2000\n},\n{\n  \"group\": \"Window\",\n  \"value\": 6500\n},\n{\n  \"group\": \"Floor\",\n  \"value\": 7500\n},\n{\n  \"group\": \"Roof\",\n  \"value\": 1200\n},\n{\n  \"group\": \"External Wall\",\n  \"value\": 1000\n},\n{\n  \"group\": \"Misc\",\n  \"value\": 2500\n}\n],\n  options: {\n\"title\": \"Breakdown of subassembly cost, £\",\n\"resizable\": true,\n\"donut\": {\n  \"center\": {\n    \"label\": \"Cost by subassembly type\"\n  }\n},\n\"height\": \"400px\"\n}\n};\n\n// // Lenses\n// import { Lens, lens, Optional } from 'monocle-ts/es6'\n// import { indexArray } from 'monocle-ts/lib/Index/Array'\n// import { pipe } from 'fp-ts/function'\n\n// type Projects_ = {\n//   __typename: \"projects\";\n//   id: string;\n//   projectId: string;\n//   projectOwner: any; //Owner_[];\n//   projectProperty: Property_[]\n// }\n// type Property_ = {\n//   __typename: 'property';\n//   id: string;\n//   propertyId: string;\n//   propertyUprn: string;\n//   propertyName: string;\n//   propertyAddress: string; \n//   propertyNorthing: number; \n//   propertyBoundary: object[];\n//   propertyDescription: string;\n//   propertyType: string; \n//   propertyBuilding2: string; \n//   propertyBuilding3: string; \n//   propertyBuilding1: Building_[]\n//   projects: Projects_[]\n// }\n\n// type Building_ = {\n//   __typename: \"building\";\n//   id: string;\n//   buildingId: string;\n//   buildingFoundationType: string;\n//   buildingNumberBathrooms: number;\n//   buildingName: string;\n//   buildingPattern: Patterns_[]\n//   buildingEnergyPerformance: any; //EnergyPerformance_[]\n//   property: Property[]\n// }\n// type Patterns_ = {\n//   __typename: 'patterns';\n//   id: string;\n//   patternId: number; \n//   patternBarcode: string; \n//   patternRating: number; \n//   patternJsonSchema: string; \n//   patternDesigner: Designers_[]\n//   building: Building_[],\n//   patternSubassembliesUsed?: Subassemblies_[]\n// }\n// type Designers_ = {\n//   __typename: 'designers';\n//   id: string;\n//   designerId: string; \n//   designerPhoto: object; \n//   designerName: string; \n//   patterns: Patterns_[]\n// };\n\n// export type Subassemblies_ = {\n//   __typename: 'subassemblies';\n//   id: string; \n//   subassemblyId: string;\n//   subassemblyName: string; \n//   subassemblyBuildingSystem: string; \n//   subassemblyLocationClass: string; \n//   subassemblyXDimension: number; \n//   subassemblyYDimension: number;\n//   subassemblyZDimension: number; \n//   subassemblyPitchedAngle1: number; \n//   subassemblyPitchedAngle2: number; \n//   subassemblySpansNStories: string; \n//   subassemblyThickness: number; \n//   subassemblyRoofPitchType: string; \n//   subassemblyAssemblyTimeInDays: number; \n//   subassemblyUnitCost: number; \n//   subassemblyPrimaryMaterial: string; \n//   subassemblyDesigner: string; \n//   patterns: Patterns_[]\n// }\n\n// const projectsArrayLens = indexArray<Projects_>().index(0)\n// // const propertyLens = L.prop<Projects>()('property'); // Lens<Parent, Child[]>\n// // const propertyLens = Optional.fromNullableProp<Projects>()('projectProperty')\n// const propertyLens = pipe(lens.id<Projects_>(), lens.prop('projectProperty'))\n// const propertyArrayLens = indexArray<Property_>().index(0);\n// const propertyBuilding1Lens = pipe( lens.id<Property_>(), lens.prop('propertyBuilding1') )\n// const propertyBuilding1ArrayLens = indexArray<Building_>().index(0);\n// const buildingPatternLens = pipe( lens.id<Building_>(), lens.prop('buildingPattern') )\n// const buildingPatternsArrayLens = indexArray<Patterns_>().index(0);\n// const buildingSubassembliesUsedLens = pipe( lens.id<Patterns_>(), lens.prop('patternSubassembliesUsed') )\n// const buildingSubassembliesUsedArrayLens = indexArray<Subassemblies_>().index(0)\n\n// const z = Lens.fromProp<Projects_>()('projectProperty').composeOptional(projectsArrayLens)\n\n\n\n\ntype Subassemblies_ = {\n  __typename: 'subassemblies';\n  id: string; \n  // subassemblyId: string;\n  subassemblyName: string; \n  subassemblyBuildingSystem: string; \n  subassemblyLocationClass: string; \n  subassemblyXDimension: number; \n  subassemblyYDimension: number;\n  subassemblyZDimension: number; \n  subassemblyPitchedAngle1: number; \n  subassemblyPitchedAngle2: number; \n  subassemblySpansNStories: string; \n  subassemblyThickness: number; \n  subassemblyRoofPitchType: string; \n  subassemblyAssemblyTimeInDays: number; \n  subassemblyUnitCost: number; \n  subassemblyPrimaryMaterial: string; \n  subassemblyDesigner: string[]; \n  patterns: object[], //Patterns_[]\n}\n\n  //headers specifies which table column headings should be displayed.\nconst headerData = [\n    {\n      key: '__typename',\n      header: '__typename',\n    },\n    {\n      key: 'subassemblyName',\n      header: 'subassemblyName',\n    },\n    {\n      key: 'subassemblyBuildingSystem',\n      header: 'subassemblyBuildingSystem',\n    },\n    {\n      key: 'subassemblyLocationClass',\n      header: 'subassemblyLocationClass',\n    },\n    {\n      key: 'subassemblyXDimension',\n      header: 'subassemblyXDimension',\n    },\n    {\n      key: 'subassemblyYDimension',\n      header: 'subassemblyYDimension',\n    },\n    {\n      key: 'subassemblyZDimension',\n      header: 'subassemblyZDimension',\n    },\n    {\n      key: 'subassemblyPitchedAngle1',\n      header: 'subassemblyPitchedAngle1',\n    }, \n    {\n      key: 'subassemblyPitchedAngle2',\n      header: 'subassemblyPitchedAngle2',\n    },\n    {\n      key: 'subassemblySpansNStories',\n      header: 'subassemblySpansNStories',\n    },\n    {\n      key: 'subassemblyThickness',\n      header: 'subassemblyThickness',\n    },\n    {\n      key: 'subassemblyRoofPitchType',\n      header: 'subassemblyRoofPitchType',\n    },\n    {\n      key: 'subassemblyAssemblyTimeInDays',\n      header: 'subassemblyAssemblyTimeInDays',\n    },\n\n    {\n      key: 'subassemblyUnitCost',\n      header: 'subassemblyUnitCost',\n    },\n    {\n      key: 'subassemblyPrimaryMaterial',\n      header: 'subassemblyPrimaryMaterial',\n    },\n    {\n      key: 'subassemblyDesigner',\n      header: 'subassemblyDesigner',\n    },\n    {\n      key: 'patterns',\n      header: 'patterns',\n    },\n  \n    \n  ];\n  \n\ninterface AnalyticsPageState {\n  rowData: Subassemblies_[] //{id: string; [h: string]: string}[],\n  headerData:  { key: string; header: string; }[]\n} \n\n\nconst initalState: AnalyticsPageState = {\n  rowData: [{\n      subassemblyAssemblyTimeInDays: 2,\n      subassemblyBuildingSystem: \"WikiHouseSwift\",\n      subassemblyDesigner: [\"Clayton\", \"Alastair Parvin\"],\n      id: \"23\",\n      subassemblyLocationClass: \"EnvelopeSection\",\n      subassemblyName: \"Module-B2_05\",\n      subassemblyPitchedAngle1: 60,\n      subassemblyPitchedAngle2: 30,\n      subassemblyPrimaryMaterial: \"Timber.Plywood\",\n      subassemblyRoofPitchType: \"Mono\",\n      subassemblySpansNStories: \"2\",\n      subassemblyThickness: 0.336,\n      subassemblyUnitCost: 925,\n      subassemblyXDimension: 3.3,\n      subassemblyYDimension: 1.2,\n      subassemblyZDimension: 8.5,\n      __typename: \"subassemblies\"\n    }] as Array<Subassemblies_>,\n  headerData: headerData\n} \n  \n\ntype Action =\n  | { _tag: \"onSubassemblyQuery\";        payload: {subassemblies: Subassemblies_[] }   }\n\n\n\nconst AnalyticsPageReducer = (state: AnalyticsPageState, action: Action) => {\n  switch (action._tag) {\n    case \"onSubassemblyQuery\":\n      \n      return {...state, rowData: action.payload.subassemblies};\n    default:\n      throw new Error();\n  }\n}\n\ninterface AnalyticsPageViewProps {\n\n}\n\nconst AnalyticsPage = (props: AnalyticsPageViewProps): JSX.Element => {\n\n\n\n  \n  const [state, localDispatch] = useReducer(AnalyticsPageReducer, initalState);\n\n\n  const GetAllSubassemblies_graphql = loader('src/queries/GetAllSubassemblies.graphql');\n  const { data, loading, error }= useQuery<GetAllSubassembliesQuery, GetAllSubassembliesQueryVariables>( GetAllSubassemblies_graphql);\n  console.log(data); \n  \n\n  return (\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter analytics-page\">\n\n  \n\n    <div className=\"bx--row bx--grid\">\n    <h1> Costings </h1> \n    </div>\n\n    <div className=\"bx--row bx--grid\">\n        {/* <RadarChart data={example_radarChartData} options={example_radarChartOptions}/> */}\n        <TreeChart data={example_treeMapData} options={example_treeMapOptions}/>\n    </div>\n\n    <div className=\"bx--row bx--grid\">\n      <h1> Building Performance Metrics  </h1> \n    </div>\n\n    <div className=\"bx--row bx--grid\">\n        <div className = \"bx--col\">\n        <RadarChart data={example_radarChartData} options={example_radarChartOptions}/>\n        </div>\n        <div className = \"bx--col\">\n        <GaugeChart\n          data={gaugeChartState.data}\n          options={gaugeChartState.options}\n        />\n        </div>\n        <div className = \"bx--col\">\n        <DonutChart\n          data={donutChartState.data}\n          options={donutChartState.options}\n        />\n        </div>\n    </div>\n\n    <div className=\"bx--row bx--grid\">\n\n    <ComboChart\n\t\t\tdata={comboChartState.data}\n\t\t\toptions={comboChartState.options}\n\t\t/>\n\t\t\n    </div>\n\n\n    <div className=\"bx--row bx--grid\">\n      <h1> Integration with Airtable  </h1> \n    </div>\n\n    <div className=\"bx--row bx--grid\">\n\n      <Button\n          onClick = {(e)    => { \n            return localDispatch({_tag: \"onSubassemblyQuery\", payload: {subassemblies: data?.subassemblies as Subassemblies_[]} }) \n          }}\n      >\n        Get Airtable data \n      </Button>\n    </div>\n    <div className=\"bx--row bx--grid\">\n        {state.rowData.length === 1 ?\n          <div style={{ width: '100%' }}> \n          <DataTableSkeleton {...dataTableSkeletonProps}/>\n          </div> :\n          <DataTable rows={state.rowData} headers={state.headerData}/>}\n    </div>\n\n    \n\n    </div>      \n  )\n}\nexport default AnalyticsPage; \n\n","\nimport React, { useRef, VFC, Suspense } from 'react';\nimport { useThree, extend, ReactThreeFiber, useFrame, Canvas } from 'react-three-fiber';\nimport {OrbitControls, Html, Loader, useContextBridge, Environment, ContactShadows } from '@react-three/drei';\nimport { Light } from './Light'; \nimport { Perf } from 'r3f-perf';\nimport * as THREE from 'three'; \nimport { Vector3 } from 'three';\nimport { useSpring, config, SpringValue } from '@react-spring/core'\nimport { a } from '@react-spring/three'\nimport { a as aDom } from '@react-spring/web'\nimport { EffectComposer, SSAO, SMAA } from 'react-postprocessing'\n\n\nimport {useYScroll} from './Gestured/Scroll';\nimport { ReactEventHandlers } from 'react-use-gesture/dist/types'\n\n\n// Redux Context\nimport { ReactReduxContext } from 'react-redux';\n\n// SceneGraph Object\n\nimport Dodecahedron from './Gestured/Draggable'; \n\nimport SkylarkBuilding from './Skylark_gltf_skylark'\n\n/**\n * \n *  The showroom is to showcase the different building systems, and then the house texmplates within each building\n *  system. \n * \n *  It involves first a vertical scroll, then a horizontal scroll. Once a template has been picked, we move on\n *  to the editor component. \n * \n *  A similar page will be made when selecting individual components within a house type.  \n * \n * \n * \n */\n\n\n/////\n// Camera\n/////\n\nconst Dolly = (targetObject: THREE.Object3D): void => {\n  // This one makes the camera move in and out\n  useFrame(({ clock, camera }) => {\n    // Move camera to a point where you can more easily see the object under inspection\n    // camera.position.z = 50 + Math.sin(clock.getElapsedTime()) * 30\n    // Look at the object under isnpection\n    const {x,y,z} = targetObject.position; \n    camera.lookAt(new Vector3(x,y,z)) \n\n    // This process should be animated\n    // just use .lerp ( x : Float, y : Float, t : Float ) : Float ? \n\n    // camera.updateProjectionMatrix()\n\n  })\n}\n\n\n//////////////////////////////////\n// Scene\n//////////////////////////////////\n\n\ninterface ShowRoomSceneProps {\n  y: SpringValue<number>\n  bindFn: (...args: any[]) => ReactEventHandlers\n}\n\nconst ShowroomScene = ({y, bindFn}: ShowRoomSceneProps) => {\n  const orbitControlsRef = useRef<OrbitControls>();\n \n\n\n  const {\n    camera,\n    gl: { domElement },\n    scene,            // Default scene\n    size,             // Bounds of the view (which stretches 100% and auto-adjusts)\n    viewport,         // Bounds of the viewport in 3d units + factor (size/viewport)\n    aspect,           // Aspect ratio (size.width / size.height)\n    invalidate,       // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    setDefaultCamera  // Sets the default camera\n  } = useThree()\n  \n\n  return (\n    <>\n    {/**Sets up a global cubemap, which affects scene.environment, and optionally scene.background. A selection of presets from \n     * HDRI Haven are available for convenience. */}\n     {/* <Environment preset=\"warehouse\" /> */}\n      \n      {/* <ContactShadows\n          rotation={[Math.PI / 2, 0, 0]}\n          position={[0, -1.6, 0]}\n          width={15}\n          height={15}\n          blur={2.5}\n          far={1.6}\n        /> */}\n\n        \n      <Light/>\n\n      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\n          <planeGeometry args={[0.1, 1000]} />\n          <meshBasicMaterial color=\"lightcoral\" fog={false} transparent opacity={0.4} />\n      </mesh>\n\n\n      <Html>  <span className=\"header\"> H4.OE – Skylark </span> </Html>\n\n      <Suspense\n        fallback={\n          <Html center>\n            <Loader />\n          </Html>\n        }>\n          {/** PUT MODELS HERE  */}\n          {/** Create a coordinate system for grid. Place the containers/voxels into grid with given rotations  */}\n          <a.group position-z={y.to((y) => (y / 500) * 25)}>\n           \n            {/* <a.mesh castShadow>\n              <dodecahedronBufferGeometry attach=\"geometry\" args={[1.4, 0]} />\n              <meshNormalMaterial attach=\"material\" />\n            </a.mesh> */}\n            <SkylarkBuilding \n              scale={new THREE.Vector3(0.5,0.5,0.5)}\n              position={new THREE.Vector3(0, 0,  10)}\n            />\n\n            <SkylarkBuilding \n              scale={new THREE.Vector3(0.5,0.5,0.5)}\n              position={new THREE.Vector3(0, 0,  0)}\n            />\n            <SkylarkBuilding \n              scale={new THREE.Vector3(0.5,0.5,0.5)}\n              position={new THREE.Vector3(0, 0, -20)}\n\n            />\n\n            <SkylarkBuilding \n              scale={new THREE.Vector3(0.5,0.5,0.5)}\n              position={new THREE.Vector3(0, 0, -40)}\n\n            />\n\n            <SkylarkBuilding \n              scale={new THREE.Vector3(0.5,0.5,0.5)}\n              position={new THREE.Vector3(0, 0, -60)}\n\n            />\n\n          </a.group>\n\n\n          {/*******************/}\n          <EffectComposer multisampling={0}>\n            <SSAO\n              intensity={40}\n              luminanceInfluence={0.2}\n              radius={8}\n              scale={0.5}\n              bias={0.5}\n              distanceThreshold={0.5}\n              distanceFalloff={0.03}\n              rangeFalloff={0.001}\n            />\n            <SMAA />\n          </EffectComposer>\n\n      </Suspense>\n\n      {/* <OrbitControls \n        //Get ref from the store?\n        ref={orbitControlsRef} \n        enablePan={true} \n        enableRotate={true} \n        zoomSpeed={0.5}\n        args={[camera, domElement]} \n        target={[0, 3, 0]}\n        // enableDamping\n        // dampingFactor={0.2}\n        rotateSpeed={0.7}\n        maxPolarAngle={1.49}\n        enabled\n        minDistance={5}\n        maxDistance={100}\n      />    */}\n      {/* <Controls/> */}\n      {/* <Dolly /> */}\n\n      {/* <Perf /> */}\n\n    </>\n  );\n};\n\n\n//////////////////////////////////\n// Editor\n//////////////////////////////////\n\n\nconst Showroom: VFC = () => {\n\n \n  // contect bridge needed as workaround due to: https://github.com/pmndrs/react-three-fiber/issues/43\n  const ContextBridge = useContextBridge(ReactReduxContext)\n\n  const [y, bind] = useYScroll({bottom: -100, top: 2400}, { domTarget: window })\n \n\n\n\n  return (\n  <>\n    {/* <ClippingSlider /> */}\n\n    <Canvas\n      concurrent \n      invalidateFrameloop \n      colorManagement\n      shadowMap={{ enabled: true, type: THREE.PCFSoftShadowMap }}\n      pixelRatio={window.devicePixelRatio}\n      gl={{ antialias: true, alpha: false }}\n      camera={{ position: [0, 5, 10], fov: 65, near: 2, far: 60 }}\n    >\n        <ContextBridge>\n\n\n        <ShowroomScene \n          y={y} \n          bindFn={bind}\n        />\n\n       \n        </ContextBridge>\n\n    </Canvas>\n\n\n    {/** --- Bar at the side for scroll position  */}\n    <aDom.div className=\"bar\" style={{ height: y.to([-100, 2400], ['0%', '100%']) }} />\n\n   \n\n\n    {/* <a href=\"https://www.opensystemslab.io/\" className=\"top-left\">\n      Open Systems Lab\n    </a>\n    <a href=\"https://www.notion.so/Housing-4-0-Energy-e83e0e7f455a4a419463619a29c4cf51\" className=\"bottom-right\">\n      More Information\n    </a> */}\n\n  </>\n\n  );\n};\n\nexport default Showroom;\n","import * as THREE from 'three'\nimport React, { Suspense, useState, useRef } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { useSpring, useSprings, config as defaultConfig, SpringValue } from '@react-spring/core'\nimport { a } from '@react-spring/three'\nimport { a as aDom } from '@react-spring/web'\nimport { EffectComposer, SSAO, SMAA } from 'react-postprocessing'\n\n// -- scroller\nimport { useCallback, useEffect } from 'react'\nimport { useGesture } from 'react-use-gesture'\nimport { Bounds, UseGestureConfig, ReactEventHandlers} from 'react-use-gesture/dist/types'\n\nimport clamp from 'lodash/clamp'\n\n// type useScrollFn = (SpringValue<number> | ((...args: any[]) => ReactEventHandlers))[]\n\nexport const useYScroll = (\n    bounds: Required<Pick<Bounds, 'top' | 'bottom'>>, \n    config: UseGestureConfig \n):  [SpringValue<number>, (...args: any[]) => ReactEventHandlers] => {\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: defaultConfig.slow }))\n  \n  type GestureFn = ({ xy: [, cy], previous: [, py], memo }: any) => number\n  const fn: GestureFn = useCallback(\n    ({ xy: [, cy], previous: [, py], memo = y.get() }) => {\n      const newY = clamp(memo + cy - py, bounds.bottom, bounds.top)\n      set({ y: newY })\n      return newY\n    },\n    [bounds, y, set]\n  )\n  \n  const bind = useGesture({ onWheel: fn, onDrag: fn }, config)\n  \n  return [y, bind]\n}\n\n\n\n\n\n// type SliderProps = {\n//   items: any[]\n//   width: number\n//   visible: number\n//   style?: React.CSSProperties\n//   children: (props: any, i: number) => JSX.Element\n// }\n// type Styles = {\n//   container: React.CSSProperties\n//   item: React.CSSProperties\n// }\n\n// const styles: Styles = {\n//   container: { position: 'relative', height: '100%', width: '100%' },\n//   item: { position: 'absolute', height: '100%', willChange: 'transform' },\n// }\n\n\n// export const Slider = ({ items, width = 600, visible = 4, style, children }: SliderProps) => {\n\n//   const idx = useCallback((x, l = items.length) => (x < 0 ? x + l : x) % l, [items])\n//   const getPos = useCallback((i, firstVis, firstVisIdx) => idx(i - firstVis + firstVisIdx), [idx])\n//   const [springs, set] = useSprings(items.length, i => ({ x: (i < items.length - 1 ? i : -1) * width }))\n//   const prev = useRef([0, 1])\n\n//   const runSprings = useCallback(\n//     (y, vy) => {\n//       const firstVis = idx(Math.floor(y / width) % items.length)\n//       const firstVisIdx = vy < 0 ? items.length - visible - 1 : 1\n//       set(i => {\n//         const position = getPos(i, firstVis, firstVisIdx)\n//         const prevPosition = getPos(i, prev.current[0], prev.current[1])\n//         const rank = firstVis - (y < 0 ? items.length : 0) + position - firstVisIdx\n//         const configPos = vy > 0 ? position : items.length - position\n//         return {\n//           x: (-y % (width * items.length)) + width * rank,\n//           immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n//           config: { tension: (1 + items.length - configPos) * 100, friction: 30 + configPos * 40 },\n//         }\n//       })\n//       prev.current = [firstVis, firstVisIdx]\n//     },\n//     [idx, getPos, width, visible, set, items.length]\n//   )\n\n//   const wheelOffset = useRef(0)\n//   const dragOffset = useRef(0)\n//   const bind = useGesture({\n//     onDrag: ({ offset: [x], vxvy: [vx] }) =>\n//       vx && ((dragOffset.current = -x), runSprings(wheelOffset.current + -x, -vx)),\n//     onWheel: ({ offset: [, y], vxvy: [, vy] }) =>\n//       vy && ((wheelOffset.current = y), runSprings(dragOffset.current + y, vy)),\n//   })\n\n//   return (\n//     <div {...bind()} style={{ ...style, ...styles.container }} >\n//       {springs.map(({ x }, i) => (\n//         // @ts-ignore\n//         <a.div key={i} style={{ ...styles.item, width, x }} children={children(items[i], i)} />\n//       ))}\n//     </div>\n//   )\n// }","\nimport React, { useReducer, Dispatch , Suspense, useState} from 'react'; \nimport * as THREE from 'three'\nimport { Canvas } from 'react-three-fiber'\nimport { useSpring, config } from '@react-spring/core'\nimport { a } from '@react-spring/three'\nimport { a as aDom } from '@react-spring/web'\n// import { EffectComposer, SSAO, SMAA } from 'react-postprocessing'\n// import Text from './helpers/Text'\n// import useModel from './helpers/useModel'\n// import useYScroll from './helpers/useYScroll'\n\nimport Showroom from '../../components/3d-editor/Showroom';\n\n\ninterface ChooseBuildingSystemState {\n    component: any; \n}\n\ntype Action =\n  | { _tag: \"onClick\";        payload: { mouseEvent: MouseEvent  }     }\n  | { _tag: \"onPointerOver\";  payload: { mouseEvent: MouseEvent  }     }\n  | { _tag: \"onPointerOut\";   payload: { mouseEvent: MouseEvent  }     }\n  | { _tag: \"onContextMenu\",  payload: { mouseEvent: MouseEvent  }     }\n  | { _tag: \"onDoubleClick\",  payload: { mouseEvent: MouseEvent  }     }\n\n\nconst ChooseBuildingSystemReducer = (state: ChooseBuildingSystemState, action: Action) => {\n  switch (action._tag) {\n    case \"onClick\":\n      return {...state };\n    case \"onPointerOver\":\n        return {...state };\n    case \"onPointerOut\":\n      return {...state };\n    case \"onContextMenu\":\n        return {...state };\n    case \"onDoubleClick\":\n        return {...state };\n    default:\n      throw new Error();\n  }\n}\n\n\nconst ShowroomPage = (): JSX.Element => {\n\n    const initialChooseBuildingSystemState: ChooseBuildingSystemState = {component: 'thisone'}; \n\n    const [state, localDispatch]: [\n        state: ChooseBuildingSystemState, \n        localDispatch: Dispatch<Action>\n    ] = useReducer(ChooseBuildingSystemReducer, initialChooseBuildingSystemState); \n\n    return (\n        <div className ='choose-component-page'>\n        \n            <span className=\"header\"> H4.OE</span>\n            <a href=\"https://github.com/hector-crean/io-ts-validation\" className=\"top-left\" children=\"Github\" />\n            {/* <a href=\"https://www.notion.so/Housing-4-0-Energy-e83e0e7f455a4a419463619a29c4cf51\" className=\"tpp-right\" children=\"Notion Page\" /> */}\n            <a href=\"https://www.opensystemslab.io/\" className=\"bottom-left\" children=\"+ Open Systems Lab \" />\n            {/* <a href=\"\" className=\"bottom-right\" children=\"\" /> */}\n\n            <Showroom/>\n\n\n            <div className=\"action-btn\" onClick={()=> {}} />\n\n            \n\n        </div>\n\n\n    )\n}\n\nexport default ShowroomPage; ","\nimport './app.scss';\nimport React, {useState} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Header\nimport CarbonHeader from './components/header/carbon-header/CarbonHeader'; \nimport MaterialHeader from './components/header/material-header/MaterialHeader';  \n// Pages\nimport Builder3DPage from './page/builder3D-page/Builder3DPage'; \nimport ComponentInFocusPage from './page/component-in-focus-page/ComponentInFocus'; \nimport AnalyticsPage from './page/analytics-page/AnalyticsPage'; \nimport ShowroomPage from './page/showroom-page/ShowroomPage'; \n\n//Global state: setup scene graph -> \n\n\n\ninterface AppProps {\n}\n\n\nconst App = ({}: AppProps) => {\n\n\n\n  \n\n return (\n\n<Router>\n\n  {/* <MaterialHeader/> */}\n\n\n  <Switch>\n     {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            \n      <Route path=\"/infocus\" component={ComponentInFocusPage} /> \n\n      <Route path='/analytics' component={AnalyticsPage} />\n\n      <Route path='/choose-building-system' component={ShowroomPage}/>\n\n\n      <Route path=\"/\" component={Builder3DPage} /> \n\n  </Switch>        \n  \n\n</Router>\n\n )\n}\nexport default App;","import * as t from 'io-ts'; \n\n\nexport const Point3 = t.tuple([t.number, t.number, t.number]); \n// const Cells = new Map<Point3, Cell_State>(); \n\n// Best to define this with io-ts, so that we may use io-ts; \n\nexport const Building =  t.interface({\n    _tag: t.literal('Building'),\n    floors: t.number\n})\nexport const Storey = t.interface({\n    _tag: t.literal('Storey')\n})\nexport const EnvelopeSection = t.interface({\n    _tag: t.literal('EnvelopeSection')\n})\nexport const Room = t.interface({\n    _tag: t.literal('Room')\n})\nexport const WallUnit = t.interface({\n    _tag: t.literal('WallUnit'),\n    wall_unit_state: t.union([\n        t.interface({_tag: t.literal('SolidWallUnit'), component: t.string}), \n        t.interface({_tag: t.literal('VoidFloorUnut'), component: t.string}), \n    ])\n})\nexport const FloorUnit = t.interface({\n    _tag: t.literal('FloorUnit'),\n    floor_unit__state: t.union([\n        t.interface({_tag: t.literal('SolidFloorUnit'), component: t.string}), \n        t.interface({_tag: t.literal('Window'), component: t.string}), \n        t.interface({_tag: t.literal('Door'), component: t.string}), \n    ])\n})\nexport const RoofUnit = t.interface({\n    _tag: t.literal('RoofUnit'),\n    roof_unit_state: t.union([\n        t.interface({_tag: t.literal('SolidRoofUnit'), component: t.string}), \n        t.interface({_tag: t.literal('RoofLight'), component: t.string}), \n    ])\n})\nexport const Void = t.interface({\n    _tag: t.literal('Void')\n})\n\nexport const Inactive =  t.interface({\n    _tag: t.literal('Inactive'), \n    coordinates: Point3 \n})\nexport const ActiveState = t.union([\n    Building,\n    Storey,\n    EnvelopeSection, \n    Room,\n    WallUnit, \n    FloorUnit, \n    RoofUnit,\n    Void\n ])\n export const Active = t.interface({\n    _tag: t.literal('Active'), \n    coordinates: Point3,\n    active_state: ActiveState\n})\n\nexport const SkylarkCellState = t.union([Active, Inactive])\n\n\n\n// static types\n\nexport type SkylarkCellState = t.TypeOf<typeof SkylarkCellState>\nexport type Active = t.TypeOf<typeof Active>\nexport type Inactive = t.TypeOf<typeof Inactive>\n\nexport type ActiveState = t.TypeOf<typeof ActiveState>\nexport type Building = t.TypeOf<typeof Building>\n\n\n\n//initial states\nexport const skylarkInitialStateInactive: SkylarkCellState = { _tag: 'Inactive', coordinates: [1,2,3] }; \nexport const skylarkInitialStateActive: SkylarkCellState = { _tag: 'Active', coordinates: [1,2,3], active_state: { _tag: \"Building\", floors: 1 }}; \n\n\n\n\n","import * as t from 'io-ts'\nimport { Lens } from 'monocle-ts'\n\n\nexport interface ExactHasLenses extends t.ExactType<HasLenses> {}\n\n\nexport type HasLenses = t.InterfaceType<any> | ExactHasLenses\n\nfunction getProps(codec: HasLenses): t.Props {\n  switch (codec._tag) {\n    case 'InterfaceType':\n      return codec.props\n    case 'ExactType':\n      return getProps(codec.type)\n  }\n}\n\nconst fromProp = Lens.fromProp<any>()\n\n/**\n * Return a `Lens` for each prop\n *\n * @example\n * import * as t from 'io-ts'\n * import { getLenses } from 'io-ts-types/lib/getLenses'\n *\n * const Person = t.type({\n *   name: t.string,\n *   age: t.number\n * })\n *\n * const lenses = getLenses(Person)\n * assert.strictEqual(lenses.age.get({ name: 'Giulio', age: 44 }), 44)\n *\n */\nexport function getLenses<C extends HasLenses>(\n  codec: C\n): { [K in keyof t.TypeOf<C>]: Lens<t.TypeOf<C>, t.TypeOf<C>[K]> } {\n  const r: any = {}\n  for (const k in getProps(codec)) {\n    r[k] = fromProp(k)\n  }\n  return r\n}\n\n// const getPrisms = <U>() =>\n//   <K extends keyof U, V extends U[K]>(key: K, value: V) => {\n//     new Prism<U, Extract<U, {[_ in K]: V}>>(\n//       union => (union[key] === value ? some(union) : none as any),\n//       s => s\n//     )\n\n\n\n\n","import { Prism } from 'monocle-ts'\nimport { some, none } from 'fp-ts/Option'\n\n\nexport const getPrism = <U>() =>\n    <K extends keyof U, V extends U[K]>(key: K, value: V) =>\n      new Prism<U, Extract<U, {[_ in K]: V}>>(\n        union => (union[key] === value ? some(union) : none as any),\n        s => s\n      )\n  \n","import { Property, Owner, Project, Building, Subassembly, EnergyPerformance, Pattern, TasteProfile, Designer} from './static-types'\nimport * as t from 'io-ts'; \nimport { pipe } from 'fp-ts/pipeable'; \nimport * as E from 'fp-ts/Either'; \n\n\nimport { SkylarkCellState } from '../../../lib/grid/Data/CellState'; \nimport { } from '../../../lib/grid/Fn/actionFn'; \n/**\n * Entities\n */\n\nexport interface NormalizedObject<T> {\n    byId: Record<string, T>;\n    allIds: string[];\n  }\n  \n/**\n * State\n */\n/**\n The recommended approach to managing relational or nested data in a Redux store is to treat a \n portion of your store as if it were a database, and keep that data in a normalized form. \n */\n\n\nexport type DashboardState = {\n  entities: {\n    projects: NormalizedObject<Project>,\n    owners: NormalizedObject<Owner>,\n    properties: NormalizedObject<Property>,\n    buildings: NormalizedObject<Building>,\n    subassemblies: NormalizedObject<Subassembly>,\n    energyPerformances: NormalizedObject<EnergyPerformance>,\n    patterns: NormalizedObject<Pattern>,\n    tasteProfiles: NormalizedObject<TasteProfile>,\n    designers: NormalizedObject<Designer>,\n\n  }\n}\n\n\n//https://dev.to/gillchristian/enough-fp-ts-to-work-with-io-ts-20ip\nexport const decodeWith \n= <A>(decoder: t.Decoder<unknown, A>) => ( response: unknown ) =>\n  pipe(\n    response,\n    decoder.decode,\n    // humanizeErrors,\n    E.mapLeft((errors) => ({tag: 'decoding', errors} as const)),\n  )\n\n\n/**\n * Actions \n */\n\n\n// ->> CRUD operations on a normalized state structure\n \nexport enum ModelStateActions {\n    UPSERT_SUBASSEMBLIES = 'UPSERT_SUBASSEMBLIES',\n    UPSERT_OWNERS = \"UPSERT_OWNERS\",\n    UPSERT_PROPERTIES = \"UPSERT_PROPERTIES\",\n    UPSERT_BUILDINGS = \"UPSERT_BUILDINGS\",\n    UPSERT_ENERGY_PERFORMANCE = 'UPSERT_ENERGY_PERFORMANCE',\n    UPSERT_PATTERN = \"UPSERT_PATTERN\",\n    UPSERT_TASTE_PROFILE = \"UPSERT_TASTE_PROFILE\",\n    UPSERT_DESIGNER = \"UPSERT_DESIGNER\",\n    UPSERT_PROJECTS = \"UPSERT_PROJECTS\"\n}\n\ninterface UpsertSubassembliesAction {\n  type: typeof ModelStateActions.UPSERT_SUBASSEMBLIES\n  payload: {subassembly: Subassembly}\n}\ninterface UpsertOwnersAction {\n  type: typeof ModelStateActions.UPSERT_OWNERS\n  payload: {owners: Owner}\n}\ninterface UpsertPropertiesAction {\n  type: typeof ModelStateActions.UPSERT_PROPERTIES\n  payload: {properties: Property}\n}\ninterface UpsertEnergyPerformancesAction {\n  type: typeof ModelStateActions.UPSERT_ENERGY_PERFORMANCE\n  payload: {energyPerformances: EnergyPerformance}\n}\ninterface UpsertBuildingsAction {\n  type: typeof ModelStateActions.UPSERT_BUILDINGS\n  payload: {buildings: Building}\n}\ninterface UpsertPatternsAction {\n  type: typeof ModelStateActions.UPSERT_PATTERN\n  payload: {patterns: Pattern}\n}\ninterface UpsertTasteProfilesAction {\n  type: typeof ModelStateActions.UPSERT_TASTE_PROFILE\n  payload: {tasteProfiles: TasteProfile}\n}\ninterface UpsertDesignersAction {\n  type: typeof ModelStateActions.UPSERT_DESIGNER\n  payload: {designers: Designer}\n}\ninterface UpsertProjectsAction {\n  type: typeof ModelStateActions.UPSERT_PROJECTS\n  payload: {projects: Project}\n}\n\n\nexport type ModelStateActionTypes = \n| UpsertSubassembliesAction\n| UpsertOwnersAction\n| UpsertPropertiesAction\n| UpsertEnergyPerformancesAction\n| UpsertBuildingsAction\n| UpsertPatternsAction\n| UpsertTasteProfilesAction\n| UpsertDesignersAction\n| UpsertProjectsAction\n\n\n\n\n\n/* Decoding functions */\n\n// type validatorFn = <T, A>(decoder: t.Decoder<T, A>) => (queryResult: QueryResult ) => any; \n\n// export const validator: validatorFn \n// = (decoder) => (queryResult) => {\n//   return pipe(\n//     queryResult.data,\n//     decoder.decode,\n//     // E.map((value) => ({value})),\n//     E.fold(\n//         // failure handler\n//         (errors) => {console.log(`Error: object is ${errors}`)},\n//         // success handler\n//         (value) => {return value},\n//     ),\n//   );\n// };","\nimport { Int } from '../Data/Int';\nimport { \n    Point3, \n    Building,\n    Storey,\n    EnvelopeSection, \n    Room,\n    WallUnit, \n    FloorUnit, \n    RoofUnit,\n    Void,\n    Active, \n    Inactive,\n    SkylarkCellState,\n    ActiveState\n} from '../Data/CellState'\nimport { getLenses } from './getLenses';\nimport { getPrism } from './getPrism'\nimport { Coordinate } from '../Data/Coordinate'; \n// --- Int represents the natural unit of the grid (i.e the unit length in one direcrion.). This obiously only works for symstems that\n// --- have the cosistent sizings...\n\n// https://www.freecodecamp.org/news/typescript-curry-ramda-types-f747e99744ab/\n\nimport { skylarkInitialStateActive , skylarkInitialStateInactive} from '../Data/CellState'; \n\n\n// const GridCoordinateBasisRepresentation = {x: new Map<Number, Int>(), y: new Map<Number, Int>(), z: new Map<Number, Int>()}\n\n\n\n// --- | Global cell states\n\n\n\n// ---|  Prisms \n\nconst skylarkCellStatePrisms = getPrism<SkylarkCellState>()\n\nconst activeLenses = getLenses(Active)\nconst inactiveLenses = getLenses(Inactive)\n\nconst activeStatePrisms = getPrism<ActiveState>()\n\nconst buildingLenses = getLenses(Building)\nconst storeyLenses = getLenses(Storey)\nconst envelopeSectionsLenses = getLenses(EnvelopeSection)\nconst roomLenses = getLenses(Room)\nconst wallUnitLenses = getLenses(WallUnit)\nconst floorUnitLenses = getLenses(FloorUnit)\nconst roofUnitLenses = getLenses(RoofUnit)\nconst voidLenses = getLenses(Void)\n// const activeStateLens = getLenses(ActiveState)\n\n\n\n// ---| Actions \n\ntype ActionType_modify = \n| {_tag: 'addFloors', payload: {additionalFloors: number}}\n| {_tag: 'removeFloors', payload: {removedFloors: number}}\n\nconst addFloorsAction = (n: number): ActionType_modify => {return {_tag: 'addFloors', payload: {additionalFloors: n}} }\nconst removeFloorsAction = (n: number): ActionType_modify => {return {_tag: 'removeFloors', payload: {removedFloors: n}} }\n\n\n// --- | some of the states are non-orthogonal --> \n// --- | Orthogonal — such that there’s no overlap in capabilities between primitives (i.e. MECE or the single-responsibility principle);\n// --- | mutually exclusive, collectively exhaustive domain model primitives would be usefull..\n\n// -- | currently it fails silently if an action type is not applicable to a particular voxel cell\nexport const stateOperator = (action: ActionType_modify) => (state: SkylarkCellState): SkylarkCellState => {\n    switch(action._tag){\n        //Building,\n        case 'addFloors':\n            const addFloorFn = (n: number) => (building: Building): Building => {return {...building, floors: building.floors+n} };\n            const addFloor = addFloorFn(action.payload.additionalFloors);\n\n            return skylarkCellStatePrisms('_tag', 'Active')\n            .composeLens(activeLenses.active_state)\n            .composePrism(activeStatePrisms('_tag','Building'))\n            .modify(addFloor)(state);\n        \n        case 'removeFloors':\n            const removeFloorsFn = (n: number) => (building: Building): Building => {return {...building, floors: building.floors+n} };\n            const removeFloors = removeFloorsFn(action.payload.removedFloors);\n\n            return skylarkCellStatePrisms('_tag', 'Active')\n            .composeLens(activeLenses.active_state)\n            .composePrism(activeStatePrisms('_tag','Building'))\n            //here we need to perform stencil Fn checks on the peripehy elements... \n            .modify(removeFloors)(state);\n        //Storey,\n        // EnvelopeSection - > one we're most inerested in at the moment \n        // Room,\n        // WallUnit, \n        // FloorUnit, \n        // RoofUnut,\n        // Void\n\n        default: \n            throw new Error('no matching function for action')\n            return state; \n    }\n}\n\n// const newstate = operator(addFloorsAction(2))(skylarkInitialStateInactive)\n// console.log(newstate); \n\n","import * as A from \"fp-ts/Array\";\nimport * as O from \"fp-ts/Option\";\nimport * as R from \"fp-ts/Record\";\nimport { eqString } from \"fp-ts/lib/Eq\";\nimport { pipe } from \"fp-ts/pipeable\";\nimport { Lens } from \"monocle-ts\";\n\nimport { ModelStateActionTypes, ModelStateActions, DashboardState } from './types/model-state-action-types'\nimport { Owner, Property, EnergyPerformance, TasteProfile, Designer, Project, Subassembly, Building, Pattern} from './types/static-types'\n\n// import { ModuleName } from \"../../types\";\n\n\n/**\n * CRUD functions \n * \naddOne: accepts a single entity, and adds it\naddMany: accepts an array of entities, and adds them\nsetAll: accepts an array of entities, and replaces the existing entity contents with the values in the array\nremoveOne: accepts a single entity ID value, and removes the entity with that ID if it exists\nremoveMany: accepts an array of entity ID values, and removes each entity with those IDs if they exist\nupdateOne: accepts an \"update object\" containing an entity ID and an object containing one or more new field values to update inside a changes field, and updates the corresponding entity\nupdateMany: accepts an array of update objects, and updates all corresponding entities\nupsertOne: accepts a single entity. If an entity with that ID exists, the fields in the update will be merged into the existing entity, with any matching fields overwriting the existing values. If the entity does not exist, it will be added.\nupsertMany: accepts an array of entities that will be upserted.\nmap: accepts a callback function that will be run against each existing entity, and may return a change description object. Afterwards, all changes will be merged into the corresponding existing entities.\n\nMany of these can be reproduced using the semigroup operations: \ngetJoinSemigroup - Get a semigroup where concat will return the maximum, based on the provided order.\ngetMeetSemigroup - Get a semigroup where concat will return the minimum, based on the provided order.\nsemigroupAll - boolean semigroup under conjunction.\nsemigroupAny - boolean semigroup under disjunction.\n */\n\n\n\n\n////////////\n/**\n * Optics\n */\n\nconst subassembliesLens = Lens.fromPath<DashboardState>()([\"entities\", \"subassemblies\", 'byId']);\nconst atSubassembly = (id: string) => Lens.fromProp<Record<string, Subassembly>>()(id)\n\nconst projectsLens = Lens.fromPath<DashboardState>()([\"entities\", \"projects\", 'byId']);\nconst atProjectLens = (id: string) => Lens.fromProp<Record<string,Project>>()(id)\n\nconst ownersLens = Lens.fromPath<DashboardState>()([\"entities\", \"owners\", 'byId']);\nconst atOwners = (id: string) => Lens.fromProp<Record<string, Owner>>()(id)\n\nconst propertiesLens = Lens.fromPath<DashboardState>()([\"entities\", \"properties\", 'byId']);\nconst atProperies = (id: string) => Lens.fromProp<Record<string,Property>>()(id)\n\nconst buildingsLens = Lens.fromPath<DashboardState>()([\"entities\", \"buildings\", 'byId']);\nconst atBuilding = (id: string) => Lens.fromProp<Record<string, Building>>()(id)\n\nconst energyPerformanceLens = Lens.fromPath<DashboardState>()([\"entities\", \"energyPerformances\", 'byId']);\nconst atEnergyPerformance = (id: string) => Lens.fromProp<Record<string, EnergyPerformance>>()(id)\n\nconst patternsLens = Lens.fromPath<DashboardState>()([\"entities\", \"patterns\", 'byId']);\nconst atPatterns = (id: string) => Lens.fromProp<Record<string, Pattern>>()(id)\n\n\nconst tasteProfileLens = Lens.fromPath<DashboardState>()([\"entities\", \"tasteProfiles\", 'byId']);\nconst atTasteProfile = (id: string) => Lens.fromProp<Record<string, TasteProfile>>()(id)\n\nconst designerLens = Lens.fromPath<DashboardState>()([\"entities\", \"designers\", 'byId']);\nconst atDesigner = (id: string) => Lens.fromProp<Record<string, Designer>>()(id)\n\n\n\n\n export const INITIAL_STATE: DashboardState = {\n  entities: {\n    projects: {byId: R.empty, allIds: []},\n    owners: {byId: R.empty, allIds: []},\n    properties: {byId: R.empty, allIds: []},\n    buildings: {byId: R.empty, allIds: []},\n    subassemblies: {byId: R.empty, allIds: []},\n    energyPerformances: {byId: R.empty, allIds: []},\n    patterns: {byId: R.empty, allIds: []},\n    tasteProfiles: {byId: R.empty, allIds: []},\n    designers: {byId: R.empty, allIds: []},\n  }\n }\n\n //  Upsert : An operation that inserts rows into a database table if they do not already exist, or updates them if they do.\n //   Each row in a database is associated with an id. In each of these upsert functions, we provide an entire row of data,\n //   including this unique id. If the unique id matches one of an already existing row, then we have to configure rules\n //   of how to update -> do we merge? or do we overwrite? \n\n \n\n /// We can make the upsert function generic and all, but probably best to individually write out the logic... \n interface Entity{\n   id: string;\n   [key: string]: any;\n }\n\ndeclare type Upsert = <E extends Entity, E1, E2, E3>(\n  entity: E, \n  lens: Lens<DashboardState, Record<string, E>>, \n  lensor: (id: string) => Lens<Record<string, E>, E>, \n  upsertExternal1: E1 extends E ? Upsert: undefined,\n  upsertExternal2: E2 extends E ? Upsert: undefined, \n  upsertExternal3: E3 extends E ? Upsert: undefined\n) => (state: DashboardState) => DashboardState\n\nconst upsert = <E extends Entity, E1, E2, E3>(\n  entity: E, \n  lens: Lens<DashboardState, Record<string, E>>, \n  lensor: (id: string) => Lens<Record<string, E>, E>, \n  // upsertExternal1: E1 extends E ? Upsert: undefined,\n  // upsertExternal2: E2 extends E ? Upsert: undefined, \n  // upsertExternal3: E3 extends E ? Upsert: undefined\n) => (state: DashboardState): DashboardState => {\n   return pipe(\n     state,\n     R.lookup(entity.id),\n     O.fold(\n       () => {\n         return pipe(\n           state,\n           lens.compose(lensor(entity.id)).set({...entity})\n         )\n        },\n        (_entity) => {\n          return pipe(\n            state,\n            lens.compose(lensor(entity.id)).modify(\n              (prevEntity): E => ({\n                ...entity\n              }),\n              ),\n            );\n          },\n        ),\n        // upsertExternal1(),\n        // upsertExternal2(),\n        // upsertExternal13()\n      )\n  };\n  \n     \n\nconst upsertSubassembly = (subassembly: Subassembly) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(subassembly.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          subassembliesLens.compose(atSubassembly(subassembly.id)).set({ ...subassembly })\n        );\n      },\n      (_subassembly) => {\n        return pipe(\n          state,\n          subassembliesLens.compose(atSubassembly(subassembly.id)).modify(\n            (prevSubassembly): Subassembly => ({\n              ...subassembly,\n              id: prevSubassembly.id //note: we can also do clever things here like use our semigroups to do more complex merging... \n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertDesigner = (designer: Designer) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(designer.id),\n    O.fold(\n      // if the designer IS NOT found in the record database:\n      () => {\n        return pipe(\n          state,\n          designerLens.compose(atDesigner(designer.id)).set({ \n            ...designer \n          })\n        );\n      },\n      // if the use IS found in the record database\n      (_designer) => {\n        return pipe(\n          state,\n          designerLens.compose(atDesigner(designer.id)).modify(\n            (prevDesigner): Designer => ({\n              ...designer,\n              //note: we can also do clever things here like use our semigroups to do more complex merging... \n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertTasteProfile = (tasteProfile: TasteProfile) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(tasteProfile.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          tasteProfileLens.compose(atTasteProfile(tasteProfile.id)).set({ ...tasteProfile })\n        );\n      },\n      (_tasteProfile) => {\n        return pipe(\n          state,\n          tasteProfileLens.compose(atTasteProfile(tasteProfile.id)).modify(\n            (prevTasteProfile): TasteProfile => ({\n              ...tasteProfile,\n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\nconst upsertEnergyPerformance = (energyPerformance: EnergyPerformance) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(energyPerformance.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          energyPerformanceLens.compose(atEnergyPerformance(energyPerformance.id)).set({ ...energyPerformance })\n        );\n      },\n      (_energyPerformance) => {\n        return pipe(\n          state,\n          energyPerformanceLens.compose(atEnergyPerformance(energyPerformance.id)).modify(\n            (prevEnergyPerformance): EnergyPerformance => ({\n              ...energyPerformance\n            }),\n            ),\n          );\n        },\n      ),\n    );\n};\n\n\n\nconst upsertOwner = (owner: Owner) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(owner.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          ownersLens.compose(atOwners(owner.id)).set({\n            ...owner\n          })\n        )\n      },\n      (_owner) => {\n        return pipe(\n          state, \n          ownersLens.compose(atOwners(owner.id)).modify(\n            (prevOwner): Owner => ({\n              ...owner,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertTasteProfile(owner.ownerTasteProfile)\n  )\n}\n\nconst upsertPattern = (pattern: Pattern) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(pattern.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          patternsLens.compose(atPatterns(pattern.id)).set({\n            ...pattern\n          })\n        )\n      },\n      (_owner) => {\n        return pipe(\n          state, \n          patternsLens.compose(atPatterns(pattern.id)).modify(\n            (prevPattern): Pattern => ({\n              ...pattern,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n  )\n}\n\nconst upsertBuilding = (building: Building) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(building.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          buildingsLens.compose(atBuilding(building.id)).set({\n            ...building\n          })\n        )\n      },\n      (_building) => {\n        return pipe(\n          state, \n          buildingsLens.compose(atBuilding(building.id)).modify(\n            (prevBuilding): Building => ({\n              ...building,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertPattern(building.buildingPattern),\n    upsertEnergyPerformance(building.energyPerformance)\n  )\n}\n\n\nconst upsertProperty = (property: Property) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(property.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          propertiesLens.compose(atProperies(property.id)).set({\n            ...property\n          })\n        )\n      },\n      (_property) => {\n        return pipe(\n          state, \n          propertiesLens.compose(atProperies(property.id)).modify(\n            (prevProperty): Property => ({\n              ...property,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertBuilding(property.propertyBuilding1),\n    upsertBuilding(property.propertyBuilding2),\n    upsertBuilding(property.propertyBuilding3),\n\n  )\n}\n\nconst upsertProject = (project: Project) => (state: DashboardState): DashboardState => {\n  return pipe(\n    state,\n    R.lookup(project.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          projectsLens.compose(atProjectLens(project.id)).set({\n            ...project\n          })\n        )\n      },\n      (_property) => {\n        return pipe(\n          state, \n          projectsLens.compose(atProjectLens(project.id)).modify(\n            (prevProject): Project => ({\n              ...project,\n              // how do we want to merge? This is conundrum\n            })\n          )\n        )\n      }\n    ),\n    upsertOwner(project.projectOwner),\n    upsertProperty(project.projectPropety)\n  \n  )\n}\n\n\n export const dashboardReducer = (\n   state = INITIAL_STATE,\n   action: ModelStateActionTypes\n ): DashboardState => {\n  switch(action.type) {\n    case ModelStateActions.UPSERT_SUBASSEMBLIES:\n      return upsertSubassembly(action.payload.subassembly)(state)\n    case ModelStateActions.UPSERT_BUILDINGS:\n      return upsertBuilding(action.payload.buildings)(state);\n    case ModelStateActions.UPSERT_DESIGNER:\n      return upsertDesigner(action.payload.designers)(state);\n    case ModelStateActions.UPSERT_ENERGY_PERFORMANCE:\n      return upsertEnergyPerformance(action.payload.energyPerformances)(state);\n    case ModelStateActions.UPSERT_OWNERS:\n      return upsertOwner(action.payload.owners)(state);\n    case ModelStateActions.UPSERT_PATTERN:\n      return upsertPattern(action.payload.patterns)(state);\n    case ModelStateActions.UPSERT_PROJECTS:\n      return upsertProject(action.payload.projects)(state); \n    case ModelStateActions.UPSERT_PROPERTIES:\n      return upsertProperty(action.payload.properties)(state); \n    case ModelStateActions.UPSERT_TASTE_PROFILE:\n      return upsertTasteProfile(action.payload.tasteProfiles)(state); \n    default:\n      return state\n  }  \n }","import { Container } from './Container'; \n\nimport { CellState } from './CellState'; \n\n/**\n * Actions \n */\n\n\n// ->> CRUD operations on a normalized state structure\n \nexport enum ModelStateActions {\n    BRING_CONTAINER_INTO_FOCUS = \"BRING_CONTAINER_INTO_FOCUS\",\n    BRING_ALL_CONTAINERS_INTO_FOCUS = \"BRING_ALL_CONTAINERS_INTO_FOCUS\",\n\n    UPSERT_CELL_STATE = \"UPSERT_CELL_STATE\"\n }\n\n\n // --| Container Actions\n \n interface BringContainerIntoFocusAction {\n   type: typeof ModelStateActions.BRING_CONTAINER_INTO_FOCUS\n   payload: { containerInFocus: Container }\n }\n \n interface BringAllContainerIntoFocusAction {\n   type: typeof ModelStateActions.BRING_ALL_CONTAINERS_INTO_FOCUS\n }\n\n // --| Cell state actions\n interface UpsertCellState {\n   type: typeof ModelStateActions.UPSERT_CELL_STATE\n   payload: { cell: CellState}\n }\n\n \n \n \n \n export type ModelStateActionTypes = \n | BringContainerIntoFocusAction\n | BringAllContainerIntoFocusAction\n | UpsertCellState\n \n ","import * as t from 'io-ts'; \n\n\nexport const Point3 = t.tuple([t.number, t.number, t.number]); \n// const Cells = new Map<Point3, Cell_State>(); \n\n// Best to define this with io-ts, so that we may use io-ts; \n\nexport const Building =  t.interface({\n    _tag: t.literal('Building'),\n    floors: t.number\n})\nexport const Storey = t.interface({\n    _tag: t.literal('Storey')\n})\nexport const EnvelopeSection = t.interface({\n    _tag: t.literal('EnvelopeSection')\n    \n    \n})\nexport const Room = t.interface({\n    _tag: t.literal('Room')\n})\nexport const WallUnit = t.interface({\n    _tag: t.literal('WallUnit'),\n    wall_unit_state: t.union([\n        t.interface({_tag: t.literal('SolidWallUnit'), component: t.string}), \n        t.interface({_tag: t.literal('VoidFloorUnut'), component: t.string}), \n    ])\n})\nexport const FloorUnit = t.interface({\n    _tag: t.literal('FloorUnit'),\n    floor_unit__state: t.union([\n        t.interface({_tag: t.literal('SolidFloorUnit'), component: t.string}), \n        t.interface({_tag: t.literal('Window'), component: t.string}), \n        t.interface({_tag: t.literal('Door'), component: t.string}), \n    ])\n})\nexport const RoofUnit = t.interface({\n    _tag: t.literal('RoofUnit'),\n    roof_unit_state: t.union([\n        t.interface({_tag: t.literal('SolidRoofUnit'), component: t.string}), \n        t.interface({_tag: t.literal('RoofLight'), component: t.string}), \n    ])\n})\nexport const Void = t.interface({\n    _tag: t.literal('Void')\n})\n\nexport const Inactive =  t.interface({\n    _tag: t.literal('Inactive')\n})\nexport const ActiveState = t.union([\n    Building,\n    Storey,\n    EnvelopeSection, \n    Room,\n    WallUnit, \n    FloorUnit, \n    RoofUnit,\n    Void\n ])\n export const Active = t.interface({\n    _tag: t.literal('Active'), \n    active_state: ActiveState\n})\n\nexport const CellState = t.interface({\n    id: t.string, \n    coordinates: Point3,\n    rotation: t.tuple([t.number, t.number, t.number]),\n    cell: t.union([Active, Inactive])\n})\n// static types\n\nexport type CellState = t.TypeOf<typeof CellState>\nexport type Active = t.TypeOf<typeof Active>\nexport type Inactive = t.TypeOf<typeof Inactive>\n\nexport type ActiveState = t.TypeOf<typeof ActiveState>\nexport type Building = t.TypeOf<typeof Building>\n\n\n\n\n\n","import * as t from 'io-ts'\nimport { Lens } from 'monocle-ts'\n\n\nexport interface ExactHasLenses extends t.ExactType<HasLenses> {}\n\n\nexport type HasLenses = t.InterfaceType<any> | ExactHasLenses\n\nfunction getProps(codec: HasLenses): t.Props {\n  switch (codec._tag) {\n    case 'InterfaceType':\n      return codec.props\n    case 'ExactType':\n      return getProps(codec.type)\n  }\n}\n\nconst fromProp = Lens.fromProp<any>()\n\n/**\n * Return a `Lens` for each prop\n *\n * @example\n * import * as t from 'io-ts'\n * import { getLenses } from 'io-ts-types/lib/getLenses'\n *\n * const Person = t.type({\n *   name: t.string,\n *   age: t.number\n * })\n *\n * const lenses = getLenses(Person)\n * assert.strictEqual(lenses.age.get({ name: 'Giulio', age: 44 }), 44)\n *\n */\nexport function getLenses<C extends HasLenses>(\n  codec: C\n): { [K in keyof t.TypeOf<C>]: Lens<t.TypeOf<C>, t.TypeOf<C>[K]> } {\n  const r: any = {}\n  for (const k in getProps(codec)) {\n    r[k] = fromProp(k)\n  }\n  return r\n}\n\n// const getPrisms = <U>() =>\n//   <K extends keyof U, V extends U[K]>(key: K, value: V) => {\n//     new Prism<U, Extract<U, {[_ in K]: V}>>(\n//       union => (union[key] === value ? some(union) : none as any),\n//       s => s\n//     )\n\n\n\n\n","import { Prism } from 'monocle-ts'\nimport { some, none } from 'fp-ts/Option'\n\n\nexport const getPrism = <U>() =>\n    <K extends keyof U, V extends U[K]>(key: K, value: V) =>\n      new Prism<U, Extract<U, {[_ in K]: V}>>(\n        union => (union[key] === value ? some(union) : none as any),\n        s => s\n      )\n  \n","import * as A from \"fp-ts/Array\";\nimport * as O from \"fp-ts/Option\";\nimport * as R from \"fp-ts/Record\";\nimport { eqString } from \"fp-ts/lib/Eq\";\nimport { pipe } from \"fp-ts/pipeable\";\n\nimport { EditorState } from './types/editor-state-types'\nimport { ModelStateActionTypes, ModelStateActions } from './types/editor-action-types'; \n\n// types\nimport { Container } from './types/Container'\nimport { \n  Point3, \n  Building,\n  Storey,\n  EnvelopeSection, \n  Room,\n  WallUnit, \n  FloorUnit, \n  RoofUnit,\n  Void,\n  Active, \n  Inactive,\n  // CellState,\n  ActiveState\n} from './types/CellState'; \nimport type { CellState} from './types/CellState'; \n\n// optics\nimport {\n  fromTraversable,\n  Getter,\n  Iso,\n  Lens,\n  Optional,\n  Prism,\n  Traversal,\n} from 'monocle-ts';\nimport { getLenses } from '../../lib/optics/getLenses';\nimport { getPrism } from '../../lib/optics/getPrism';\n\n\n\nexport const INITIAL_STATE: EditorState = {\n  entities: {\n    containers: {byId: R.empty, allIds: []},\n\n    cellStates: {byId: R.empty, allIds: []},\n    // cellLocations?: NormalizedObject<any>\n   \n  }\n }\n\n\n\n////////////\n/**\n * Optics\n */\n\n // ---|  Lens/Prisms : Container\n\n\nconst containerInFocusLens = Lens.fromPath<EditorState>()([\"entities\", \"containers\", 'byId']);\nconst atContainerInFocus = (id: string) => Lens.fromProp<Record<string, Container>>()(id)\n\n\nconst isContainerWithIdFn: (s : string) => (a: Container) => Container =\n    s => (a: Container): Container => { return a.id == s ?  {id: a.id, visible: true } :  {id: a.id, visible: false } }\n    \nconst containerLens = Lens.fromPath<EditorState>()([\"entities\", \"containers\", \"byId\"]);\nconst recordTraversal = fromTraversable(R.record)<Container>();\nconst composedRecordTraversal = containerLens.composeTraversal(recordTraversal)\n\n\n// ---|  Lens/Prisms : Skylark Cell State\nconst cellStateLens = Lens.fromPath<EditorState>()([\"entities\", 'cellStates', 'byId']);\nconst atCellState = (id: string) => Lens.fromProp<Record<string, CellState>>()(id)\n\n\nconst cellStatePrism = getPrism<CellState>()\n\nconst activeLenses = getLenses(Active)\nconst inactiveLenses = getLenses(Inactive)\n\nconst activeStatePrisms = getPrism<ActiveState>()\n\nconst buildingLenses = getLenses(Building)\nconst storeyLenses = getLenses(Storey)\nconst envelopeSectionsLenses = getLenses(EnvelopeSection)\nconst roomLenses = getLenses(Room)\nconst wallUnitLenses = getLenses(WallUnit)\nconst floorUnitLenses = getLenses(FloorUnit)\nconst roofUnitLenses = getLenses(RoofUnit)\nconst voidLenses = getLenses(Void)\n// const activeStateLens = getLenses(ActiveState)\n\n\n\n\n////////////\n/**\n * Actions\n */\n\n\n // ---|  Actions : Container\n\nconst bringContainerIntoFocus = (containerInFocus: Container) => (state: EditorState): EditorState => {\n  // traverse the container records and change the visibility of all non chosen containers to invisible\n  const modificationPredicate = isContainerWithIdFn(containerInFocus.id)\n  return composedRecordTraversal.modify(modificationPredicate)(state)\n};\n\nconst bringAllContainersIntoFocus = () => (state: EditorState): EditorState => {\n  // traverse the container records and change the visibility of all non chosen containers to invisible\n  return composedRecordTraversal.modify( (a: Container) => {return {id: a.id, visible: true }} ) (state)\n};\n\n\n // ---|  Actions : SkylarkCellState\n\n\nconst upsertCellState = <E extends CellState>(\n entity: E, \n lens: Lens<EditorState, Record<string, E>>, \n lensor: (id: string) => Lens<Record<string, E>, E>, \n) => (state: EditorState): EditorState => {\n  return pipe(\n    state,\n    R.lookup(entity.id),\n    O.fold(\n      () => {\n        return pipe(\n          state,\n          lens.compose(lensor(entity.id)).set({...entity})\n        )\n       },\n       (_entity) => {\n         return pipe(\n           state,\n           lens.compose(lensor(entity.id)).modify(\n             (prevEntity): E => ({\n               ...entity\n             }),\n             ),\n           );\n         },\n       ),\n     )\n };\n\n\n\n export const editorReducer = (\n   state = INITIAL_STATE,\n   action: ModelStateActionTypes\n ): EditorState => {\n  switch(action.type) {\n    case ModelStateActions.BRING_CONTAINER_INTO_FOCUS:\n      return bringContainerIntoFocus(action.payload.containerInFocus)(state)\n    case ModelStateActions.BRING_ALL_CONTAINERS_INTO_FOCUS:\n      return bringAllContainersIntoFocus()(state)\n    \n    case ModelStateActions.UPSERT_CELL_STATE:\n      return upsertCellState(action.payload.cell, cellStateLens, atCellState)(state)\n      ; \n    default:\n      return state\n  }  \n}","import type { Middleware } from 'redux'\nimport type { RootState } from '../store'\n\nexport const loggerMiddleware: Middleware<\n  {}, // legacy type parameter added to satisfy interface signature\n  RootState\n> = store => next => action => {\n  console.group(action.type)\n  console.info('dispatching', action)\n  let result = next(action)\n  console.log('next state', store.getState())\n  console.groupEnd()\n  return result\n}\n\n\n\n","\nimport { dashboardReducer } from './Shared/reducers'\nimport { editorReducer } from './Editor/reducers'\n\nimport { combineReducers }  from 'redux'; \nimport thunkMiddleware from 'redux-thunk'\nimport { loggerMiddleware } from '../middleware/logger'\nimport { configureStore } from '@reduxjs/toolkit'\n\n\nexport const rootReducer = combineReducers({\n  dashboard: dashboardReducer,\n  editor: editorReducer\n})\n\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware()\n      .prepend(\n        // correctly typed middlewares can just be used\n        loggerMiddleware,\n        thunkMiddleware\n      )\n      // prepend and concat calls can be chained with .concat()\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof rootReducer>\n\n\n","import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';\n// import { onError } from \"@apollo/client/link/error\";\n\n// Instantiate required constructor fields\nconst httpLink = createHttpLink({\n    uri: \"https://api.baseql.com/airtable/graphql/appgIAAYooKJM4hyP\"\n});\n\n// const errorLink = onError(({ graphQLErrors, networkError }) => {\n//     if (graphQLErrors)\n//       graphQLErrors.map(({ message, locations, path }) =>\n//         console.error(\n//           `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n//         )\n//       );\n//   });\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: httpLink,\n});\n\n\n\n","import './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { store } from './store'\nimport { Provider } from 'react-redux';\n\nimport { client } from \"./client\";\nimport { ApolloProvider } from \"@apollo/client\";\nconst rootEl = document.getElementById(\"root\") as HTMLElement;\n\n\n// potential hurdle to do with redux and rf3: https://github.com/pmndrs/react-three-fiber/issues/43\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n  <Provider store={store}>\n\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n\n  </Provider>\n  </ApolloProvider>,\nrootEl\n);\n\n"],"sourceRoot":""}